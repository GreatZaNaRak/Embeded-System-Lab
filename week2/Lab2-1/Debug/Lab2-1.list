
Lab2-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d7c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f28  08006f28  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  08006fc0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08006fc0  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bf4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003520  00000000  00000000  00037cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0003c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024318  00000000  00000000  0003d250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c5d  00000000  00000000  00061568  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca05a  00000000  00000000  000721c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c21f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0013c29c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006eec 	.word	0x08006eec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006eec 	.word	0x08006eec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b972 	b.w	800094c <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9e08      	ldr	r6, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	4688      	mov	r8, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14b      	bne.n	8000726 <__udivmoddi4+0xa6>
 800068e:	428a      	cmp	r2, r1
 8000690:	4615      	mov	r5, r2
 8000692:	d967      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	b14a      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069a:	f1c2 0720 	rsb	r7, r2, #32
 800069e:	fa01 f302 	lsl.w	r3, r1, r2
 80006a2:	fa20 f707 	lsr.w	r7, r0, r7
 80006a6:	4095      	lsls	r5, r2
 80006a8:	ea47 0803 	orr.w	r8, r7, r3
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b8:	fa1f fc85 	uxth.w	ip, r5
 80006bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006c4:	fb07 f10c 	mul.w	r1, r7, ip
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18eb      	adds	r3, r5, r3
 80006ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80006d2:	f080 811b 	bcs.w	800090c <__udivmoddi4+0x28c>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8118 	bls.w	800090c <__udivmoddi4+0x28c>
 80006dc:	3f02      	subs	r7, #2
 80006de:	442b      	add	r3, r5
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006f4:	45a4      	cmp	ip, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	192c      	adds	r4, r5, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8107 	bcs.w	8000910 <__udivmoddi4+0x290>
 8000702:	45a4      	cmp	ip, r4
 8000704:	f240 8104 	bls.w	8000910 <__udivmoddi4+0x290>
 8000708:	3802      	subs	r0, #2
 800070a:	442c      	add	r4, r5
 800070c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000710:	eba4 040c 	sub.w	r4, r4, ip
 8000714:	2700      	movs	r7, #0
 8000716:	b11e      	cbz	r6, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c6 4300 	strd	r4, r3, [r6]
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d909      	bls.n	800073e <__udivmoddi4+0xbe>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80eb 	beq.w	8000906 <__udivmoddi4+0x286>
 8000730:	2700      	movs	r7, #0
 8000732:	e9c6 0100 	strd	r0, r1, [r6]
 8000736:	4638      	mov	r0, r7
 8000738:	4639      	mov	r1, r7
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	fab3 f783 	clz	r7, r3
 8000742:	2f00      	cmp	r7, #0
 8000744:	d147      	bne.n	80007d6 <__udivmoddi4+0x156>
 8000746:	428b      	cmp	r3, r1
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xd0>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 80fa 	bhi.w	8000944 <__udivmoddi4+0x2c4>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb61 0303 	sbc.w	r3, r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4698      	mov	r8, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d0e0      	beq.n	8000720 <__udivmoddi4+0xa0>
 800075e:	e9c6 4800 	strd	r4, r8, [r6]
 8000762:	e7dd      	b.n	8000720 <__udivmoddi4+0xa0>
 8000764:	b902      	cbnz	r2, 8000768 <__udivmoddi4+0xe8>
 8000766:	deff      	udf	#255	; 0xff
 8000768:	fab2 f282 	clz	r2, r2
 800076c:	2a00      	cmp	r2, #0
 800076e:	f040 808f 	bne.w	8000890 <__udivmoddi4+0x210>
 8000772:	1b49      	subs	r1, r1, r5
 8000774:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000778:	fa1f f885 	uxth.w	r8, r5
 800077c:	2701      	movs	r7, #1
 800077e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000782:	0c23      	lsrs	r3, r4, #16
 8000784:	fb0e 111c 	mls	r1, lr, ip, r1
 8000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078c:	fb08 f10c 	mul.w	r1, r8, ip
 8000790:	4299      	cmp	r1, r3
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x124>
 8000794:	18eb      	adds	r3, r5, r3
 8000796:	f10c 30ff 	add.w	r0, ip, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x122>
 800079c:	4299      	cmp	r1, r3
 800079e:	f200 80cd 	bhi.w	800093c <__udivmoddi4+0x2bc>
 80007a2:	4684      	mov	ip, r0
 80007a4:	1a59      	subs	r1, r3, r1
 80007a6:	b2a3      	uxth	r3, r4
 80007a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007b4:	fb08 f800 	mul.w	r8, r8, r0
 80007b8:	45a0      	cmp	r8, r4
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x14c>
 80007bc:	192c      	adds	r4, r5, r4
 80007be:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x14a>
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	f200 80b6 	bhi.w	8000936 <__udivmoddi4+0x2b6>
 80007ca:	4618      	mov	r0, r3
 80007cc:	eba4 0408 	sub.w	r4, r4, r8
 80007d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007d4:	e79f      	b.n	8000716 <__udivmoddi4+0x96>
 80007d6:	f1c7 0c20 	rsb	ip, r7, #32
 80007da:	40bb      	lsls	r3, r7
 80007dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007e4:	fa01 f407 	lsl.w	r4, r1, r7
 80007e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007f4:	4325      	orrs	r5, r4
 80007f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007fa:	0c2c      	lsrs	r4, r5, #16
 80007fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000800:	fa1f fa8e 	uxth.w	sl, lr
 8000804:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000808:	fb09 f40a 	mul.w	r4, r9, sl
 800080c:	429c      	cmp	r4, r3
 800080e:	fa02 f207 	lsl.w	r2, r2, r7
 8000812:	fa00 f107 	lsl.w	r1, r0, r7
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b0>
 8000818:	eb1e 0303 	adds.w	r3, lr, r3
 800081c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000820:	f080 8087 	bcs.w	8000932 <__udivmoddi4+0x2b2>
 8000824:	429c      	cmp	r4, r3
 8000826:	f240 8084 	bls.w	8000932 <__udivmoddi4+0x2b2>
 800082a:	f1a9 0902 	sub.w	r9, r9, #2
 800082e:	4473      	add	r3, lr
 8000830:	1b1b      	subs	r3, r3, r4
 8000832:	b2ad      	uxth	r5, r5
 8000834:	fbb3 f0f8 	udiv	r0, r3, r8
 8000838:	fb08 3310 	mls	r3, r8, r0, r3
 800083c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000840:	fb00 fa0a 	mul.w	sl, r0, sl
 8000844:	45a2      	cmp	sl, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1da>
 8000848:	eb1e 0404 	adds.w	r4, lr, r4
 800084c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000850:	d26b      	bcs.n	800092a <__udivmoddi4+0x2aa>
 8000852:	45a2      	cmp	sl, r4
 8000854:	d969      	bls.n	800092a <__udivmoddi4+0x2aa>
 8000856:	3802      	subs	r0, #2
 8000858:	4474      	add	r4, lr
 800085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085e:	fba0 8902 	umull	r8, r9, r0, r2
 8000862:	eba4 040a 	sub.w	r4, r4, sl
 8000866:	454c      	cmp	r4, r9
 8000868:	46c2      	mov	sl, r8
 800086a:	464b      	mov	r3, r9
 800086c:	d354      	bcc.n	8000918 <__udivmoddi4+0x298>
 800086e:	d051      	beq.n	8000914 <__udivmoddi4+0x294>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d069      	beq.n	8000948 <__udivmoddi4+0x2c8>
 8000874:	ebb1 050a 	subs.w	r5, r1, sl
 8000878:	eb64 0403 	sbc.w	r4, r4, r3
 800087c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000880:	40fd      	lsrs	r5, r7
 8000882:	40fc      	lsrs	r4, r7
 8000884:	ea4c 0505 	orr.w	r5, ip, r5
 8000888:	e9c6 5400 	strd	r5, r4, [r6]
 800088c:	2700      	movs	r7, #0
 800088e:	e747      	b.n	8000720 <__udivmoddi4+0xa0>
 8000890:	f1c2 0320 	rsb	r3, r2, #32
 8000894:	fa20 f703 	lsr.w	r7, r0, r3
 8000898:	4095      	lsls	r5, r2
 800089a:	fa01 f002 	lsl.w	r0, r1, r2
 800089e:	fa21 f303 	lsr.w	r3, r1, r3
 80008a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008a6:	4338      	orrs	r0, r7
 80008a8:	0c01      	lsrs	r1, r0, #16
 80008aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80008ae:	fa1f f885 	uxth.w	r8, r5
 80008b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ba:	fb07 f308 	mul.w	r3, r7, r8
 80008be:	428b      	cmp	r3, r1
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x256>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80008cc:	d22f      	bcs.n	800092e <__udivmoddi4+0x2ae>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d92d      	bls.n	800092e <__udivmoddi4+0x2ae>
 80008d2:	3f02      	subs	r7, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1acb      	subs	r3, r1, r3
 80008d8:	b281      	uxth	r1, r0
 80008da:	fbb3 f0fe 	udiv	r0, r3, lr
 80008de:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e6:	fb00 f308 	mul.w	r3, r0, r8
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d907      	bls.n	80008fe <__udivmoddi4+0x27e>
 80008ee:	1869      	adds	r1, r5, r1
 80008f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f4:	d217      	bcs.n	8000926 <__udivmoddi4+0x2a6>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d915      	bls.n	8000926 <__udivmoddi4+0x2a6>
 80008fa:	3802      	subs	r0, #2
 80008fc:	4429      	add	r1, r5
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000904:	e73b      	b.n	800077e <__udivmoddi4+0xfe>
 8000906:	4637      	mov	r7, r6
 8000908:	4630      	mov	r0, r6
 800090a:	e709      	b.n	8000720 <__udivmoddi4+0xa0>
 800090c:	4607      	mov	r7, r0
 800090e:	e6e7      	b.n	80006e0 <__udivmoddi4+0x60>
 8000910:	4618      	mov	r0, r3
 8000912:	e6fb      	b.n	800070c <__udivmoddi4+0x8c>
 8000914:	4541      	cmp	r1, r8
 8000916:	d2ab      	bcs.n	8000870 <__udivmoddi4+0x1f0>
 8000918:	ebb8 0a02 	subs.w	sl, r8, r2
 800091c:	eb69 020e 	sbc.w	r2, r9, lr
 8000920:	3801      	subs	r0, #1
 8000922:	4613      	mov	r3, r2
 8000924:	e7a4      	b.n	8000870 <__udivmoddi4+0x1f0>
 8000926:	4660      	mov	r0, ip
 8000928:	e7e9      	b.n	80008fe <__udivmoddi4+0x27e>
 800092a:	4618      	mov	r0, r3
 800092c:	e795      	b.n	800085a <__udivmoddi4+0x1da>
 800092e:	4667      	mov	r7, ip
 8000930:	e7d1      	b.n	80008d6 <__udivmoddi4+0x256>
 8000932:	4681      	mov	r9, r0
 8000934:	e77c      	b.n	8000830 <__udivmoddi4+0x1b0>
 8000936:	3802      	subs	r0, #2
 8000938:	442c      	add	r4, r5
 800093a:	e747      	b.n	80007cc <__udivmoddi4+0x14c>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	442b      	add	r3, r5
 8000942:	e72f      	b.n	80007a4 <__udivmoddi4+0x124>
 8000944:	4638      	mov	r0, r7
 8000946:	e708      	b.n	800075a <__udivmoddi4+0xda>
 8000948:	4637      	mov	r7, r6
 800094a:	e6e9      	b.n	8000720 <__udivmoddi4+0xa0>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_Init+0x40>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_Init+0x40>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x40>)
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f94d 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f005 fd1e 	bl	80063c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f965 	bl	8000c82 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f92d 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000028 	.word	0x20000028
 80009ec:	20000004 	.word	0x20000004
 80009f0:	20000000 	.word	0x20000000

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000004 	.word	0x20000004
 8000a18:	200000c0 	.word	0x200000c0

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000c0 	.word	0x200000c0

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_Delay+0x40>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000004 	.word	0x20000004

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff29 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff3e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff31 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffa2 	bl	8000bd4 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e16b      	b.n	8000f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 815a 	bne.w	8000f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x4a>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d123      	bne.n	8000d2e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	691a      	ldr	r2, [r3, #16]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	08da      	lsrs	r2, r3, #3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0203 	and.w	r2, r3, #3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d00b      	beq.n	8000d82 <HAL_GPIO_Init+0xe6>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d76:	2b11      	cmp	r3, #17
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80b4 	beq.w	8000f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <HAL_GPIO_Init+0x308>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	; (8000fa4 <HAL_GPIO_Init+0x308>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <HAL_GPIO_Init+0x308>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a5a      	ldr	r2, [pc, #360]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a51      	ldr	r2, [pc, #324]	; (8000fac <HAL_GPIO_Init+0x310>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d02b      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a50      	ldr	r2, [pc, #320]	; (8000fb0 <HAL_GPIO_Init+0x314>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d025      	beq.n	8000ebe <HAL_GPIO_Init+0x222>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_GPIO_Init+0x318>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d01f      	beq.n	8000eba <HAL_GPIO_Init+0x21e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <HAL_GPIO_Init+0x31c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d019      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d00d      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x328>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d007      	beq.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x32c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_GPIO_Init+0x20a>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e00e      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eaa:	2306      	movs	r3, #6
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	4934      	ldr	r1, [pc, #208]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f30:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f ae90 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3724      	adds	r7, #36	; 0x24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	40021c00 	.word	0x40021c00
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fec:	e003      	b.n	8000ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	401a      	ands	r2, r3
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	429a      	cmp	r2, r3
 800101a:	d104      	bne.n	8001026 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001024:	e002      	b.n	800102c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b08f      	sub	sp, #60	; 0x3c
 800103c:	af0a      	add	r7, sp, #40	; 0x28
 800103e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e054      	b.n	80010f4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d106      	bne.n	800106a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f005 fbbb 	bl	80067e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2203      	movs	r2, #3
 800106e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f819 	bl	80040c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	687e      	ldr	r6, [r7, #4]
 8001096:	466d      	mov	r5, sp
 8001098:	f106 0410 	add.w	r4, r6, #16
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ac:	1d33      	adds	r3, r6, #4
 80010ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f002 ff93 	bl	8003fdc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 f810 	bl	80040e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	687e      	ldr	r6, [r7, #4]
 80010ca:	466d      	mov	r5, sp
 80010cc:	f106 0410 	add.w	r4, r6, #16
 80010d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e0:	1d33      	adds	r3, r6, #4
 80010e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f003 f923 	bl	8004330 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010fc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4603      	mov	r3, r0
 800110c:	70fb      	strb	r3, [r7, #3]
 800110e:	460b      	mov	r3, r1
 8001110:	70bb      	strb	r3, [r7, #2]
 8001112:	4613      	mov	r3, r2
 8001114:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_HCD_HC_Init+0x28>
 8001120:	2302      	movs	r3, #2
 8001122:	e07f      	b.n	8001224 <HAL_HCD_HC_Init+0x128>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	333d      	adds	r3, #61	; 0x3d
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001140:	78fa      	ldrb	r2, [r7, #3]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	3338      	adds	r3, #56	; 0x38
 8001150:	787a      	ldrb	r2, [r7, #1]
 8001152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001154:	78fa      	ldrb	r2, [r7, #3]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001166:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	3339      	adds	r3, #57	; 0x39
 8001178:	78fa      	ldrb	r2, [r7, #3]
 800117a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	333f      	adds	r3, #63	; 0x3f
 800118c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	78bb      	ldrb	r3, [r7, #2]
 8001196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800119a:	b2d8      	uxtb	r0, r3
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	333a      	adds	r3, #58	; 0x3a
 80011aa:	4602      	mov	r2, r0
 80011ac:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80011ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da0a      	bge.n	80011cc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	333b      	adds	r3, #59	; 0x3b
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e009      	b.n	80011e0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80011cc:	78fa      	ldrb	r2, [r7, #3]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	333b      	adds	r3, #59	; 0x3b
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80011e0:	78fa      	ldrb	r2, [r7, #3]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	333c      	adds	r3, #60	; 0x3c
 80011f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	787c      	ldrb	r4, [r7, #1]
 80011fc:	78ba      	ldrb	r2, [r7, #2]
 80011fe:	78f9      	ldrb	r1, [r7, #3]
 8001200:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f003 f9cd 	bl	80045b0 <USB_HC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}

0800122c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_HCD_HC_Halt+0x1e>
 8001246:	2302      	movs	r3, #2
 8001248:	e00f      	b.n	800126a <HAL_HCD_HC_Halt+0x3e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	78fa      	ldrb	r2, [r7, #3]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fc07 	bl	8004a6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4603      	mov	r3, r0
 8001284:	70fb      	strb	r3, [r7, #3]
 8001286:	460b      	mov	r3, r1
 8001288:	70bb      	strb	r3, [r7, #2]
 800128a:	4613      	mov	r3, r2
 800128c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	333b      	adds	r3, #59	; 0x3b
 800129e:	78ba      	ldrb	r2, [r7, #2]
 80012a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80012a2:	78fa      	ldrb	r2, [r7, #3]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	333f      	adds	r3, #63	; 0x3f
 80012b2:	787a      	ldrb	r2, [r7, #1]
 80012b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80012b6:	7c3b      	ldrb	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10a      	bne.n	80012d2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	3342      	adds	r3, #66	; 0x42
 80012cc:	2203      	movs	r2, #3
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e009      	b.n	80012e6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	3342      	adds	r3, #66	; 0x42
 80012e2:	2202      	movs	r2, #2
 80012e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80012e6:	787b      	ldrb	r3, [r7, #1]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	f200 80d6 	bhi.w	800149a <HAL_HCD_HC_SubmitRequest+0x226>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001305 	.word	0x08001305
 80012f8:	08001485 	.word	0x08001485
 80012fc:	08001371 	.word	0x08001371
 8001300:	080013fb 	.word	0x080013fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001304:	7c3b      	ldrb	r3, [r7, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 80c9 	bne.w	800149e <HAL_HCD_HC_SubmitRequest+0x22a>
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 80c5 	bne.w	800149e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3351      	adds	r3, #81	; 0x51
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	3351      	adds	r3, #81	; 0x51
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10a      	bne.n	800135a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	3342      	adds	r3, #66	; 0x42
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001358:	e0a1      	b.n	800149e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3342      	adds	r3, #66	; 0x42
 800136a:	2202      	movs	r2, #2
 800136c:	701a      	strb	r2, [r3, #0]
      break;
 800136e:	e096      	b.n	800149e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d120      	bne.n	80013b8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	3351      	adds	r3, #81	; 0x51
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10a      	bne.n	80013a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3342      	adds	r3, #66	; 0x42
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80013a0:	e07e      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	3342      	adds	r3, #66	; 0x42
 80013b2:	2202      	movs	r2, #2
 80013b4:	701a      	strb	r2, [r3, #0]
      break;
 80013b6:	e073      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3350      	adds	r3, #80	; 0x50
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10a      	bne.n	80013e4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ce:	78fa      	ldrb	r2, [r7, #3]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	3342      	adds	r3, #66	; 0x42
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
      break;
 80013e2:	e05d      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3342      	adds	r3, #66	; 0x42
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
      break;
 80013f8:	e052      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80013fa:	78bb      	ldrb	r3, [r7, #2]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d120      	bne.n	8001442 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3351      	adds	r3, #81	; 0x51
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10a      	bne.n	800142c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3342      	adds	r3, #66	; 0x42
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800142a:	e039      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3342      	adds	r3, #66	; 0x42
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]
      break;
 8001440:	e02e      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3350      	adds	r3, #80	; 0x50
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10a      	bne.n	800146e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	3342      	adds	r3, #66	; 0x42
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
      break;
 800146c:	e018      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	3342      	adds	r3, #66	; 0x42
 800147e:	2202      	movs	r2, #2
 8001480:	701a      	strb	r2, [r3, #0]
      break;
 8001482:	e00d      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	3342      	adds	r3, #66	; 0x42
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
      break;
 8001498:	e002      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800149e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3344      	adds	r3, #68	; 0x44
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	8b39      	ldrh	r1, [r7, #24]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4403      	add	r3, r0
 80014c4:	3348      	adds	r3, #72	; 0x48
 80014c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	335c      	adds	r3, #92	; 0x5c
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	334c      	adds	r3, #76	; 0x4c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3339      	adds	r3, #57	; 0x39
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	335d      	adds	r3, #93	; 0x5d
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	3338      	adds	r3, #56	; 0x38
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	18d1      	adds	r1, r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	f003 f946 	bl	80047c4 <USB_HC_StartXfer>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop

08001544 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fea5 	bl	80042aa <USB_GetMode>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	f040 80f1 	bne.w	800174a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fe89 	bl	8004284 <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80e7 	beq.w	8001748 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fe80 	bl	8004284 <USB_ReadInterrupts>
 8001584:	4603      	mov	r3, r0
 8001586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800158e:	d104      	bne.n	800159a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001598:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fe70 	bl	8004284 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015ae:	d104      	bne.n	80015ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fe60 	bl	8004284 <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015ce:	d104      	bne.n	80015da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fe50 	bl	8004284 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d103      	bne.n	80015f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fe42 	bl	8004284 <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800160a:	d117      	bne.n	800163c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800161a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800161e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f005 f95b 	bl	80068dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f002 ff3b 	bl	80044a8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800163a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fe1f 	bl	8004284 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d102      	bne.n	8001658 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 f8ac 	bl	80027b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f002 fe11 	bl	8004284 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b08      	cmp	r3, #8
 800166a:	d106      	bne.n	800167a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f005 f919 	bl	80068a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fe00 	bl	8004284 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800168e:	d138      	bne.n	8001702 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f003 f9d9 	bl	8004a4c <USB_HC_ReadInterrupt>
 800169a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e025      	b.n	80016ee <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d018      	beq.n	80016e8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016cc:	d106      	bne.n	80016dc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8b3 	bl	8001840 <HCD_HC_IN_IRQHandler>
 80016da:	e005      	b.n	80016e8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fc43 	bl	8001f6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3d4      	bcc.n	80016a2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fdbc 	bl	8004284 <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b10      	cmp	r3, #16
 8001714:	d101      	bne.n	800171a <HAL_HCD_IRQHandler+0x1d6>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_HCD_IRQHandler+0x1d8>
 800171a:	2300      	movs	r3, #0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d014      	beq.n	800174a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0210 	bic.w	r2, r2, #16
 800172e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 ff91 	bl	8002658 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0210 	orr.w	r2, r2, #16
 8001744:	619a      	str	r2, [r3, #24]
 8001746:	e000      	b.n	800174a <HAL_HCD_IRQHandler+0x206>
      return;
 8001748:	bf00      	nop
    }
  }
}
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_HCD_Start+0x16>
 8001762:	2302      	movs	r3, #2
 8001764:	e013      	b.n	800178e <HAL_HCD_Start+0x3e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fc93 	bl	800409e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fecc 	bl	800451c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_HCD_Stop+0x16>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e00d      	b.n	80017c8 <HAL_HCD_Stop+0x32>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fa93 	bl	8004ce4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	335c      	adds	r3, #92	; 0x5c
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	334c      	adds	r3, #76	; 0x4c
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 feac 	bl	800458e <USB_GetCurrentFrame>
 8001836:	4603      	mov	r3, r0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4413      	add	r3, r2
 8001862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b04      	cmp	r3, #4
 800186e:	d119      	bne.n	80018a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187c:	461a      	mov	r2, r3
 800187e:	2304      	movs	r3, #4
 8001880:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	0151      	lsls	r1, r2, #5
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	440a      	add	r2, r1
 8001898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	60d3      	str	r3, [r2, #12]
 80018a2:	e095      	b.n	80019d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d109      	bne.n	80018ce <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c6:	461a      	mov	r2, r3
 80018c8:	2320      	movs	r3, #32
 80018ca:	6093      	str	r3, [r2, #8]
 80018cc:	e080      	b.n	80019d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d134      	bne.n	800194e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	0151      	lsls	r1, r2, #5
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	440a      	add	r2, r1
 80018fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	335d      	adds	r3, #93	; 0x5d
 8001914:	2205      	movs	r2, #5
 8001916:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4413      	add	r3, r2
 8001920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001924:	461a      	mov	r2, r3
 8001926:	2310      	movs	r3, #16
 8001928:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4413      	add	r3, r2
 8001932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001936:	461a      	mov	r2, r3
 8001938:	2308      	movs	r3, #8
 800193a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f891 	bl	8004a6e <USB_HC_Halt>
 800194c:	e040      	b.n	80019d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001964:	d134      	bne.n	80019d0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	0151      	lsls	r1, r2, #5
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	440a      	add	r2, r1
 800197c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f86c 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4413      	add	r3, r2
 800199e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a2:	461a      	mov	r2, r3
 80019a4:	2310      	movs	r3, #16
 80019a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	335d      	adds	r3, #93	; 0x5d
 80019b8:	2208      	movs	r2, #8
 80019ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c8:	461a      	mov	r2, r3
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e6:	d122      	bne.n	8001a2e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	0151      	lsls	r1, r2, #5
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	440a      	add	r2, r1
 80019fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f82b 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a24:	461a      	mov	r2, r3
 8001a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a2c:	e29b      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	f040 80c1 	bne.w	8001bc8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01b      	beq.n	8001a86 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3348      	adds	r3, #72	; 0x48
 8001a5e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	0159      	lsls	r1, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	440b      	add	r3, r1
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a72:	1ad1      	subs	r1, r2, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4403      	add	r3, r0
 8001a82:	334c      	adds	r3, #76	; 0x4c
 8001a84:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	335d      	adds	r3, #93	; 0x5d
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3358      	adds	r3, #88	; 0x58
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	461a      	mov	r2, r3
 8001abc:	2301      	movs	r3, #1
 8001abe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	333f      	adds	r3, #63	; 0x3f
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	333f      	adds	r3, #63	; 0x3f
 8001ae6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d121      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	0151      	lsls	r1, r2, #5
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	440a      	add	r2, r1
 8001b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 ffa9 	bl	8004a6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	6093      	str	r3, [r2, #8]
 8001b2e:	e034      	b.n	8001b9a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	333f      	adds	r3, #63	; 0x3f
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d129      	bne.n	8001b9a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	0151      	lsls	r1, r2, #5
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	440a      	add	r2, r1
 8001b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b64:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	335c      	adds	r3, #92	; 0x5c
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b2d8      	uxtb	r0, r3
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	335c      	adds	r3, #92	; 0x5c
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4601      	mov	r1, r0
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f004 feaf 	bl	80068f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3350      	adds	r3, #80	; 0x50
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2d8      	uxtb	r0, r3
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3350      	adds	r3, #80	; 0x50
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	701a      	strb	r2, [r3, #0]
}
 8001bc6:	e1ce      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	f040 80f1 	bne.w	8001dc2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	0151      	lsls	r1, r2, #5
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	440a      	add	r2, r1
 8001bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bfa:	f023 0302 	bic.w	r3, r3, #2
 8001bfe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	335d      	adds	r3, #93	; 0x5d
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10a      	bne.n	8001c2c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	335c      	adds	r3, #92	; 0x5c
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e0b0      	b.n	8001d8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	335d      	adds	r3, #93	; 0x5d
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d10a      	bne.n	8001c58 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	335c      	adds	r3, #92	; 0x5c
 8001c52:	2205      	movs	r2, #5
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e09a      	b.n	8001d8e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	335d      	adds	r3, #93	; 0x5d
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d00a      	beq.n	8001c84 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	335d      	adds	r3, #93	; 0x5d
 8001c7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d156      	bne.n	8001d32 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3358      	adds	r3, #88	; 0x58
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4403      	add	r3, r0
 8001ca6:	3358      	adds	r3, #88	; 0x58
 8001ca8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3358      	adds	r3, #88	; 0x58
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d914      	bls.n	8001cea <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	3358      	adds	r3, #88	; 0x58
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	335c      	adds	r3, #92	; 0x5c
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e009      	b.n	8001cfe <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	335c      	adds	r3, #92	; 0x5c
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e02d      	b.n	8001d8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	335d      	adds	r3, #93	; 0x5d
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d122      	bne.n	8001d8e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	335c      	adds	r3, #92	; 0x5c
 8001d58:	2202      	movs	r2, #2
 8001d5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	b2d8      	uxtb	r0, r3
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	335c      	adds	r3, #92	; 0x5c
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4601      	mov	r1, r0
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f004 fd9c 	bl	80068f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001dc0:	e0d1      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d13e      	bne.n	8001e56 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	0151      	lsls	r1, r2, #5
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	440a      	add	r2, r1
 8001dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	3358      	adds	r3, #88	; 0x58
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4403      	add	r3, r0
 8001e1a:	3358      	adds	r3, #88	; 0x58
 8001e1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	335d      	adds	r3, #93	; 0x5d
 8001e2e:	2206      	movs	r2, #6
 8001e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fe16 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	6093      	str	r3, [r2, #8]
}
 8001e54:	e087      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	d17c      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	333f      	adds	r3, #63	; 0x3f
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d122      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3358      	adds	r3, #88	; 0x58
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	0151      	lsls	r1, r2, #5
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	440a      	add	r2, r1
 8001eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fdd4 	bl	8004a6e <USB_HC_Halt>
 8001ec6:	e045      	b.n	8001f54 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	333f      	adds	r3, #63	; 0x3f
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	333f      	adds	r3, #63	; 0x3f
 8001eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d12f      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	3358      	adds	r3, #88	; 0x58
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d121      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	335d      	adds	r3, #93	; 0x5d
 8001f20:	2203      	movs	r2, #3
 8001f22:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	0151      	lsls	r1, r2, #5
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	440a      	add	r2, r1
 8001f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fd8d 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2310      	movs	r3, #16
 8001f64:	6093      	str	r3, [r2, #8]
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d119      	bne.n	8001fd2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	2304      	movs	r3, #4
 8001fae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001fd0:	e33e      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d141      	bne.n	800206c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	333d      	adds	r3, #61	; 0x3d
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 831f 	bne.w	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	333d      	adds	r3, #61	; 0x3d
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	335c      	adds	r3, #92	; 0x5c
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	0151      	lsls	r1, r2, #5
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	440a      	add	r2, r1
 8002050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fd02 	bl	8004a6e <USB_HC_Halt>
}
 800206a:	e2f1      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d13f      	bne.n	8002102 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	335d      	adds	r3, #93	; 0x5d
 8002092:	2204      	movs	r2, #4
 8002094:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	333d      	adds	r3, #61	; 0x3d
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	3358      	adds	r3, #88	; 0x58
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	0151      	lsls	r1, r2, #5
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	440a      	add	r2, r1
 80020d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fcc0 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	461a      	mov	r2, r3
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	6093      	str	r3, [r2, #8]
}
 8002100:	e2a6      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d122      	bne.n	8002160 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	0151      	lsls	r1, r2, #5
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	440a      	add	r2, r1
 8002130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fc92 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215c:	6093      	str	r3, [r2, #8]
}
 800215e:	e277      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d135      	bne.n	80021e2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	3358      	adds	r3, #88	; 0x58
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fc5a 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	335d      	adds	r3, #93	; 0x5d
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
}
 80021e0:	e236      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d12b      	bne.n	8002250 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	2308      	movs	r3, #8
 8002208:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	0151      	lsls	r1, r2, #5
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	440a      	add	r2, r1
 8002220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fc1a 	bl	8004a6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	335d      	adds	r3, #93	; 0x5d
 800224a:	2205      	movs	r2, #5
 800224c:	701a      	strb	r2, [r3, #0]
}
 800224e:	e1ff      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b10      	cmp	r3, #16
 8002264:	d155      	bne.n	8002312 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3358      	adds	r3, #88	; 0x58
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	335d      	adds	r3, #93	; 0x5d
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	333d      	adds	r3, #61	; 0x3d
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d114      	bne.n	80022ce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	333c      	adds	r3, #60	; 0x3c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	333d      	adds	r3, #61	; 0x3d
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	0151      	lsls	r1, r2, #5
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	440a      	add	r2, r1
 80022e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fbb8 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	461a      	mov	r2, r3
 800230c:	2310      	movs	r3, #16
 800230e:	6093      	str	r3, [r2, #8]
}
 8002310:	e19e      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d12b      	bne.n	8002380 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	0151      	lsls	r1, r2, #5
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	440a      	add	r2, r1
 800233e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f002 fb8b 	bl	8004a6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	335d      	adds	r3, #93	; 0x5d
 8002368:	2206      	movs	r2, #6
 800236a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	461a      	mov	r2, r3
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	6093      	str	r3, [r2, #8]
}
 800237e:	e167      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002396:	d135      	bne.n	8002404 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	0151      	lsls	r1, r2, #5
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	440a      	add	r2, r1
 80023ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 fb53 	bl	8004a6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	461a      	mov	r2, r3
 80023d6:	2310      	movs	r3, #16
 80023d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	335d      	adds	r3, #93	; 0x5d
 80023fe:	2208      	movs	r2, #8
 8002400:	701a      	strb	r2, [r3, #0]
}
 8002402:	e125      	b.n	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	f040 811a 	bne.w	8002650 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	0151      	lsls	r1, r2, #5
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	440a      	add	r2, r1
 8002432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002436:	f023 0302 	bic.w	r3, r3, #2
 800243a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	335d      	adds	r3, #93	; 0x5d
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d137      	bne.n	80024c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	335c      	adds	r3, #92	; 0x5c
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	333f      	adds	r3, #63	; 0x3f
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d00b      	beq.n	8002494 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	333f      	adds	r3, #63	; 0x3f
 800248c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800248e:	2b03      	cmp	r3, #3
 8002490:	f040 80c5 	bne.w	800261e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3351      	adds	r3, #81	; 0x51
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2d8      	uxtb	r0, r3
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	3351      	adds	r3, #81	; 0x51
 80024bc:	4602      	mov	r2, r0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e0ad      	b.n	800261e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	335d      	adds	r3, #93	; 0x5d
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d10a      	bne.n	80024ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	335c      	adds	r3, #92	; 0x5c
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e097      	b.n	800261e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	335d      	adds	r3, #93	; 0x5d
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d10a      	bne.n	800251a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e081      	b.n	800261e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	335d      	adds	r3, #93	; 0x5d
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d10a      	bne.n	8002546 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	2205      	movs	r2, #5
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e06b      	b.n	800261e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335d      	adds	r3, #93	; 0x5d
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b06      	cmp	r3, #6
 800255a:	d00a      	beq.n	8002572 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	335d      	adds	r3, #93	; 0x5d
 800256c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800256e:	2b08      	cmp	r3, #8
 8002570:	d155      	bne.n	800261e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	3358      	adds	r3, #88	; 0x58
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4403      	add	r3, r0
 8002594:	3358      	adds	r3, #88	; 0x58
 8002596:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3358      	adds	r3, #88	; 0x58
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d914      	bls.n	80025d8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	3358      	adds	r3, #88	; 0x58
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	335c      	adds	r3, #92	; 0x5c
 80025d2:	2204      	movs	r2, #4
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e009      	b.n	80025ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	335c      	adds	r3, #92	; 0x5c
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002602:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2302      	movs	r3, #2
 800262e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	b2d8      	uxtb	r0, r3
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	335c      	adds	r3, #92	; 0x5c
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4601      	mov	r1, r0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f004 f954 	bl	80068f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002650:	bf00      	nop
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d003      	beq.n	800269c <HCD_RXQLVL_IRQHandler+0x44>
 8002694:	2b05      	cmp	r3, #5
 8002696:	f000 8082 	beq.w	800279e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800269a:	e083      	b.n	80027a4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07f      	beq.n	80027a2 <HCD_RXQLVL_IRQHandler+0x14a>
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	3344      	adds	r3, #68	; 0x44
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d074      	beq.n	80027a2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3344      	adds	r3, #68	; 0x44
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	b292      	uxth	r2, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f001 fdad 	bl	8004232 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	3344      	adds	r3, #68	; 0x44
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	18d1      	adds	r1, r2, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4403      	add	r3, r0
 80026fc:	3344      	adds	r3, #68	; 0x44
 80026fe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	; 0x4c
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	18d1      	adds	r1, r2, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4403      	add	r3, r0
 8002724:	334c      	adds	r3, #76	; 0x4c
 8002726:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HCD_RXQLVL_IRQHandler+0x154>)
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d031      	beq.n	80027a2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002754:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	3350      	adds	r3, #80	; 0x50
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2d8      	uxtb	r0, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	3350      	adds	r3, #80	; 0x50
 8002798:	4602      	mov	r2, r0
 800279a:	701a      	strb	r2, [r3, #0]
      break;
 800279c:	e001      	b.n	80027a2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80027a2:	bf00      	nop
  }
}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	1ff80000 	.word	0x1ff80000

080027b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d113      	bne.n	8002810 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10a      	bne.n	8002808 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002800:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f004 f85c 	bl	80068c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d147      	bne.n	80028aa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d129      	bne.n	8002880 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d113      	bne.n	800285c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800283a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283e:	d106      	bne.n	800284e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f001 fe2e 	bl	80044a8 <USB_InitFSLSPClkSel>
 800284c:	e011      	b.n	8002872 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f001 fe27 	bl	80044a8 <USB_InitFSLSPClkSel>
 800285a:	e00a      	b.n	8002872 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286a:	461a      	mov	r2, r3
 800286c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002870:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f004 f84e 	bl	8006914 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f004 f821 	bl	80068c0 <HAL_HCD_Connect_Callback>
 800287e:	e014      	b.n	80028aa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f004 f855 	bl	8006930 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002894:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002898:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d103      	bne.n	80028bc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e10f      	b.n	8002b02 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f003 fd8c 	bl	8006414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002914:	f001 f9ac 	bl	8003c70 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <HAL_I2C_Init+0x23c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d807      	bhi.n	8002934 <HAL_I2C_Init+0x64>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a7a      	ldr	r2, [pc, #488]	; (8002b10 <HAL_I2C_Init+0x240>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e006      	b.n	8002942 <HAL_I2C_Init+0x72>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a77      	ldr	r2, [pc, #476]	; (8002b14 <HAL_I2C_Init+0x244>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0db      	b.n	8002b02 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a72      	ldr	r2, [pc, #456]	; (8002b18 <HAL_I2C_Init+0x248>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a64      	ldr	r2, [pc, #400]	; (8002b0c <HAL_I2C_Init+0x23c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d802      	bhi.n	8002984 <HAL_I2C_Init+0xb4>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3301      	adds	r3, #1
 8002982:	e009      	b.n	8002998 <HAL_I2C_Init+0xc8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <HAL_I2C_Init+0x24c>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3301      	adds	r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4956      	ldr	r1, [pc, #344]	; (8002b0c <HAL_I2C_Init+0x23c>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d80d      	bhi.n	80029d4 <HAL_I2C_Init+0x104>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e59      	subs	r1, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	bf38      	it	cc
 80029d0:	2304      	movcc	r3, #4
 80029d2:	e04f      	b.n	8002a74 <HAL_I2C_Init+0x1a4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <HAL_I2C_Init+0x130>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e58      	subs	r0, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e012      	b.n	8002a26 <HAL_I2C_Init+0x156>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Init+0x15e>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e022      	b.n	8002a74 <HAL_I2C_Init+0x1a4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10e      	bne.n	8002a54 <HAL_I2C_Init+0x184>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e58      	subs	r0, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a52:	e00f      	b.n	8002a74 <HAL_I2C_Init+0x1a4>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	0099      	lsls	r1, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	6809      	ldr	r1, [r1, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6911      	ldr	r1, [r2, #16]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	000186a0 	.word	0x000186a0
 8002b10:	001e847f 	.word	0x001e847f
 8002b14:	003d08ff 	.word	0x003d08ff
 8002b18:	431bde83 	.word	0x431bde83
 8002b1c:	10624dd3 	.word	0x10624dd3

08002b20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e128      	b.n	8002d84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a90      	ldr	r2, [pc, #576]	; (8002d8c <HAL_I2S_Init+0x26c>)
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f003 fca9 	bl	80064a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b68:	f023 030f 	bic.w	r3, r3, #15
 8002b6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2202      	movs	r2, #2
 8002b74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d060      	beq.n	8002c40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002b86:	2310      	movs	r3, #16
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e001      	b.n	8002b90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d802      	bhi.n	8002b9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f001 f95c 	bl	8003e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8002ba4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bae:	d125      	bne.n	8002bfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	461a      	mov	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	3305      	adds	r3, #5
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e01f      	b.n	8002c1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	461a      	mov	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	3305      	adds	r3, #5
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e00e      	b.n	8002c1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	3305      	adds	r3, #5
 8002c18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4a5c      	ldr	r2, [pc, #368]	; (8002d90 <HAL_I2S_Init+0x270>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e003      	b.n	8002c48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c40:	2302      	movs	r3, #2
 8002c42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d902      	bls.n	8002c54 <HAL_I2S_Init+0x134>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2bff      	cmp	r3, #255	; 0xff
 8002c52:	d907      	bls.n	8002c64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e08f      	b.n	8002d84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	ea42 0103 	orr.w	r1, r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c82:	f023 030f 	bic.w	r3, r3, #15
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6851      	ldr	r1, [r2, #4]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6892      	ldr	r2, [r2, #8]
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68d2      	ldr	r2, [r2, #12]
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6992      	ldr	r2, [r2, #24]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d161      	bne.n	8002d74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_I2S_Init+0x274>)
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <HAL_I2S_Init+0x278>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_I2S_Init+0x1a4>
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_I2S_Init+0x27c>)
 8002cc2:	e001      	b.n	8002cc8 <HAL_I2S_Init+0x1a8>
 8002cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4932      	ldr	r1, [pc, #200]	; (8002d98 <HAL_I2S_Init+0x278>)
 8002cd0:	428a      	cmp	r2, r1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2S_Init+0x1b8>
 8002cd4:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <HAL_I2S_Init+0x27c>)
 8002cd6:	e001      	b.n	8002cdc <HAL_I2S_Init+0x1bc>
 8002cd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002cdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ce0:	f023 030f 	bic.w	r3, r3, #15
 8002ce4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <HAL_I2S_Init+0x278>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2S_Init+0x1d4>
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <HAL_I2S_Init+0x27c>)
 8002cf2:	e001      	b.n	8002cf8 <HAL_I2S_Init+0x1d8>
 8002cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a25      	ldr	r2, [pc, #148]	; (8002d98 <HAL_I2S_Init+0x278>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_I2S_Init+0x1ea>
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_I2S_Init+0x27c>)
 8002d08:	e001      	b.n	8002d0e <HAL_I2S_Init+0x1ee>
 8002d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1a:	d003      	beq.n	8002d24 <HAL_I2S_Init+0x204>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d103      	bne.n	8002d2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e001      	b.n	8002d30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	b299      	uxth	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002d46:	4303      	orrs	r3, r0
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_I2S_Init+0x278>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_I2S_Init+0x24c>
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_I2S_Init+0x27c>)
 8002d6a:	e001      	b.n	8002d70 <HAL_I2S_Init+0x250>
 8002d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d70:	897a      	ldrh	r2, [r7, #10]
 8002d72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	08002e97 	.word	0x08002e97
 8002d90:	cccccccd 	.word	0xcccccccd
 8002d94:	08002fad 	.word	0x08002fad
 8002d98:	40003800 	.word	0x40003800
 8002d9c:	40003400 	.word	0x40003400

08002da0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c9a      	adds	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10e      	bne.n	8002e30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffb8 	bl	8002da0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff93 	bl	8002db4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d13a      	bne.n	8002f28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d109      	bne.n	8002ed0 <I2S_IRQHandler+0x3a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d102      	bne.n	8002ed0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffb4 	bl	8002e38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d126      	bne.n	8002f28 <I2S_IRQHandler+0x92>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d11f      	bne.n	8002f28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff50 	bl	8002dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d136      	bne.n	8002fa2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d109      	bne.n	8002f52 <I2S_IRQHandler+0xbc>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d102      	bne.n	8002f52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff45 	bl	8002ddc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d122      	bne.n	8002fa2 <I2S_IRQHandler+0x10c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d11b      	bne.n	8002fa2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff13 	bl	8002dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4aa2      	ldr	r2, [pc, #648]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002fc6:	4ba2      	ldr	r3, [pc, #648]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fc8:	e001      	b.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a9b      	ldr	r2, [pc, #620]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fe6:	e001      	b.n	8002fec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff8:	d004      	beq.n	8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 8099 	bne.w	8003136 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d107      	bne.n	800301e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f925 	bl	8003268 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f9c8 	bl	80033c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d13a      	bne.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d035      	beq.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7e      	ldr	r2, [pc, #504]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003056:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003058:	e001      	b.n	800305e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800305a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4979      	ldr	r1, [pc, #484]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003066:	428b      	cmp	r3, r1
 8003068:	d101      	bne.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800306c:	e001      	b.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800306e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003076:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003086:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fe88 	bl	8002dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	f040 80be 	bne.w	8003240 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80b8 	beq.w	8003240 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a59      	ldr	r2, [pc, #356]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80030ea:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030ec:	e001      	b.n	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80030ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4954      	ldr	r1, [pc, #336]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030fa:	428b      	cmp	r3, r1
 80030fc:	d101      	bne.n	8003102 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003100:	e001      	b.n	8003106 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003106:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800310a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f043 0204 	orr.w	r2, r3, #4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe4a 	bl	8002dc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003134:	e084      	b.n	8003240 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d107      	bne.n	8003150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8be 	bl	80032cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8fd 	bl	8003364 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d12f      	bne.n	80031d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02a      	beq.n	80031d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800318c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800319a:	e001      	b.n	80031a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800319c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4929      	ldr	r1, [pc, #164]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ae:	e001      	b.n	80031b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f043 0202 	orr.w	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fdfa 	bl	8002dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d131      	bne.n	8003242 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d02c      	beq.n	8003242 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031f4:	e001      	b.n	80031fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80031f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4912      	ldr	r1, [pc, #72]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003202:	428b      	cmp	r3, r1
 8003204:	d101      	bne.n	800320a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003208:	e001      	b.n	800320e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800320a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800320e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003212:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003222:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fdc5 	bl	8002dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800323e:	e000      	b.n	8003242 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003240:	bf00      	nop
}
 8003242:	bf00      	nop
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40003800 	.word	0x40003800
 8003250:	40003400 	.word	0x40003400

08003254 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c99      	adds	r1, r3, #2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6251      	str	r1, [r2, #36]	; 0x24
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d113      	bne.n	80032c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffc9 	bl	8003254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	1c99      	adds	r1, r3, #2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6251      	str	r1, [r2, #36]	; 0x24
 80032de:	8819      	ldrh	r1, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <I2SEx_TxISR_I2SExt+0x90>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <I2SEx_TxISR_I2SExt+0x22>
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <I2SEx_TxISR_I2SExt+0x94>)
 80032ec:	e001      	b.n	80032f2 <I2SEx_TxISR_I2SExt+0x26>
 80032ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f2:	460a      	mov	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d121      	bne.n	8003352 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <I2SEx_TxISR_I2SExt+0x90>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <I2SEx_TxISR_I2SExt+0x50>
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <I2SEx_TxISR_I2SExt+0x94>)
 800331a:	e001      	b.n	8003320 <I2SEx_TxISR_I2SExt+0x54>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <I2SEx_TxISR_I2SExt+0x90>)
 8003328:	428b      	cmp	r3, r1
 800332a:	d101      	bne.n	8003330 <I2SEx_TxISR_I2SExt+0x64>
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <I2SEx_TxISR_I2SExt+0x94>)
 800332e:	e001      	b.n	8003334 <I2SEx_TxISR_I2SExt+0x68>
 8003330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003334:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003338:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff81 	bl	8003254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40003800 	.word	0x40003800
 8003360:	40003400 	.word	0x40003400

08003364 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68d8      	ldr	r0, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	1c99      	adds	r1, r3, #2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800337c:	b282      	uxth	r2, r0
 800337e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff4a 	bl	8003254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a20      	ldr	r2, [pc, #128]	; (8003458 <I2SEx_RxISR_I2SExt+0x90>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <I2SEx_RxISR_I2SExt+0x16>
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <I2SEx_RxISR_I2SExt+0x94>)
 80033dc:	e001      	b.n	80033e2 <I2SEx_RxISR_I2SExt+0x1a>
 80033de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e2:	68d8      	ldr	r0, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	1c99      	adds	r1, r3, #2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033ee:	b282      	uxth	r2, r0
 80033f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d121      	bne.n	800344e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <I2SEx_RxISR_I2SExt+0x90>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <I2SEx_RxISR_I2SExt+0x50>
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <I2SEx_RxISR_I2SExt+0x94>)
 8003416:	e001      	b.n	800341c <I2SEx_RxISR_I2SExt+0x54>
 8003418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	490d      	ldr	r1, [pc, #52]	; (8003458 <I2SEx_RxISR_I2SExt+0x90>)
 8003424:	428b      	cmp	r3, r1
 8003426:	d101      	bne.n	800342c <I2SEx_RxISR_I2SExt+0x64>
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <I2SEx_RxISR_I2SExt+0x94>)
 800342a:	e001      	b.n	8003430 <I2SEx_RxISR_I2SExt+0x68>
 800342c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003434:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ff03 	bl	8003254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40003800 	.word	0x40003800
 800345c:	40003400 	.word	0x40003400

08003460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e22d      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d075      	beq.n	800356a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800347e:	4ba3      	ldr	r3, [pc, #652]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d00c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348a:	4ba0      	ldr	r3, [pc, #640]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003492:	2b08      	cmp	r3, #8
 8003494:	d112      	bne.n	80034bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003496:	4b9d      	ldr	r3, [pc, #628]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a2:	d10b      	bne.n	80034bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	4b99      	ldr	r3, [pc, #612]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05b      	beq.n	8003568 <HAL_RCC_OscConfig+0x108>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d157      	bne.n	8003568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e208      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d106      	bne.n	80034d4 <HAL_RCC_OscConfig+0x74>
 80034c6:	4b91      	ldr	r3, [pc, #580]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a90      	ldr	r2, [pc, #576]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e01d      	b.n	8003510 <HAL_RCC_OscConfig+0xb0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x98>
 80034de:	4b8b      	ldr	r3, [pc, #556]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a8a      	ldr	r2, [pc, #552]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a87      	ldr	r2, [pc, #540]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0xb0>
 80034f8:	4b84      	ldr	r3, [pc, #528]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a83      	ldr	r2, [pc, #524]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a80      	ldr	r2, [pc, #512]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fa80 	bl	8000a1c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003520:	f7fd fa7c 	bl	8000a1c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1cd      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b76      	ldr	r3, [pc, #472]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xc0>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd fa6c 	bl	8000a1c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fd fa68 	bl	8000a1c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1b9      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	4b6c      	ldr	r3, [pc, #432]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0xe8>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003576:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800358a:	2b08      	cmp	r3, #8
 800358c:	d11c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_RCC_OscConfig+0x152>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e18d      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4952      	ldr	r1, [pc, #328]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e03a      	b.n	800363e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <HAL_RCC_OscConfig+0x2b0>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd fa21 	bl	8000a1c <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035de:	f7fd fa1d 	bl	8000a1c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e16e      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4940      	ldr	r1, [pc, #256]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_OscConfig+0x2b0>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fd fa00 	bl	8000a1c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003620:	f7fd f9fc 	bl	8000a1c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e14d      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d030      	beq.n	80036ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d016      	beq.n	8003680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_RCC_OscConfig+0x2b4>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fd f9e0 	bl	8000a1c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003660:	f7fd f9dc 	bl	8000a1c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e12d      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x200>
 800367e:	e015      	b.n	80036ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_OscConfig+0x2b4>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fd f9c9 	bl	8000a1c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368e:	f7fd f9c5 	bl	8000a1c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e116      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a0 	beq.w	80037fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_OscConfig+0x2b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d121      	bne.n	800373a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCC_OscConfig+0x2b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <HAL_RCC_OscConfig+0x2b8>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fd f98b 	bl	8000a1c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e011      	b.n	800372e <HAL_RCC_OscConfig+0x2ce>
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
 8003710:	42470000 	.word	0x42470000
 8003714:	42470e80 	.word	0x42470e80
 8003718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd f97e 	bl	8000a1c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0cf      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCC_OscConfig+0x478>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d106      	bne.n	8003750 <HAL_RCC_OscConfig+0x2f0>
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	e01c      	b.n	800378a <HAL_RCC_OscConfig+0x32a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b05      	cmp	r3, #5
 8003756:	d10c      	bne.n	8003772 <HAL_RCC_OscConfig+0x312>
 8003758:	4b60      	ldr	r3, [pc, #384]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a5f      	ldr	r2, [pc, #380]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	e00b      	b.n	800378a <HAL_RCC_OscConfig+0x32a>
 8003772:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a59      	ldr	r2, [pc, #356]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	4b57      	ldr	r3, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a56      	ldr	r2, [pc, #344]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d015      	beq.n	80037be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fd f943 	bl	8000a1c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fd f93f 	bl	8000a1c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e08e      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ee      	beq.n	800379a <HAL_RCC_OscConfig+0x33a>
 80037bc:	e014      	b.n	80037e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fd f92d 	bl	8000a1c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd f929 	bl	8000a1c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e078      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ee      	bne.n	80037c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d105      	bne.n	80037fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d064      	beq.n	80038cc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003802:	4b36      	ldr	r3, [pc, #216]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b08      	cmp	r3, #8
 800380c:	d05c      	beq.n	80038c8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d141      	bne.n	800389a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b32      	ldr	r3, [pc, #200]	; (80038e0 <HAL_RCC_OscConfig+0x480>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd f8fe 	bl	8000a1c <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003824:	f7fd f8fa 	bl	8000a1c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e04b      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	3b01      	subs	r3, #1
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	491d      	ldr	r1, [pc, #116]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_RCC_OscConfig+0x480>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7fd f8d3 	bl	8000a1c <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7fd f8cf 	bl	8000a1c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e020      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x41a>
 8003898:	e018      	b.n	80038cc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RCC_OscConfig+0x480>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fd f8bc 	bl	8000a1c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fd f8b8 	bl	8000a1c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e009      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_RCC_OscConfig+0x47c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x448>
 80038c6:	e001      	b.n	80038cc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40007000 	.word	0x40007000
 80038dc:	40023800 	.word	0x40023800
 80038e0:	42470060 	.word	0x42470060

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0ca      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_ClockConfig+0x1b4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90c      	bls.n	8003920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCC_ClockConfig+0x1b4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b6      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b58      	ldr	r3, [pc, #352]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a57      	ldr	r2, [pc, #348]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494c      	ldr	r1, [pc, #304]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b46      	ldr	r3, [pc, #280]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d119      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07d      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06d      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3a      	ldr	r3, [pc, #232]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e065      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4933      	ldr	r1, [pc, #204]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fd f822 	bl	8000a1c <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fd f81e 	bl	8000a1c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04d      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_ClockConfig+0x1b4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d20c      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_RCC_ClockConfig+0x1b4>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_ClockConfig+0x1b4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e030      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4915      	ldr	r1, [pc, #84]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490d      	ldr	r1, [pc, #52]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f81d 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4601      	mov	r1, r0
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	5cd3      	ldrb	r3, [r2, r3]
 8003a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7fc ff84 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023c00 	.word	0x40023c00
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08006f08 	.word	0x08006f08
 8003aa4:	20000028 	.word	0x20000028

08003aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d007      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x32>
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 80b4 	bne.w	8003c3c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ad6:	60bb      	str	r3, [r7, #8]
       break;
 8003ad8:	e0b3      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ada:	4b5e      	ldr	r3, [pc, #376]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003adc:	60bb      	str	r3, [r7, #8]
      break;
 8003ade:	e0b0      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04a      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b55      	ldr	r3, [pc, #340]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	f04f 0400 	mov.w	r4, #0
 8003b00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	ea03 0501 	and.w	r5, r3, r1
 8003b0c:	ea04 0602 	and.w	r6, r4, r2
 8003b10:	4629      	mov	r1, r5
 8003b12:	4632      	mov	r2, r6
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	f04f 0400 	mov.w	r4, #0
 8003b1c:	0154      	lsls	r4, r2, #5
 8003b1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b22:	014b      	lsls	r3, r1, #5
 8003b24:	4619      	mov	r1, r3
 8003b26:	4622      	mov	r2, r4
 8003b28:	1b49      	subs	r1, r1, r5
 8003b2a:	eb62 0206 	sbc.w	r2, r2, r6
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	f04f 0400 	mov.w	r4, #0
 8003b36:	0194      	lsls	r4, r2, #6
 8003b38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b3c:	018b      	lsls	r3, r1, #6
 8003b3e:	1a5b      	subs	r3, r3, r1
 8003b40:	eb64 0402 	sbc.w	r4, r4, r2
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	00e2      	lsls	r2, r4, #3
 8003b4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b52:	00d9      	lsls	r1, r3, #3
 8003b54:	460b      	mov	r3, r1
 8003b56:	4614      	mov	r4, r2
 8003b58:	195b      	adds	r3, r3, r5
 8003b5a:	eb44 0406 	adc.w	r4, r4, r6
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	0262      	lsls	r2, r4, #9
 8003b68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b6c:	0259      	lsls	r1, r3, #9
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4614      	mov	r4, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	4621      	mov	r1, r4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f04f 0400 	mov.w	r4, #0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	f7fc fd66 	bl	8000650 <__aeabi_uldivmod>
 8003b84:	4603      	mov	r3, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e049      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	f04f 0400 	mov.w	r4, #0
 8003b96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	ea03 0501 	and.w	r5, r3, r1
 8003ba2:	ea04 0602 	and.w	r6, r4, r2
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4632      	mov	r2, r6
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	0154      	lsls	r4, r2, #5
 8003bb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bb8:	014b      	lsls	r3, r1, #5
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	1b49      	subs	r1, r1, r5
 8003bc0:	eb62 0206 	sbc.w	r2, r2, r6
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	f04f 0400 	mov.w	r4, #0
 8003bcc:	0194      	lsls	r4, r2, #6
 8003bce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bd2:	018b      	lsls	r3, r1, #6
 8003bd4:	1a5b      	subs	r3, r3, r1
 8003bd6:	eb64 0402 	sbc.w	r4, r4, r2
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	00e2      	lsls	r2, r4, #3
 8003be4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003be8:	00d9      	lsls	r1, r3, #3
 8003bea:	460b      	mov	r3, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	195b      	adds	r3, r3, r5
 8003bf0:	eb44 0406 	adc.w	r4, r4, r6
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	02a2      	lsls	r2, r4, #10
 8003bfe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c02:	0299      	lsls	r1, r3, #10
 8003c04:	460b      	mov	r3, r1
 8003c06:	4614      	mov	r4, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f04f 0400 	mov.w	r4, #0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4623      	mov	r3, r4
 8003c16:	f7fc fd1b 	bl	8000650 <__aeabi_uldivmod>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	60bb      	str	r3, [r7, #8]
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c3e:	60bb      	str	r3, [r7, #8]
      break;
 8003c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c42:	68bb      	ldr	r3, [r7, #8]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	00f42400 	.word	0x00f42400
 8003c54:	007a1200 	.word	0x007a1200

08003c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000028 	.word	0x20000028

08003c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c74:	f7ff fff0 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c78:	4601      	mov	r1, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	08006f18 	.word	0x08006f18

08003c98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d035      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cc0:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc6:	f7fc fea9 	bl	8000a1c <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cce:	f7fc fea5 	bl	8000a1c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e0b0      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce0:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	019a      	lsls	r2, r3, #6
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	071b      	lsls	r3, r3, #28
 8003cf8:	4955      	ldr	r1, [pc, #340]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d00:	4b52      	ldr	r3, [pc, #328]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d06:	f7fc fe89 	bl	8000a1c <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d0e:	f7fc fe85 	bl	8000a1c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e090      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d20:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8083 	beq.w	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a43      	ldr	r2, [pc, #268]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3e      	ldr	r2, [pc, #248]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d62:	f7fc fe5b 	bl	8000a1c <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fc fe57 	bl	8000a1c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e062      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d7c:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02f      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d028      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d114      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fc fe25 	bl	8000a1c <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fc fe21 	bl	8000a1c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e02a      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	490d      	ldr	r1, [pc, #52]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e2c:	6093      	str	r3, [r2, #8]
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	4905      	ldr	r1, [pc, #20]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	42470068 	.word	0x42470068
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42470e40 	.word	0x42470e40

08003e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d13d      	bne.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e82:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d12f      	bne.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e90:	617b      	str	r3, [r7, #20]
          break;
 8003e92:	e02f      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e007      	b.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ede:	0f1b      	lsrs	r3, r3, #28
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	617b      	str	r3, [r7, #20]
          break;
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
          break;
 8003ef2:	bf00      	nop
        }
      }
      break;
 8003ef4:	bf00      	nop
    }
  }
  return frequency;
 8003ef6:	697b      	ldr	r3, [r7, #20]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40023800 	.word	0x40023800
 8003f08:	00bb8000 	.word	0x00bb8000
 8003f0c:	007a1200 	.word	0x007a1200
 8003f10:	00f42400 	.word	0x00f42400

08003f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e056      	b.n	8003fd4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f002 fb17 	bl	8006574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	ea42 0103 	orr.w	r1, r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	f003 0104 	and.w	r1, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fdc:	b084      	sub	sp, #16
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	f107 001c 	add.w	r0, r7, #28
 8003fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d122      	bne.n	800403a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800401c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f94a 	bl	80042c8 <USB_CoreReset>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e01a      	b.n	8004070 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f93e 	bl	80042c8 <USB_CoreReset>
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
 8004062:	e005      	b.n	8004070 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10b      	bne.n	800408e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f043 0206 	orr.w	r2, r3, #6
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409a:	b004      	add	sp, #16
 800409c:	4770      	bx	lr

0800409e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 0201 	bic.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	e00b      	b.n	8004126 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	e001      	b.n	8004126 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e003      	b.n	800412e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004126:	2032      	movs	r0, #50	; 0x32
 8004128:	f7fc fc84 	bl	8000a34 <HAL_Delay>

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3301      	adds	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <USB_FlushTxFifo+0x48>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d0f0      	beq.n	8004152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	00030d40 	.word	0x00030d40

08004184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2210      	movs	r2, #16
 8004194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <USB_FlushRxFifo+0x40>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e006      	b.n	80041b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d0f0      	beq.n	8004196 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	00030d40 	.word	0x00030d40

080041c8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	4611      	mov	r1, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	460b      	mov	r3, r1
 80041d8:	71fb      	strb	r3, [r7, #7]
 80041da:	4613      	mov	r3, r2
 80041dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80041e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11a      	bne.n	8004224 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80041ee:	88bb      	ldrh	r3, [r7, #4]
 80041f0:	3303      	adds	r3, #3
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e00f      	b.n	800421c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	031a      	lsls	r2, r3, #12
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4413      	add	r3, r2
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	461a      	mov	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3304      	adds	r3, #4
 8004214:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3301      	adds	r3, #1
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d3eb      	bcc.n	80041fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3724      	adds	r7, #36	; 0x24
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004232:	b480      	push	{r7}
 8004234:	b089      	sub	sp, #36	; 0x24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	4613      	mov	r3, r2
 800423e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	3303      	adds	r3, #3
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e00b      	b.n	800426e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	601a      	str	r2, [r3, #0]
    pDest++;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	3301      	adds	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3ef      	bcc.n	8004256 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004276:	69fb      	ldr	r3, [r7, #28]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3724      	adds	r7, #36	; 0x24
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0301 	and.w	r3, r3, #1
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3301      	adds	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <USB_CoreReset+0x64>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e01b      	b.n	800431e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	daf2      	bge.n	80042d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <USB_CoreReset+0x64>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d0f0      	beq.n	80042fe <USB_CoreReset+0x36>

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	00030d40 	.word	0x00030d40

08004330 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 001c 	add.w	r0, r7, #28
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800434c:	461a      	mov	r2, r3
 800434e:	2300      	movs	r3, #0
 8004350:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	2b03      	cmp	r3, #3
 8004386:	d10a      	bne.n	800439e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	e014      	b.n	80043c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e009      	b.n	80043c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80043c8:	2110      	movs	r1, #16
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff feb4 	bl	8004138 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fed7 	bl	8004184 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e015      	b.n	8004408 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e8:	461a      	mov	r2, r3
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	2300      	movs	r3, #0
 8004400:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	d3e5      	bcc.n	80043dc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004410:	2101      	movs	r1, #1
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f882 	bl	800451c <USB_DriveVbus>

  HAL_Delay(200U);
 8004418:	20c8      	movs	r0, #200	; 0xc8
 800441a:	f7fc fb0b 	bl	8000a34 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f04f 32ff 	mov.w	r2, #4294967295
 800442a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a14      	ldr	r2, [pc, #80]	; (8004494 <USB_HostInit+0x164>)
 8004444:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a13      	ldr	r2, [pc, #76]	; (8004498 <USB_HostInit+0x168>)
 800444a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800444e:	e009      	b.n	8004464 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a10      	ldr	r2, [pc, #64]	; (800449c <USB_HostInit+0x16c>)
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <USB_HostInit+0x170>)
 8004460:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f043 0210 	orr.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <USB_HostInit+0x174>)
 800447c:	4313      	orrs	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800448e:	b004      	add	sp, #16
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	01000200 	.word	0x01000200
 8004498:	00e00300 	.word	0x00e00300
 800449c:	00600080 	.word	0x00600080
 80044a0:	004000e0 	.word	0x004000e0
 80044a4:	a3200008 	.word	0xa3200008

080044a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f0:	461a      	mov	r2, r3
 80044f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80044f6:	6053      	str	r3, [r2, #4]
 80044f8:	e009      	b.n	800450e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d106      	bne.n	800450e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004506:	461a      	mov	r2, r3
 8004508:	f241 7370 	movw	r3, #6000	; 0x1770
 800450c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004540:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <USB_DriveVbus+0x44>
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800455a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800455e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d109      	bne.n	8004580 <USB_DriveVbus+0x64>
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800457a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800457e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	b29b      	uxth	r3, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	70fb      	strb	r3, [r7, #3]
 80045c2:	460b      	mov	r3, r1
 80045c4:	70bb      	strb	r3, [r7, #2]
 80045c6:	4613      	mov	r3, r2
 80045c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	461a      	mov	r2, r3
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295
 80045e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80045e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d87e      	bhi.n	80046ec <USB_HC_Init+0x13c>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <USB_HC_Init+0x44>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	080046af 	.word	0x080046af
 80045fc:	08004605 	.word	0x08004605
 8004600:	08004671 	.word	0x08004671
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004610:	461a      	mov	r2, r3
 8004612:	f240 439d 	movw	r3, #1181	; 0x49d
 8004616:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800461c:	2b00      	cmp	r3, #0
 800461e:	da10      	bge.n	8004642 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	440a      	add	r2, r1
 8004636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004640:	e057      	b.n	80046f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d051      	beq.n	80046f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	440a      	add	r2, r1
 8004664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004668:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800466c:	60d3      	str	r3, [r2, #12]
      break;
 800466e:	e040      	b.n	80046f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	461a      	mov	r2, r3
 800467e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004682:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004684:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004688:	2b00      	cmp	r3, #0
 800468a:	da34      	bge.n	80046f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80046ac:	e023      	b.n	80046f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	461a      	mov	r2, r3
 80046bc:	f240 2325 	movw	r3, #549	; 0x225
 80046c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80046c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da17      	bge.n	80046fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80046e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80046ea:	e006      	b.n	80046fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e004      	b.n	80046fc <USB_HC_Init+0x14c>
      break;
 80046f2:	bf00      	nop
 80046f4:	e002      	b.n	80046fc <USB_HC_Init+0x14c>
      break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <USB_HC_Init+0x14c>
      break;
 80046fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	2101      	movs	r1, #1
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004716:	4313      	orrs	r3, r2
 8004718:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004726:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da03      	bge.n	8004736 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800472e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	e001      	b.n	800473a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800473a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e001      	b.n	800474e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800474e:	787b      	ldrb	r3, [r7, #1]
 8004750:	059b      	lsls	r3, r3, #22
 8004752:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004756:	78bb      	ldrb	r3, [r7, #2]
 8004758:	02db      	lsls	r3, r3, #11
 800475a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800475e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004760:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004764:	049b      	lsls	r3, r3, #18
 8004766:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800476a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800476c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800476e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004772:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	0159      	lsls	r1, r3, #5
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	440b      	add	r3, r1
 8004780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004784:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800478a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800478c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004790:	2b03      	cmp	r3, #3
 8004792:	d10f      	bne.n	80047b4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047b2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop

080047c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80047dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d028      	beq.n	8004840 <USB_HC_StartXfer+0x7c>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	791b      	ldrb	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d124      	bne.n	8004840 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <USB_HC_StartXfer+0x50>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	795b      	ldrb	r3, [r3, #5]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fa2e 	bl	8004c6c <USB_DoPing>
      return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e112      	b.n	8004a3a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d112      	bne.n	8004840 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	4413      	add	r3, r2
 8004822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	440a      	add	r2, r1
 8004830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004834:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004838:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d018      	beq.n	800487a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	8912      	ldrh	r2, [r2, #8]
 8004850:	4413      	add	r3, r2
 8004852:	3b01      	subs	r3, #1
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	8912      	ldrh	r2, [r2, #8]
 8004858:	fbb3 f3f2 	udiv	r3, r3, r2
 800485c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800485e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004860:	8b7b      	ldrh	r3, [r7, #26]
 8004862:	429a      	cmp	r2, r3
 8004864:	d90b      	bls.n	800487e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004866:	8b7b      	ldrh	r3, [r7, #26]
 8004868:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800486a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	8912      	ldrh	r2, [r2, #8]
 8004870:	fb02 f203 	mul.w	r2, r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	611a      	str	r2, [r3, #16]
 8004878:	e001      	b.n	800487e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800487a:	2301      	movs	r3, #1
 800487c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	78db      	ldrb	r3, [r3, #3]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	8912      	ldrh	r2, [r2, #8]
 800488c:	fb02 f203 	mul.w	r2, r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800489c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800489e:	04d9      	lsls	r1, r3, #19
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <USB_HC_StartXfer+0x280>)
 80048a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	7a9b      	ldrb	r3, [r3, #10]
 80048aa:	075b      	lsls	r3, r3, #29
 80048ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048b0:	69f9      	ldr	r1, [r7, #28]
 80048b2:	0148      	lsls	r0, r1, #5
 80048b4:	6a39      	ldr	r1, [r7, #32]
 80048b6:	4401      	add	r1, r0
 80048b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d6:	460a      	mov	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	440a      	add	r2, r1
 8004908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004910:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	7e7b      	ldrb	r3, [r7, #25]
 8004922:	075b      	lsls	r3, r3, #29
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	0148      	lsls	r0, r1, #5
 8004928:	6a39      	ldr	r1, [r7, #32]
 800492a:	4401      	add	r1, r0
 800492c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	4413      	add	r3, r2
 800493c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a41      	ldr	r2, [pc, #260]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004944:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004946:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800494e:	4a3e      	ldr	r2, [pc, #248]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004950:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	78db      	ldrb	r3, [r3, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <USB_HC_StartXfer+0x284>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e005      	b.n	8004974 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004968:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <USB_HC_StartXfer+0x284>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004970:	4a35      	ldr	r2, [pc, #212]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004972:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004974:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800497c:	4a32      	ldr	r2, [pc, #200]	; (8004a48 <USB_HC_StartXfer+0x284>)
 800497e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	461a      	mov	r2, r3
 800498e:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <USB_HC_StartXfer+0x284>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d14e      	bne.n	8004a38 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	78db      	ldrb	r3, [r3, #3]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d14a      	bne.n	8004a38 <USB_HC_StartXfer+0x274>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d046      	beq.n	8004a38 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	79db      	ldrb	r3, [r3, #7]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d830      	bhi.n	8004a14 <USB_HC_StartXfer+0x250>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <USB_HC_StartXfer+0x1f4>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049ed 	.word	0x080049ed
 80049c0:	080049c9 	.word	0x080049c9
 80049c4:	080049ed 	.word	0x080049ed
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	3303      	adds	r3, #3
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80049d2:	8afa      	ldrh	r2, [r7, #22]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	b29b      	uxth	r3, r3
 80049da:	429a      	cmp	r2, r3
 80049dc:	d91c      	bls.n	8004a18 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	619a      	str	r2, [r3, #24]
          }
          break;
 80049ea:	e015      	b.n	8004a18 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	3303      	adds	r3, #3
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80049f6:	8afa      	ldrh	r2, [r7, #22]
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d90a      	bls.n	8004a1c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	619a      	str	r2, [r3, #24]
          }
          break;
 8004a12:	e003      	b.n	8004a1c <USB_HC_StartXfer+0x258>

        default:
          break;
 8004a14:	bf00      	nop
 8004a16:	e002      	b.n	8004a1e <USB_HC_StartXfer+0x25a>
          break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <USB_HC_StartXfer+0x25a>
          break;
 8004a1c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	68d9      	ldr	r1, [r3, #12]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	785a      	ldrb	r2, [r3, #1]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	b298      	uxth	r0, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4603      	mov	r3, r0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fbc8 	bl	80041c8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3728      	adds	r7, #40	; 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	1ff80000 	.word	0x1ff80000
 8004a48:	200000ac 	.word	0x200000ac

08004a4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	b29b      	uxth	r3, r3
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0c9b      	lsrs	r3, r3, #18
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <USB_HC_Halt+0x3a>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d16c      	bne.n	8004b82 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ac6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d143      	bne.n	8004b5c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3301      	adds	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b40:	d81d      	bhi.n	8004b7e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b58:	d0ec      	beq.n	8004b34 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b5a:	e080      	b.n	8004c5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b7c:	e06f      	b.n	8004c5e <USB_HC_Halt+0x1f0>
          break;
 8004b7e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b80:	e06d      	b.n	8004c5e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d143      	bne.n	8004c3a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bf0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c10:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	3301      	adds	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c1e:	d81d      	bhi.n	8004c5c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c36:	d0ec      	beq.n	8004c12 <USB_HC_Halt+0x1a4>
 8004c38:	e011      	b.n	8004c5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e000      	b.n	8004c5e <USB_HC_Halt+0x1f0>
          break;
 8004c5c:	bf00      	nop
    }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004c80:	2301      	movs	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	04da      	lsls	r2, r3, #19
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <USB_DoPing+0x74>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cb4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cbc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	1ff80000 	.word	0x1ff80000

08004ce4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff f9e3 	bl	80040c0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004cfa:	2110      	movs	r1, #16
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fa1b 	bl	8004138 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fa3e 	bl	8004184 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e01f      	b.n	8004d4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	461a      	mov	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d9dc      	bls.n	8004d0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	e034      	b.n	8004dc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3301      	adds	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da0:	d80c      	bhi.n	8004dbc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db8:	d0ec      	beq.n	8004d94 <USB_StopHost+0xb0>
 8004dba:	e000      	b.n	8004dbe <USB_StopHost+0xda>
        break;
 8004dbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	d9c7      	bls.n	8004d5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f04f 32ff 	mov.w	r2, #4294967295
 8004dde:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff f95c 	bl	800409e <USB_EnableGlobalInt>

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af04      	add	r7, sp, #16
 8004df6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	2202      	movs	r2, #2
 8004e00:	2102      	movs	r1, #2
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fc3a 	bl	800567c <USBH_FindInterface>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	f000 812a 	beq.w	8005068 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc13 	bl	8005644 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8004e24:	2050      	movs	r0, #80	; 0x50
 8004e26:	f001 ff8f 	bl	8006d48 <malloc>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	211a      	movs	r1, #26
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da15      	bge.n	8004e7c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	211a      	movs	r1, #26
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004e66:	7bbb      	ldrb	r3, [r7, #14]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	211a      	movs	r1, #26
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 ff9f 	bl	8005dc6 <USBH_AllocPipe>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	7819      	ldrb	r1, [r3, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	7858      	ldrb	r0, [r3, #1]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	8952      	ldrh	r2, [r2, #10]
 8004ea8:	9202      	str	r2, [sp, #8]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	9201      	str	r2, [sp, #4]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 ff57 	bl	8005d68 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 fe70 	bl	8006ba8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2200      	movs	r2, #0
 8004ecc:	210a      	movs	r1, #10
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fbd4 	bl	800567c <USBH_FindInterface>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	2bff      	cmp	r3, #255	; 0xff
 8004edc:	f000 80c4 	beq.w	8005068 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004ee0:	7bbb      	ldrb	r3, [r7, #14]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	211a      	movs	r1, #26
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	da16      	bge.n	8004f26 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	211a      	movs	r1, #26
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	211a      	movs	r1, #26
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	835a      	strh	r2, [r3, #26]
 8004f24:	e015      	b.n	8004f52 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	211a      	movs	r1, #26
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004f3c:	7bbb      	ldrb	r3, [r7, #14]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	211a      	movs	r1, #26
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004f52:	7bbb      	ldrb	r3, [r7, #14]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	211a      	movs	r1, #26
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da16      	bge.n	8004f98 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	211a      	movs	r1, #26
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	211a      	movs	r1, #26
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	835a      	strh	r2, [r3, #26]
 8004f96:	e015      	b.n	8004fc4 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	211a      	movs	r1, #26
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004fae:	7bbb      	ldrb	r3, [r7, #14]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	211a      	movs	r1, #26
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004fbe:	881a      	ldrh	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	7b9b      	ldrb	r3, [r3, #14]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fefb 	bl	8005dc6 <USBH_AllocPipe>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	7bdb      	ldrb	r3, [r3, #15]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fef1 	bl	8005dc6 <USBH_AllocPipe>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	7b59      	ldrb	r1, [r3, #13]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	7b98      	ldrb	r0, [r3, #14]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	8b12      	ldrh	r2, [r2, #24]
 8005004:	9202      	str	r2, [sp, #8]
 8005006:	2202      	movs	r2, #2
 8005008:	9201      	str	r2, [sp, #4]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	4623      	mov	r3, r4
 800500e:	4602      	mov	r2, r0
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fea9 	bl	8005d68 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	7b19      	ldrb	r1, [r3, #12]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	7bd8      	ldrb	r0, [r3, #15]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	8b52      	ldrh	r2, [r2, #26]
 800502e:	9202      	str	r2, [sp, #8]
 8005030:	2202      	movs	r2, #2
 8005032:	9201      	str	r2, [sp, #4]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	4623      	mov	r3, r4
 8005038:	4602      	mov	r2, r0
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fe94 	bl	8005d68 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	7b5b      	ldrb	r3, [r3, #13]
 800504c:	2200      	movs	r2, #0
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 fda9 	bl	8006ba8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	7b1b      	ldrb	r3, [r3, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 fda2 	bl	8006ba8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bd90      	pop	{r4, r7, pc}

08005072 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fe87 	bl	8005da6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 feaf 	bl	8005e02 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	7b1b      	ldrb	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00e      	beq.n	80050d0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	7b1b      	ldrb	r3, [r3, #12]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fe74 	bl	8005da6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	7b1b      	ldrb	r3, [r3, #12]
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fe9c 	bl	8005e02 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	7b5b      	ldrb	r3, [r3, #13]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	7b5b      	ldrb	r3, [r3, #13]
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fe61 	bl	8005da6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	7b5b      	ldrb	r3, [r3, #13]
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fe89 	bl	8005e02 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fe24 	bl	8006d58 <free>
    phost->pActiveClass->pData = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005116:	2200      	movs	r2, #0
 8005118:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800512c:	2302      	movs	r3, #2
 800512e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	3340      	adds	r3, #64	; 0x40
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8b2 	bl	80052aa <GetLineCoding>
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005156:	2102      	movs	r1, #2
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
  }
  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005188:	2b04      	cmp	r3, #4
 800518a:	d877      	bhi.n	800527c <USBH_CDC_Process+0x114>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <USBH_CDC_Process+0x2c>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051a9 	.word	0x080051a9
 8005198:	080051af 	.word	0x080051af
 800519c:	080051df 	.word	0x080051df
 80051a0:	08005253 	.word	0x08005253
 80051a4:	08005261 	.word	0x08005261
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73fb      	strb	r3, [r7, #15]
    break;
 80051ac:	e06d      	b.n	800528a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f897 	bl	80052e8 <SetLineCoding>
 80051ba:	4603      	mov	r3, r0
 80051bc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80051be:	7bbb      	ldrb	r3, [r7, #14]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80051cc:	e058      	b.n	8005280 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d055      	beq.n	8005280 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2204      	movs	r2, #4
 80051d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80051dc:	e050      	b.n	8005280 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3340      	adds	r3, #64	; 0x40
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f860 	bl	80052aa <GetLineCoding>
 80051ea:	4603      	mov	r3, r0
 80051ec:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80051ee:	7bbb      	ldrb	r3, [r7, #14]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d126      	bne.n	8005242 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d13b      	bne.n	8005284 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005218:	429a      	cmp	r2, r3
 800521a:	d133      	bne.n	8005284 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005228:	429a      	cmp	r2, r3
 800522a:	d12b      	bne.n	8005284 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005236:	429a      	cmp	r2, r3
 8005238:	d124      	bne.n	8005284 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f95a 	bl	80054f4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005240:	e020      	b.n	8005284 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d01d      	beq.n	8005284 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2204      	movs	r2, #4
 800524c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005250:	e018      	b.n	8005284 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f867 	bl	8005326 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8dc 	bl	8005416 <CDC_ProcessReception>
    break;
 800525e:	e014      	b.n	800528a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fb08 	bl	8005878 <USBH_ClrFeature>
 8005268:	4603      	mov	r3, r0
 800526a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800527a:	e005      	b.n	8005288 <USBH_CDC_Process+0x120>

  default:
    break;
 800527c:	bf00      	nop
 800527e:	e004      	b.n	800528a <USBH_CDC_Process+0x122>
    break;
 8005280:	bf00      	nop
 8005282:	e002      	b.n	800528a <USBH_CDC_Process+0x122>
    break;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <USBH_CDC_Process+0x122>
    break;
 8005288:	bf00      	nop

  }

  return status;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	22a1      	movs	r2, #161	; 0xa1
 80052b8:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2221      	movs	r2, #33	; 0x21
 80052be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2207      	movs	r2, #7
 80052d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2207      	movs	r2, #7
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 faf1 	bl	80058c0 <USBH_CtlReq>
 80052de:	4603      	mov	r3, r0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2221      	movs	r2, #33	; 0x21
 80052f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2207      	movs	r2, #7
 800530e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2207      	movs	r2, #7
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fad2 	bl	80058c0 <USBH_CtlReq>
 800531c:	4603      	mov	r3, r0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b086      	sub	sp, #24
 800532a:	af02      	add	r7, sp, #8
 800532c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005338:	2300      	movs	r3, #0
 800533a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005342:	2b01      	cmp	r3, #1
 8005344:	d002      	beq.n	800534c <CDC_ProcessTransmission+0x26>
 8005346:	2b02      	cmp	r3, #2
 8005348:	d025      	beq.n	8005396 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800534a:	e060      	b.n	800540e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	8b12      	ldrh	r2, [r2, #24]
 8005354:	4293      	cmp	r3, r2
 8005356:	d90c      	bls.n	8005372 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	69d9      	ldr	r1, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8b1a      	ldrh	r2, [r3, #24]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	7b58      	ldrb	r0, [r3, #13]
 8005364:	2301      	movs	r3, #1
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	4603      	mov	r3, r0
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fcb9 	bl	8005ce2 <USBH_BulkSendData>
 8005370:	e00c      	b.n	800538c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	7b58      	ldrb	r0, [r3, #13]
 8005380:	2301      	movs	r3, #1
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	4603      	mov	r3, r0
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fcab 	bl	8005ce2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005394:	e03b      	b.n	800540e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	7b5b      	ldrb	r3, [r3, #13]
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fbd9 	bl	8006b54 <USBH_LL_GetURBState>
 80053a2:	4603      	mov	r3, r0
 80053a4:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80053a6:	7afb      	ldrb	r3, [r7, #11]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d128      	bne.n	80053fe <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	8b12      	ldrh	r2, [r2, #24]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d90e      	bls.n	80053d6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	8b12      	ldrh	r2, [r2, #24]
 80053c0:	1a9a      	subs	r2, r3, r2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	8b12      	ldrh	r2, [r2, #24]
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	61da      	str	r2, [r3, #28]
 80053d4:	e002      	b.n	80053dc <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d004      	beq.n	80053ee <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80053ec:	e00e      	b.n	800540c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f868 	bl	80054cc <USBH_CDC_TransmitCallback>
    break;
 80053fc:	e006      	b.n	800540c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80053fe:	7afb      	ldrb	r3, [r7, #11]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d103      	bne.n	800540c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800540c:	bf00      	nop
  }
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b086      	sub	sp, #24
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005428:	2300      	movs	r3, #0
 800542a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005432:	2b03      	cmp	r3, #3
 8005434:	d002      	beq.n	800543c <CDC_ProcessReception+0x26>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d00e      	beq.n	8005458 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800543a:	e043      	b.n	80054c4 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6a19      	ldr	r1, [r3, #32]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	8b5a      	ldrh	r2, [r3, #26]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	7b1b      	ldrb	r3, [r3, #12]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fc6f 	bl	8005d2c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2204      	movs	r2, #4
 8005452:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005456:	e035      	b.n	80054c4 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	7b1b      	ldrb	r3, [r3, #12]
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f001 fb78 	bl	8006b54 <USBH_LL_GetURBState>
 8005464:	4603      	mov	r3, r0
 8005466:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d129      	bne.n	80054c2 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	7b1b      	ldrb	r3, [r3, #12]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 fadb 	bl	8006a30 <USBH_LL_GetLastXferSize>
 800547a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d016      	beq.n	80054b4 <CDC_ProcessReception+0x9e>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	8b5b      	ldrh	r3, [r3, #26]
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4293      	cmp	r3, r2
 8005490:	d910      	bls.n	80054b4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad2      	subs	r2, r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	441a      	add	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2203      	movs	r2, #3
 80054ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80054b2:	e006      	b.n	80054c2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f80f 	bl	80054e0 <USBH_CDC_ReceiveCallback>
    break;
 80054c2:	bf00      	nop
  }
}
 80054c4:	bf00      	nop
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]

}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800551c:	2302      	movs	r3, #2
 800551e:	e019      	b.n	8005554 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	79fa      	ldrb	r2, [r7, #7]
 8005524:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f80f 	bl	800555c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f001 f9fd 	bl	800694c <USBH_LL_Init>

  return USBH_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005568:	e008      	b.n	800557c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	32e0      	adds	r2, #224	; 0xe0
 8005570:	2100      	movs	r1, #0
 8005572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b0e      	cmp	r3, #14
 8005580:	d9f3      	bls.n	800556a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e009      	b.n	800559c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a2:	d3f1      	bcc.n	8005588 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	; 0x40
 80055c8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d017      	beq.n	8005632 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005612:	1c59      	adds	r1, r3, #1
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	33dc      	adds	r3, #220	; 0xdc
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	e004      	b.n	8005636 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800562c:	2302      	movs	r3, #2
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e001      	b.n	8005636 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005632:	2302      	movs	r3, #2
 8005634:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	429a      	cmp	r2, r3
 800565e:	d204      	bcs.n	800566a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005668:	e001      	b.n	800566e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800566a:	2302      	movs	r3, #2
 800566c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	4608      	mov	r0, r1
 8005686:	4611      	mov	r1, r2
 8005688:	461a      	mov	r2, r3
 800568a:	4603      	mov	r3, r0
 800568c:	70fb      	strb	r3, [r7, #3]
 800568e:	460b      	mov	r3, r1
 8005690:	70bb      	strb	r3, [r7, #2]
 8005692:	4613      	mov	r3, r2
 8005694:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80056a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80056a6:	e025      	b.n	80056f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	221a      	movs	r2, #26
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	3308      	adds	r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	3302      	adds	r3, #2
 80056b8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	795b      	ldrb	r3, [r3, #5]
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d002      	beq.n	80056ca <USBH_FindInterface+0x4e>
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	2bff      	cmp	r3, #255	; 0xff
 80056c8:	d111      	bne.n	80056ee <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80056ce:	78ba      	ldrb	r2, [r7, #2]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d002      	beq.n	80056da <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80056d4:	78bb      	ldrb	r3, [r7, #2]
 80056d6:	2bff      	cmp	r3, #255	; 0xff
 80056d8:	d109      	bne.n	80056ee <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80056de:	787a      	ldrb	r2, [r7, #1]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d002      	beq.n	80056ea <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80056e4:	787b      	ldrb	r3, [r7, #1]
 80056e6:	2bff      	cmp	r3, #255	; 0xff
 80056e8:	d101      	bne.n	80056ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	e006      	b.n	80056fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	3301      	adds	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d9d6      	bls.n	80056a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80056fa:	23ff      	movs	r3, #255	; 0xff
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 f957 	bl	80069c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005716:	2101      	movs	r1, #1
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fa2e 	bl	8006b7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f804 	bl	800576a <USBH_HandleSof>
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b0b      	cmp	r3, #11
 800577a:	d10a      	bne.n	8005792 <USBH_HandleSof+0x28>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
  }
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80057aa:	bf00      	nop
}
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80057c6:	bf00      	nop
}
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10f      	bne.n	8005804 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80057fc:	2104      	movs	r1, #4
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
 8005802:	e007      	b.n	8005814 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800580a:	2b01      	cmp	r3, #1
 800580c:	d102      	bne.n	8005814 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f8e7 	bl	80069fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	791b      	ldrb	r3, [r3, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fae5 	bl	8005e02 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	795b      	ldrb	r3, [r3, #5]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fadf 	bl	8005e02 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800585c:	2105      	movs	r1, #5
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 f8ae 	bl	80069c4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2203      	movs	r2, #3
 800586c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	789b      	ldrb	r3, [r3, #2]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10f      	bne.n	80058ac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80058ac:	2200      	movs	r2, #0
 80058ae:	2100      	movs	r1, #0
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f805 	bl	80058c0 <USBH_CtlReq>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	789b      	ldrb	r3, [r3, #2]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d002      	beq.n	80058e0 <USBH_CtlReq+0x20>
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d00f      	beq.n	80058fe <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80058de:	e034      	b.n	800594a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	88fa      	ldrh	r2, [r7, #6]
 80058ea:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2202      	movs	r2, #2
 80058f6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
    break;
 80058fc:	e025      	b.n	800594a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f828 	bl	8005954 <USBH_HandleControl>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
    break;
 800591e:	e013      	b.n	8005948 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d108      	bne.n	8005938 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005932:	2303      	movs	r3, #3
 8005934:	75fb      	strb	r3, [r7, #23]
    break;
 8005936:	e007      	b.n	8005948 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d104      	bne.n	8005948 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005944:	2302      	movs	r3, #2
 8005946:	75fb      	strb	r3, [r7, #23]
    break;
 8005948:	bf00      	nop
  }
  return status;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af02      	add	r7, sp, #8
 800595a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005960:	2300      	movs	r3, #0
 8005962:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7e1b      	ldrb	r3, [r3, #24]
 8005968:	3b01      	subs	r3, #1
 800596a:	2b0a      	cmp	r3, #10
 800596c:	f200 814c 	bhi.w	8005c08 <USBH_HandleControl+0x2b4>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <USBH_HandleControl+0x24>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059a5 	.word	0x080059a5
 800597c:	080059bf 	.word	0x080059bf
 8005980:	08005a29 	.word	0x08005a29
 8005984:	08005a4f 	.word	0x08005a4f
 8005988:	08005a87 	.word	0x08005a87
 800598c:	08005ab3 	.word	0x08005ab3
 8005990:	08005b05 	.word	0x08005b05
 8005994:	08005b27 	.word	0x08005b27
 8005998:	08005b63 	.word	0x08005b63
 800599c:	08005b8b 	.word	0x08005b8b
 80059a0:	08005bc9 	.word	0x08005bc9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0110 	add.w	r1, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	795b      	ldrb	r3, [r3, #5]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f939 	bl	8005c28 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	761a      	strb	r2, [r3, #24]
    break;
 80059bc:	e12f      	b.n	8005c1e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	795b      	ldrb	r3, [r3, #5]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 f8c5 	bl	8006b54 <USBH_LL_GetURBState>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d11e      	bne.n	8005a12 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7c1b      	ldrb	r3, [r3, #16]
 80059d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059dc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8adb      	ldrh	r3, [r3, #22]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80059e6:	7b7b      	ldrb	r3, [r7, #13]
 80059e8:	2b80      	cmp	r3, #128	; 0x80
 80059ea:	d103      	bne.n	80059f4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80059f2:	e10b      	b.n	8005c0c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2205      	movs	r2, #5
 80059f8:	761a      	strb	r2, [r3, #24]
    break;
 80059fa:	e107      	b.n	8005c0c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80059fc:	7b7b      	ldrb	r3, [r7, #13]
 80059fe:	2b80      	cmp	r3, #128	; 0x80
 8005a00:	d103      	bne.n	8005a0a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2209      	movs	r2, #9
 8005a06:	761a      	strb	r2, [r3, #24]
    break;
 8005a08:	e100      	b.n	8005c0c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	761a      	strb	r2, [r3, #24]
    break;
 8005a10:	e0fc      	b.n	8005c0c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d003      	beq.n	8005a20 <USBH_HandleControl+0xcc>
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	f040 80f6 	bne.w	8005c0c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	220b      	movs	r2, #11
 8005a24:	761a      	strb	r2, [r3, #24]
    break;
 8005a26:	e0f1      	b.n	8005c0c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	899a      	ldrh	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	791b      	ldrb	r3, [r3, #4]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f930 	bl	8005ca6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	761a      	strb	r2, [r3, #24]
    break;
 8005a4c:	e0e7      	b.n	8005c1e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	791b      	ldrb	r3, [r3, #4]
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 f87d 	bl	8006b54 <USBH_LL_GetURBState>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d102      	bne.n	8005a6a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2209      	movs	r2, #9
 8005a68:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d102      	bne.n	8005a76 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005a70:	2303      	movs	r3, #3
 8005a72:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005a74:	e0cc      	b.n	8005c10 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	f040 80c9 	bne.w	8005c10 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	220b      	movs	r2, #11
 8005a82:	761a      	strb	r2, [r3, #24]
    break;
 8005a84:	e0c4      	b.n	8005c10 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6899      	ldr	r1, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	899a      	ldrh	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7958      	ldrb	r0, [r3, #5]
 8005a92:	2301      	movs	r3, #1
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4603      	mov	r3, r0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8df 	bl	8005c5c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2206      	movs	r2, #6
 8005aae:	761a      	strb	r2, [r3, #24]
    break;
 8005ab0:	e0b5      	b.n	8005c1e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	795b      	ldrb	r3, [r3, #5]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 f84b 	bl	8006b54 <USBH_LL_GetURBState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d103      	bne.n	8005ad0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2207      	movs	r2, #7
 8005acc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ace:	e0a1      	b.n	8005c14 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d105      	bne.n	8005ae2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	220c      	movs	r2, #12
 8005ada:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005adc:	2303      	movs	r3, #3
 8005ade:	73fb      	strb	r3, [r7, #15]
    break;
 8005ae0:	e098      	b.n	8005c14 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d103      	bne.n	8005af0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2205      	movs	r2, #5
 8005aec:	761a      	strb	r2, [r3, #24]
    break;
 8005aee:	e091      	b.n	8005c14 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	f040 808e 	bne.w	8005c14 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	220b      	movs	r2, #11
 8005afc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005afe:	2302      	movs	r3, #2
 8005b00:	73fb      	strb	r3, [r7, #15]
    break;
 8005b02:	e087      	b.n	8005c14 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f8ca 	bl	8005ca6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2208      	movs	r2, #8
 8005b22:	761a      	strb	r2, [r3, #24]

    break;
 8005b24:	e07b      	b.n	8005c1e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	791b      	ldrb	r3, [r3, #4]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 f811 	bl	8006b54 <USBH_LL_GetURBState>
 8005b32:	4603      	mov	r3, r0
 8005b34:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	220d      	movs	r2, #13
 8005b40:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005b46:	e067      	b.n	8005c18 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d103      	bne.n	8005b56 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	220b      	movs	r2, #11
 8005b52:	761a      	strb	r2, [r3, #24]
    break;
 8005b54:	e060      	b.n	8005c18 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d15d      	bne.n	8005c18 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005b60:	e05a      	b.n	8005c18 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	795a      	ldrb	r2, [r3, #5]
 8005b66:	2301      	movs	r3, #1
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f873 	bl	8005c5c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	220a      	movs	r2, #10
 8005b86:	761a      	strb	r2, [r3, #24]
    break;
 8005b88:	e049      	b.n	8005c1e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	795b      	ldrb	r3, [r3, #5]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 ffdf 	bl	8006b54 <USBH_LL_GetURBState>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d105      	bne.n	8005bac <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	220d      	movs	r2, #13
 8005ba8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8005baa:	e037      	b.n	8005c1c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d103      	bne.n	8005bba <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2209      	movs	r2, #9
 8005bb6:	761a      	strb	r2, [r3, #24]
    break;
 8005bb8:	e030      	b.n	8005c1c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d12d      	bne.n	8005c1c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	220b      	movs	r2, #11
 8005bc4:	761a      	strb	r2, [r3, #24]
    break;
 8005bc6:	e029      	b.n	8005c1c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	7e5b      	ldrb	r3, [r3, #25]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	765a      	strb	r2, [r3, #25]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	7e5b      	ldrb	r3, [r3, #25]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d809      	bhi.n	8005bf0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 ff0c 	bl	80069fa <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8005bee:	e016      	b.n	8005c1e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005bf6:	2106      	movs	r1, #6
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8005c02:	2302      	movs	r3, #2
 8005c04:	73fb      	strb	r3, [r7, #15]
    break;
 8005c06:	e00a      	b.n	8005c1e <USBH_HandleControl+0x2ca>

  default:
    break;
 8005c08:	bf00      	nop
 8005c0a:	e008      	b.n	8005c1e <USBH_HandleControl+0x2ca>
    break;
 8005c0c:	bf00      	nop
 8005c0e:	e006      	b.n	8005c1e <USBH_HandleControl+0x2ca>
    break;
 8005c10:	bf00      	nop
 8005c12:	e004      	b.n	8005c1e <USBH_HandleControl+0x2ca>
    break;
 8005c14:	bf00      	nop
 8005c16:	e002      	b.n	8005c1e <USBH_HandleControl+0x2ca>
    break;
 8005c18:	bf00      	nop
 8005c1a:	e000      	b.n	8005c1e <USBH_HandleControl+0x2ca>
    break;
 8005c1c:	bf00      	nop
  }
  return status;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af04      	add	r7, sp, #16
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005c36:	79f9      	ldrb	r1, [r7, #7]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	9302      	str	r3, [sp, #8]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	2300      	movs	r3, #0
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 ff50 	bl	8006af2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af04      	add	r7, sp, #16
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	80fb      	strh	r3, [r7, #6]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005c80:	7979      	ldrb	r1, [r7, #5]
 8005c82:	7e3b      	ldrb	r3, [r7, #24]
 8005c84:	9303      	str	r3, [sp, #12]
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	9302      	str	r3, [sp, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	2301      	movs	r3, #1
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	2300      	movs	r3, #0
 8005c94:	2200      	movs	r2, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 ff2b 	bl	8006af2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b088      	sub	sp, #32
 8005caa:	af04      	add	r7, sp, #16
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	80fb      	strh	r3, [r7, #6]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005cbc:	7979      	ldrb	r1, [r7, #5]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9303      	str	r3, [sp, #12]
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	9302      	str	r3, [sp, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2301      	movs	r3, #1
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 ff0d 	bl	8006af2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8005cd8:	2300      	movs	r3, #0

}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b088      	sub	sp, #32
 8005ce6:	af04      	add	r7, sp, #16
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	4611      	mov	r1, r2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	80fb      	strh	r3, [r7, #6]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d06:	7979      	ldrb	r1, [r7, #5]
 8005d08:	7e3b      	ldrb	r3, [r7, #24]
 8005d0a:	9303      	str	r3, [sp, #12]
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	9302      	str	r3, [sp, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	2301      	movs	r3, #1
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2302      	movs	r3, #2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fee8 	bl	8006af2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af04      	add	r7, sp, #16
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4611      	mov	r1, r2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	80fb      	strh	r3, [r7, #6]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d42:	7979      	ldrb	r1, [r7, #5]
 8005d44:	2300      	movs	r3, #0
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	9302      	str	r3, [sp, #8]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	2301      	movs	r3, #1
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	2302      	movs	r3, #2
 8005d56:	2201      	movs	r2, #1
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 feca 	bl	8006af2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af04      	add	r7, sp, #16
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	70fb      	strb	r3, [r7, #3]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70bb      	strb	r3, [r7, #2]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8005d82:	7878      	ldrb	r0, [r7, #1]
 8005d84:	78ba      	ldrb	r2, [r7, #2]
 8005d86:	78f9      	ldrb	r1, [r7, #3]
 8005d88:	8b3b      	ldrh	r3, [r7, #24]
 8005d8a:	9302      	str	r3, [sp, #8]
 8005d8c:	7d3b      	ldrb	r3, [r7, #20]
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	7c3b      	ldrb	r3, [r7, #16]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4603      	mov	r3, r0
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fe5d 	bl	8006a56 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8005d9c:	2300      	movs	r3, #0

}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	460b      	mov	r3, r1
 8005db0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fe7c 	bl	8006ab4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8005dbc:	2300      	movs	r3, #0

}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f831 	bl	8005e3a <USBH_GetFreePipe>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	89fa      	ldrh	r2, [r7, #14]
 8005dea:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	32e0      	adds	r2, #224	; 0xe0
 8005df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	b2db      	uxtb	r3, r3
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b0a      	cmp	r3, #10
 8005e12:	d80b      	bhi.n	8005e2c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	32e0      	adds	r2, #224	; 0xe0
 8005e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	32e0      	adds	r2, #224	; 0xe0
 8005e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
 8005e4a:	e00e      	b.n	8005e6a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32e0      	adds	r2, #224	; 0xe0
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	e007      	b.n	8005e74 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	3301      	adds	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b0a      	cmp	r3, #10
 8005e6e:	d9ed      	bls.n	8005e4c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8005e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e86:	f7fa fd63 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e8a:	f000 f87f 	bl	8005f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e8e:	f000 f993 	bl	80061b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005e92:	f000 f8fd 	bl	8006090 <MX_I2C1_Init>
  MX_I2S3_Init();
 8005e96:	f000 f929 	bl	80060ec <MX_I2S3_Init>
  MX_SPI1_Init();
 8005e9a:	f000 f957 	bl	800614c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8005e9e:	f000 fc4b 	bl	8006738 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  double a = 0;
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f04f 0400 	mov.w	r4, #0
 8005eaa:	e9c7 3402 	strd	r3, r4, [r7, #8]
  int b = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
  _Bool check1 = false;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	70fb      	strb	r3, [r7, #3]
  _Bool check2 = false;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	70bb      	strb	r3, [r7, #2]
  _Bool check3 = false;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	707b      	strb	r3, [r7, #1]
  while (1)
  {
    /* USER CODE END WHILE */

	  a += 0.2;
 8005ebe:	a331      	add	r3, pc, #196	; (adr r3, 8005f84 <main+0x104>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ec8:	f7fa f984 	bl	80001d4 <__adddf3>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  if (a == 1.0) {
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	4b27      	ldr	r3, [pc, #156]	; (8005f78 <main+0xf8>)
 8005eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ede:	f7fa fb85 	bl	80005ec <__aeabi_dcmpeq>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <main+0xaa>
		  a = 0.0;
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	f04f 0400 	mov.w	r4, #0
 8005ef0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		  b++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	607b      	str	r3, [r7, #4]
		  check1 = true;
 8005efa:	2301      	movs	r3, #1
 8005efc:	70fb      	strb	r3, [r7, #3]
		  if (b% 2 == 0) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <main+0x8c>
			  check2 = true;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	70bb      	strb	r3, [r7, #2]
		  }
		  if (b%5 == 0) {
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <main+0xfc>)
 8005f10:	fb83 2301 	smull	r2, r3, r3, r1
 8005f14:	105a      	asrs	r2, r3, #1
 8005f16:	17cb      	asrs	r3, r1, #31
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	1aca      	subs	r2, r1, r3
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d101      	bne.n	8005f2a <main+0xaa>
			  check3 = true;
 8005f26:	2301      	movs	r3, #1
 8005f28:	707b      	strb	r3, [r7, #1]
		  }
	  }
	  HAL_Delay(200);
 8005f2a:	20c8      	movs	r0, #200	; 0xc8
 8005f2c:	f7fa fd82 	bl	8000a34 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8005f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f34:	4812      	ldr	r0, [pc, #72]	; (8005f80 <main+0x100>)
 8005f36:	f7fb f864 	bl	8001002 <HAL_GPIO_TogglePin>

	  if (check1) {
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <main+0xce>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8005f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f44:	480e      	ldr	r0, [pc, #56]	; (8005f80 <main+0x100>)
 8005f46:	f7fb f85c 	bl	8001002 <HAL_GPIO_TogglePin>
		  check1 = false;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	70fb      	strb	r3, [r7, #3]
	  }
	  if (check2) {
 8005f4e:	78bb      	ldrb	r3, [r7, #2]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <main+0xe2>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8005f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f58:	4809      	ldr	r0, [pc, #36]	; (8005f80 <main+0x100>)
 8005f5a:	f7fb f852 	bl	8001002 <HAL_GPIO_TogglePin>
		  check2 = false;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	70bb      	strb	r3, [r7, #2]
	  }
	  if (check3) {
 8005f62:	787b      	ldrb	r3, [r7, #1]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0aa      	beq.n	8005ebe <main+0x3e>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8005f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f6c:	4804      	ldr	r0, [pc, #16]	; (8005f80 <main+0x100>)
 8005f6e:	f7fb f848 	bl	8001002 <HAL_GPIO_TogglePin>
		  check3 = false;
 8005f72:	2300      	movs	r3, #0
 8005f74:	707b      	strb	r3, [r7, #1]
	  a += 0.2;
 8005f76:	e7a2      	b.n	8005ebe <main+0x3e>
 8005f78:	3ff00000 	.word	0x3ff00000
 8005f7c:	66666667 	.word	0x66666667
 8005f80:	40020c00 	.word	0x40020c00
 8005f84:	9999999a 	.word	0x9999999a
 8005f88:	3fc99999 	.word	0x3fc99999

08005f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b098      	sub	sp, #96	; 0x60
 8005f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f96:	2230      	movs	r2, #48	; 0x30
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fee4 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fa0:	f107 031c 	add.w	r3, r7, #28
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fb0:	f107 030c 	add.w	r3, r7, #12
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	4b31      	ldr	r3, [pc, #196]	; (8006088 <SystemClock_Config+0xfc>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	4a30      	ldr	r2, [pc, #192]	; (8006088 <SystemClock_Config+0xfc>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fce:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <SystemClock_Config+0xfc>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	607b      	str	r3, [r7, #4]
 8005fde:	4b2b      	ldr	r3, [pc, #172]	; (800608c <SystemClock_Config+0x100>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <SystemClock_Config+0x100>)
 8005fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4b28      	ldr	r3, [pc, #160]	; (800608c <SystemClock_Config+0x100>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006000:	2302      	movs	r3, #2
 8006002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006004:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006008:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800600a:	2308      	movs	r3, #8
 800600c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800600e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006012:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006014:	2302      	movs	r3, #2
 8006016:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006018:	2307      	movs	r3, #7
 800601a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800601c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006020:	4618      	mov	r0, r3
 8006022:	f7fd fa1d 	bl	8003460 <HAL_RCC_OscConfig>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800602c:	f000 f9c2 	bl	80063b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006030:	230f      	movs	r3, #15
 8006032:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006034:	2302      	movs	r3, #2
 8006036:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006038:	2300      	movs	r3, #0
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800603c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006048:	f107 031c 	add.w	r3, r7, #28
 800604c:	2105      	movs	r1, #5
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd fc48 	bl	80038e4 <HAL_RCC_ClockConfig>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800605a:	f000 f9ab 	bl	80063b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800605e:	2301      	movs	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8006062:	23c0      	movs	r3, #192	; 0xc0
 8006064:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8006066:	2302      	movs	r3, #2
 8006068:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800606a:	f107 030c 	add.w	r3, r7, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f7fd fe12 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800607a:	f000 f99b 	bl	80063b4 <Error_Handler>
  }
}
 800607e:	bf00      	nop
 8006080:	3760      	adds	r7, #96	; 0x60
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	40007000 	.word	0x40007000

08006090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <MX_I2C1_Init+0x50>)
 8006096:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <MX_I2C1_Init+0x54>)
 8006098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800609a:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <MX_I2C1_Init+0x50>)
 800609c:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <MX_I2C1_Init+0x58>)
 800609e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80060a6:	4b0e      	ldr	r3, [pc, #56]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060bc:	2200      	movs	r2, #0
 80060be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80060cc:	4804      	ldr	r0, [pc, #16]	; (80060e0 <MX_I2C1_Init+0x50>)
 80060ce:	f7fc fbff 	bl	80028d0 <HAL_I2C_Init>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80060d8:	f000 f96c 	bl	80063b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	200000c4 	.word	0x200000c4
 80060e4:	40005400 	.word	0x40005400
 80060e8:	000186a0 	.word	0x000186a0

080060ec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <MX_I2S3_Init+0x54>)
 80060f2:	4a14      	ldr	r2, [pc, #80]	; (8006144 <MX_I2S3_Init+0x58>)
 80060f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <MX_I2S3_Init+0x54>)
 80060f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <MX_I2S3_Init+0x54>)
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <MX_I2S3_Init+0x54>)
 8006106:	2200      	movs	r2, #0
 8006108:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <MX_I2S3_Init+0x54>)
 800610c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006110:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <MX_I2S3_Init+0x54>)
 8006114:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <MX_I2S3_Init+0x5c>)
 8006116:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <MX_I2S3_Init+0x54>)
 800611a:	2200      	movs	r2, #0
 800611c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <MX_I2S3_Init+0x54>)
 8006120:	2200      	movs	r2, #0
 8006122:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <MX_I2S3_Init+0x54>)
 8006126:	2200      	movs	r2, #0
 8006128:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800612a:	4805      	ldr	r0, [pc, #20]	; (8006140 <MX_I2S3_Init+0x54>)
 800612c:	f7fc fcf8 	bl	8002b20 <HAL_I2S_Init>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8006136:	f000 f93d 	bl	80063b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800613a:	bf00      	nop
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000170 	.word	0x20000170
 8006144:	40003c00 	.word	0x40003c00
 8006148:	00017700 	.word	0x00017700

0800614c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006150:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006152:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <MX_SPI1_Init+0x68>)
 8006154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800615c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006160:	2200      	movs	r2, #0
 8006162:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006166:	2200      	movs	r2, #0
 8006168:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800616a:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <MX_SPI1_Init+0x64>)
 800616c:	2200      	movs	r2, #0
 800616e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006172:	2200      	movs	r2, #0
 8006174:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006180:	2200      	movs	r2, #0
 8006182:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006186:	2200      	movs	r2, #0
 8006188:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <MX_SPI1_Init+0x64>)
 800618c:	2200      	movs	r2, #0
 800618e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006192:	2200      	movs	r2, #0
 8006194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <MX_SPI1_Init+0x64>)
 8006198:	220a      	movs	r2, #10
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800619c:	4804      	ldr	r0, [pc, #16]	; (80061b0 <MX_SPI1_Init+0x64>)
 800619e:	f7fd feb9 	bl	8003f14 <HAL_SPI_Init>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80061a8:	f000 f904 	bl	80063b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80061ac:	bf00      	nop
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000118 	.word	0x20000118
 80061b4:	40013000 	.word	0x40013000

080061b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	; 0x30
 80061bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061be:	f107 031c 	add.w	r3, r7, #28
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	609a      	str	r2, [r3, #8]
 80061ca:	60da      	str	r2, [r3, #12]
 80061cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	4b71      	ldr	r3, [pc, #452]	; (8006398 <MX_GPIO_Init+0x1e0>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	4a70      	ldr	r2, [pc, #448]	; (8006398 <MX_GPIO_Init+0x1e0>)
 80061d8:	f043 0310 	orr.w	r3, r3, #16
 80061dc:	6313      	str	r3, [r2, #48]	; 0x30
 80061de:	4b6e      	ldr	r3, [pc, #440]	; (8006398 <MX_GPIO_Init+0x1e0>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	4b6a      	ldr	r3, [pc, #424]	; (8006398 <MX_GPIO_Init+0x1e0>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a69      	ldr	r2, [pc, #420]	; (8006398 <MX_GPIO_Init+0x1e0>)
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30
 80061fa:	4b67      	ldr	r3, [pc, #412]	; (8006398 <MX_GPIO_Init+0x1e0>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	4b63      	ldr	r3, [pc, #396]	; (8006398 <MX_GPIO_Init+0x1e0>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	4a62      	ldr	r2, [pc, #392]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006214:	6313      	str	r3, [r2, #48]	; 0x30
 8006216:	4b60      	ldr	r3, [pc, #384]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	4b5c      	ldr	r3, [pc, #368]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	4a5b      	ldr	r2, [pc, #364]	; (8006398 <MX_GPIO_Init+0x1e0>)
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	6313      	str	r3, [r2, #48]	; 0x30
 8006232:	4b59      	ldr	r3, [pc, #356]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	4b55      	ldr	r3, [pc, #340]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	4a54      	ldr	r2, [pc, #336]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	6313      	str	r3, [r2, #48]	; 0x30
 800624e:	4b52      	ldr	r3, [pc, #328]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	4a4d      	ldr	r2, [pc, #308]	; (8006398 <MX_GPIO_Init+0x1e0>)
 8006264:	f043 0308 	orr.w	r3, r3, #8
 8006268:	6313      	str	r3, [r2, #48]	; 0x30
 800626a:	4b4b      	ldr	r3, [pc, #300]	; (8006398 <MX_GPIO_Init+0x1e0>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006276:	2200      	movs	r2, #0
 8006278:	2108      	movs	r1, #8
 800627a:	4848      	ldr	r0, [pc, #288]	; (800639c <MX_GPIO_Init+0x1e4>)
 800627c:	f7fa fea8 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006280:	2201      	movs	r2, #1
 8006282:	2101      	movs	r1, #1
 8006284:	4846      	ldr	r0, [pc, #280]	; (80063a0 <MX_GPIO_Init+0x1e8>)
 8006286:	f7fa fea3 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800628a:	2200      	movs	r2, #0
 800628c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8006290:	4844      	ldr	r0, [pc, #272]	; (80063a4 <MX_GPIO_Init+0x1ec>)
 8006292:	f7fa fe9d 	bl	8000fd0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8006296:	2308      	movs	r3, #8
 8006298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800629a:	2301      	movs	r3, #1
 800629c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a2:	2300      	movs	r3, #0
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80062a6:	f107 031c 	add.w	r3, r7, #28
 80062aa:	4619      	mov	r1, r3
 80062ac:	483b      	ldr	r0, [pc, #236]	; (800639c <MX_GPIO_Init+0x1e4>)
 80062ae:	f7fa fcf5 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062b6:	2301      	movs	r3, #1
 80062b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062be:	2300      	movs	r3, #0
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80062c2:	f107 031c 	add.w	r3, r7, #28
 80062c6:	4619      	mov	r1, r3
 80062c8:	4835      	ldr	r0, [pc, #212]	; (80063a0 <MX_GPIO_Init+0x1e8>)
 80062ca:	f7fa fce7 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80062ce:	2308      	movs	r3, #8
 80062d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d2:	2302      	movs	r3, #2
 80062d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062da:	2300      	movs	r3, #0
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80062de:	2305      	movs	r3, #5
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80062e2:	f107 031c 	add.w	r3, r7, #28
 80062e6:	4619      	mov	r1, r3
 80062e8:	482d      	ldr	r0, [pc, #180]	; (80063a0 <MX_GPIO_Init+0x1e8>)
 80062ea:	f7fa fcd7 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80062ee:	2301      	movs	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80062f2:	4b2d      	ldr	r3, [pc, #180]	; (80063a8 <MX_GPIO_Init+0x1f0>)
 80062f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80062fa:	f107 031c 	add.w	r3, r7, #28
 80062fe:	4619      	mov	r1, r3
 8006300:	482a      	ldr	r0, [pc, #168]	; (80063ac <MX_GPIO_Init+0x1f4>)
 8006302:	f7fa fccb 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006306:	2304      	movs	r3, #4
 8006308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800630a:	2300      	movs	r3, #0
 800630c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006312:	f107 031c 	add.w	r3, r7, #28
 8006316:	4619      	mov	r1, r3
 8006318:	4825      	ldr	r0, [pc, #148]	; (80063b0 <MX_GPIO_Init+0x1f8>)
 800631a:	f7fa fcbf 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800631e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006324:	2302      	movs	r3, #2
 8006326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006328:	2300      	movs	r3, #0
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800632c:	2300      	movs	r3, #0
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006330:	2305      	movs	r3, #5
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8006334:	f107 031c 	add.w	r3, r7, #28
 8006338:	4619      	mov	r1, r3
 800633a:	481d      	ldr	r0, [pc, #116]	; (80063b0 <MX_GPIO_Init+0x1f8>)
 800633c:	f7fa fcae 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8006340:	f24f 0310 	movw	r3, #61456	; 0xf010
 8006344:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006346:	2301      	movs	r3, #1
 8006348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800634e:	2300      	movs	r3, #0
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006352:	f107 031c 	add.w	r3, r7, #28
 8006356:	4619      	mov	r1, r3
 8006358:	4812      	ldr	r0, [pc, #72]	; (80063a4 <MX_GPIO_Init+0x1ec>)
 800635a:	f7fa fc9f 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800635e:	2320      	movs	r3, #32
 8006360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800636a:	f107 031c 	add.w	r3, r7, #28
 800636e:	4619      	mov	r1, r3
 8006370:	480c      	ldr	r0, [pc, #48]	; (80063a4 <MX_GPIO_Init+0x1ec>)
 8006372:	f7fa fc93 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8006376:	2302      	movs	r3, #2
 8006378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <MX_GPIO_Init+0x1f0>)
 800637c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637e:	2300      	movs	r3, #0
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8006382:	f107 031c 	add.w	r3, r7, #28
 8006386:	4619      	mov	r1, r3
 8006388:	4804      	ldr	r0, [pc, #16]	; (800639c <MX_GPIO_Init+0x1e4>)
 800638a:	f7fa fc87 	bl	8000c9c <HAL_GPIO_Init>

}
 800638e:	bf00      	nop
 8006390:	3730      	adds	r7, #48	; 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023800 	.word	0x40023800
 800639c:	40021000 	.word	0x40021000
 80063a0:	40020800 	.word	0x40020800
 80063a4:	40020c00 	.word	0x40020c00
 80063a8:	10120000 	.word	0x10120000
 80063ac:	40020000 	.word	0x40020000
 80063b0:	40020400 	.word	0x40020400

080063b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
 80063ce:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_MspInit+0x4c>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <HAL_MspInit+0x4c>)
 80063d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d8:	6453      	str	r3, [r2, #68]	; 0x44
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <HAL_MspInit+0x4c>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <HAL_MspInit+0x4c>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	4a08      	ldr	r2, [pc, #32]	; (8006410 <HAL_MspInit+0x4c>)
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f4:	6413      	str	r3, [r2, #64]	; 0x40
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_MspInit+0x4c>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006402:	2007      	movs	r0, #7
 8006404:	f7fa fc08 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40023800 	.word	0x40023800

08006414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800641c:	f107 0314 	add.w	r3, r7, #20
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	60da      	str	r2, [r3, #12]
 800642a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a19      	ldr	r2, [pc, #100]	; (8006498 <HAL_I2C_MspInit+0x84>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d12c      	bne.n	8006490 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	4b18      	ldr	r3, [pc, #96]	; (800649c <HAL_I2C_MspInit+0x88>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	4a17      	ldr	r2, [pc, #92]	; (800649c <HAL_I2C_MspInit+0x88>)
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	6313      	str	r3, [r2, #48]	; 0x30
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <HAL_I2C_MspInit+0x88>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8006452:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006458:	2312      	movs	r3, #18
 800645a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800645c:	2301      	movs	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006460:	2300      	movs	r3, #0
 8006462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006464:	2304      	movs	r3, #4
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	4619      	mov	r1, r3
 800646e:	480c      	ldr	r0, [pc, #48]	; (80064a0 <HAL_I2C_MspInit+0x8c>)
 8006470:	f7fa fc14 	bl	8000c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	4b08      	ldr	r3, [pc, #32]	; (800649c <HAL_I2C_MspInit+0x88>)
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	4a07      	ldr	r2, [pc, #28]	; (800649c <HAL_I2C_MspInit+0x88>)
 800647e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006482:	6413      	str	r3, [r2, #64]	; 0x40
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_I2C_MspInit+0x88>)
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006490:	bf00      	nop
 8006492:	3728      	adds	r7, #40	; 0x28
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40005400 	.word	0x40005400
 800649c:	40023800 	.word	0x40023800
 80064a0:	40020400 	.word	0x40020400

080064a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	; 0x28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ac:	f107 0314 	add.w	r3, r7, #20
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a28      	ldr	r2, [pc, #160]	; (8006564 <HAL_I2S_MspInit+0xc0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d14a      	bne.n	800655c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	4b27      	ldr	r3, [pc, #156]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	4a26      	ldr	r2, [pc, #152]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	6413      	str	r3, [r2, #64]	; 0x40
 80064d6:	4b24      	ldr	r3, [pc, #144]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	4b20      	ldr	r3, [pc, #128]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	6313      	str	r3, [r2, #48]	; 0x30
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	4b19      	ldr	r3, [pc, #100]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	4a18      	ldr	r2, [pc, #96]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 8006508:	f043 0304 	orr.w	r3, r3, #4
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
 800650e:	4b16      	ldr	r3, [pc, #88]	; (8006568 <HAL_I2S_MspInit+0xc4>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	60bb      	str	r3, [r7, #8]
 8006518:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800651a:	2310      	movs	r3, #16
 800651c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651e:	2302      	movs	r3, #2
 8006520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006526:	2300      	movs	r3, #0
 8006528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800652a:	2306      	movs	r3, #6
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800652e:	f107 0314 	add.w	r3, r7, #20
 8006532:	4619      	mov	r1, r3
 8006534:	480d      	ldr	r0, [pc, #52]	; (800656c <HAL_I2S_MspInit+0xc8>)
 8006536:	f7fa fbb1 	bl	8000c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800653a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800653e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006540:	2302      	movs	r3, #2
 8006542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006548:	2300      	movs	r3, #0
 800654a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800654c:	2306      	movs	r3, #6
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006550:	f107 0314 	add.w	r3, r7, #20
 8006554:	4619      	mov	r1, r3
 8006556:	4806      	ldr	r0, [pc, #24]	; (8006570 <HAL_I2S_MspInit+0xcc>)
 8006558:	f7fa fba0 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800655c:	bf00      	nop
 800655e:	3728      	adds	r7, #40	; 0x28
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40003c00 	.word	0x40003c00
 8006568:	40023800 	.word	0x40023800
 800656c:	40020000 	.word	0x40020000
 8006570:	40020800 	.word	0x40020800

08006574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657c:	f107 0314 	add.w	r3, r7, #20
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <HAL_SPI_MspInit+0x84>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d12b      	bne.n	80065ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	4b18      	ldr	r3, [pc, #96]	; (80065fc <HAL_SPI_MspInit+0x88>)
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	4a17      	ldr	r2, [pc, #92]	; (80065fc <HAL_SPI_MspInit+0x88>)
 80065a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065a4:	6453      	str	r3, [r2, #68]	; 0x44
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <HAL_SPI_MspInit+0x88>)
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <HAL_SPI_MspInit+0x88>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	4a10      	ldr	r2, [pc, #64]	; (80065fc <HAL_SPI_MspInit+0x88>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6313      	str	r3, [r2, #48]	; 0x30
 80065c2:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <HAL_SPI_MspInit+0x88>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80065ce:	23e0      	movs	r3, #224	; 0xe0
 80065d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d2:	2302      	movs	r3, #2
 80065d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065da:	2300      	movs	r3, #0
 80065dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80065de:	2305      	movs	r3, #5
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e2:	f107 0314 	add.w	r3, r7, #20
 80065e6:	4619      	mov	r1, r3
 80065e8:	4805      	ldr	r0, [pc, #20]	; (8006600 <HAL_SPI_MspInit+0x8c>)
 80065ea:	f7fa fb57 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80065ee:	bf00      	nop
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40013000 	.word	0x40013000
 80065fc:	40023800 	.word	0x40023800
 8006600:	40020000 	.word	0x40020000

08006604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006612:	b480      	push	{r7}
 8006614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006616:	e7fe      	b.n	8006616 <HardFault_Handler+0x4>

08006618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800661c:	e7fe      	b.n	800661c <MemManage_Handler+0x4>

0800661e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800661e:	b480      	push	{r7}
 8006620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006622:	e7fe      	b.n	8006622 <BusFault_Handler+0x4>

08006624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006628:	e7fe      	b.n	8006628 <UsageFault_Handler+0x4>

0800662a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800662e:	bf00      	nop
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800663c:	bf00      	nop
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006646:	b480      	push	{r7}
 8006648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800664a:	bf00      	nop
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006658:	f7fa f9cc 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800665c:	bf00      	nop
 800665e:	bd80      	pop	{r7, pc}

08006660 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8006664:	4802      	ldr	r0, [pc, #8]	; (8006670 <OTG_FS_IRQHandler+0x10>)
 8006666:	f7fa ff6d 	bl	8001544 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800666a:	bf00      	nop
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000584 	.word	0x20000584

08006674 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <_sbrk+0x50>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <_sbrk+0x16>
		heap_end = &end;
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <_sbrk+0x50>)
 8006686:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <_sbrk+0x54>)
 8006688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800668a:	4b0e      	ldr	r3, [pc, #56]	; (80066c4 <_sbrk+0x50>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <_sbrk+0x50>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	466a      	mov	r2, sp
 800669a:	4293      	cmp	r3, r2
 800669c:	d907      	bls.n	80066ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800669e:	f000 fb29 	bl	8006cf4 <__errno>
 80066a2:	4602      	mov	r2, r0
 80066a4:	230c      	movs	r3, #12
 80066a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	e006      	b.n	80066bc <_sbrk+0x48>
	}

	heap_end += incr;
 80066ae:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <_sbrk+0x50>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	4a03      	ldr	r2, [pc, #12]	; (80066c4 <_sbrk+0x50>)
 80066b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80066ba:	68fb      	ldr	r3, [r7, #12]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200000b0 	.word	0x200000b0
 80066c8:	20000850 	.word	0x20000850

080066cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066d0:	4b16      	ldr	r3, [pc, #88]	; (800672c <SystemInit+0x60>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	4a15      	ldr	r2, [pc, #84]	; (800672c <SystemInit+0x60>)
 80066d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80066e0:	4b13      	ldr	r3, [pc, #76]	; (8006730 <SystemInit+0x64>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a12      	ldr	r2, [pc, #72]	; (8006730 <SystemInit+0x64>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <SystemInit+0x64>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <SystemInit+0x64>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <SystemInit+0x64>)
 80066f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80066fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006700:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <SystemInit+0x64>)
 8006704:	4a0b      	ldr	r2, [pc, #44]	; (8006734 <SystemInit+0x68>)
 8006706:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <SystemInit+0x64>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a08      	ldr	r2, [pc, #32]	; (8006730 <SystemInit+0x64>)
 800670e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006712:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <SystemInit+0x64>)
 8006716:	2200      	movs	r2, #0
 8006718:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <SystemInit+0x60>)
 800671c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006720:	609a      	str	r2, [r3, #8]
#endif
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	e000ed00 	.word	0xe000ed00
 8006730:	40023800 	.word	0x40023800
 8006734:	24003010 	.word	0x24003010

08006738 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800673c:	2201      	movs	r2, #1
 800673e:	490e      	ldr	r1, [pc, #56]	; (8006778 <MX_USB_HOST_Init+0x40>)
 8006740:	480e      	ldr	r0, [pc, #56]	; (800677c <MX_USB_HOST_Init+0x44>)
 8006742:	f7fe fee1 	bl	8005508 <USBH_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800674c:	f7ff fe32 	bl	80063b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006750:	490b      	ldr	r1, [pc, #44]	; (8006780 <MX_USB_HOST_Init+0x48>)
 8006752:	480a      	ldr	r0, [pc, #40]	; (800677c <MX_USB_HOST_Init+0x44>)
 8006754:	f7fe ff4b 	bl	80055ee <USBH_RegisterClass>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800675e:	f7ff fe29 	bl	80063b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006762:	4806      	ldr	r0, [pc, #24]	; (800677c <MX_USB_HOST_Init+0x44>)
 8006764:	f7fe ffd0 	bl	8005708 <USBH_Start>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800676e:	f7ff fe21 	bl	80063b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	08006785 	.word	0x08006785
 800677c:	200001b8 	.word	0x200001b8
 8006780:	20000008 	.word	0x20000008

08006784 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	3b01      	subs	r3, #1
 8006794:	2b04      	cmp	r3, #4
 8006796:	d819      	bhi.n	80067cc <USBH_UserProcess+0x48>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <USBH_UserProcess+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067cd 	.word	0x080067cd
 80067a4:	080067bd 	.word	0x080067bd
 80067a8:	080067cd 	.word	0x080067cd
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067b5 	.word	0x080067b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <USBH_UserProcess+0x58>)
 80067b6:	2203      	movs	r2, #3
 80067b8:	701a      	strb	r2, [r3, #0]
  break;
 80067ba:	e008      	b.n	80067ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <USBH_UserProcess+0x58>)
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
  break;
 80067c2:	e004      	b.n	80067ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <USBH_UserProcess+0x58>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
  break;
 80067ca:	e000      	b.n	80067ce <USBH_UserProcess+0x4a>

  default:
  break;
 80067cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	200000b4 	.word	0x200000b4

080067e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	; 0x28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e8:	f107 0314 	add.w	r3, r7, #20
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006800:	d147      	bne.n	8006892 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	4b25      	ldr	r3, [pc, #148]	; (800689c <HAL_HCD_MspInit+0xbc>)
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <HAL_HCD_MspInit+0xbc>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	6313      	str	r3, [r2, #48]	; 0x30
 8006812:	4b22      	ldr	r3, [pc, #136]	; (800689c <HAL_HCD_MspInit+0xbc>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800681e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006828:	2300      	movs	r3, #0
 800682a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4619      	mov	r1, r3
 8006832:	481b      	ldr	r0, [pc, #108]	; (80068a0 <HAL_HCD_MspInit+0xc0>)
 8006834:	f7fa fa32 	bl	8000c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006838:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800683c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683e:	2302      	movs	r3, #2
 8006840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006842:	2300      	movs	r3, #0
 8006844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006846:	2300      	movs	r3, #0
 8006848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800684a:	230a      	movs	r3, #10
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	4619      	mov	r1, r3
 8006854:	4812      	ldr	r0, [pc, #72]	; (80068a0 <HAL_HCD_MspInit+0xc0>)
 8006856:	f7fa fa21 	bl	8000c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800685a:	4b10      	ldr	r3, [pc, #64]	; (800689c <HAL_HCD_MspInit+0xbc>)
 800685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685e:	4a0f      	ldr	r2, [pc, #60]	; (800689c <HAL_HCD_MspInit+0xbc>)
 8006860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006864:	6353      	str	r3, [r2, #52]	; 0x34
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	4b0c      	ldr	r3, [pc, #48]	; (800689c <HAL_HCD_MspInit+0xbc>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	4a0b      	ldr	r2, [pc, #44]	; (800689c <HAL_HCD_MspInit+0xbc>)
 8006870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006874:	6453      	str	r3, [r2, #68]	; 0x44
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <HAL_HCD_MspInit+0xbc>)
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006882:	2200      	movs	r2, #0
 8006884:	2100      	movs	r1, #0
 8006886:	2043      	movs	r0, #67	; 0x43
 8006888:	f7fa f9d1 	bl	8000c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800688c:	2043      	movs	r0, #67	; 0x43
 800688e:	f7fa f9ea 	bl	8000c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006892:	bf00      	nop
 8006894:	3728      	adds	r7, #40	; 0x28
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40023800 	.word	0x40023800
 80068a0:	40020000 	.word	0x40020000

080068a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe ff47 	bl	8005746 <USBH_LL_IncTimer>
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe ff7f 	bl	80057d2 <USBH_LL_Connect>
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe ff97 	bl	800581e <USBH_LL_Disconnect>
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
 8006904:	4613      	mov	r3, r2
 8006906:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe ff39 	bl	800579a <USBH_LL_PortEnabled>
} 
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe ff39 	bl	80057b6 <USBH_LL_PortDisabled>
} 
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800695a:	2b01      	cmp	r3, #1
 800695c:	d12a      	bne.n	80069b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800695e:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <USBH_LL_Init+0x74>)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <USBH_LL_Init+0x74>)
 800696a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800696e:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <USBH_LL_Init+0x74>)
 8006970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006974:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <USBH_LL_Init+0x74>)
 8006978:	2208      	movs	r2, #8
 800697a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <USBH_LL_Init+0x74>)
 800697e:	2201      	movs	r2, #1
 8006980:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006982:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <USBH_LL_Init+0x74>)
 8006984:	2200      	movs	r2, #0
 8006986:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <USBH_LL_Init+0x74>)
 800698a:	2202      	movs	r2, #2
 800698c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <USBH_LL_Init+0x74>)
 8006990:	2200      	movs	r2, #0
 8006992:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006994:	480a      	ldr	r0, [pc, #40]	; (80069c0 <USBH_LL_Init+0x74>)
 8006996:	f7fa fb4f 	bl	8001038 <HAL_HCD_Init>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80069a0:	f7ff fd08 	bl	80063b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80069a4:	4806      	ldr	r0, [pc, #24]	; (80069c0 <USBH_LL_Init+0x74>)
 80069a6:	f7fa ff3d 	bl	8001824 <HAL_HCD_GetCurrentFrame>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe feba 	bl	8005728 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000584 	.word	0x20000584

080069c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fa feb8 	bl	8001750 <HAL_HCD_Start>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f912 	bl	8006c10 <USBH_Get_USB_Status>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fa fec0 	bl	8001796 <HAL_HCD_Stop>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f8f7 	bl	8006c10 <USBH_Get_USB_Status>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fa fed7 	bl	80017fa <HAL_HCD_HC_GetXferCount>
 8006a4c:	4603      	mov	r3, r0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a56:	b590      	push	{r4, r7, lr}
 8006a58:	b089      	sub	sp, #36	; 0x24
 8006a5a:	af04      	add	r7, sp, #16
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	4608      	mov	r0, r1
 8006a60:	4611      	mov	r1, r2
 8006a62:	461a      	mov	r2, r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	70fb      	strb	r3, [r7, #3]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70bb      	strb	r3, [r7, #2]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006a7e:	787c      	ldrb	r4, [r7, #1]
 8006a80:	78ba      	ldrb	r2, [r7, #2]
 8006a82:	78f9      	ldrb	r1, [r7, #3]
 8006a84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4623      	mov	r3, r4
 8006a96:	f7fa fb31 	bl	80010fc <HAL_HCD_HC_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f8b5 	bl	8006c10 <USBH_Get_USB_Status>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd90      	pop	{r4, r7, pc}

08006ab4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fa fbaa 	bl	800122c <HAL_HCD_HC_Halt>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f896 	bl	8006c10 <USBH_Get_USB_Status>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006af2:	b590      	push	{r4, r7, lr}
 8006af4:	b089      	sub	sp, #36	; 0x24
 8006af6:	af04      	add	r7, sp, #16
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	4608      	mov	r0, r1
 8006afc:	4611      	mov	r1, r2
 8006afe:	461a      	mov	r2, r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	70fb      	strb	r3, [r7, #3]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70bb      	strb	r3, [r7, #2]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006b1a:	787c      	ldrb	r4, [r7, #1]
 8006b1c:	78ba      	ldrb	r2, [r7, #2]
 8006b1e:	78f9      	ldrb	r1, [r7, #3]
 8006b20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	4623      	mov	r3, r4
 8006b36:	f7fa fb9d 	bl	8001274 <HAL_HCD_HC_SubmitRequest>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 f865 	bl	8006c10 <USBH_Get_USB_Status>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd90      	pop	{r4, r7, pc}

08006b54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fa fe30 	bl	80017d0 <HAL_HCD_HC_GetURBState>
 8006b70:	4603      	mov	r3, r0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d103      	bne.n	8006b98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f868 	bl	8006c68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006b98:	20c8      	movs	r0, #200	; 0xc8
 8006b9a:	f7f9 ff4b 	bl	8000a34 <HAL_Delay>
  return USBH_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bbe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	440b      	add	r3, r1
 8006bce:	333b      	adds	r3, #59	; 0x3b
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	440b      	add	r3, r1
 8006be4:	3350      	adds	r3, #80	; 0x50
 8006be6:	78ba      	ldrb	r2, [r7, #2]
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e009      	b.n	8006c00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3351      	adds	r3, #81	; 0x51
 8006bfc:	78ba      	ldrb	r2, [r7, #2]
 8006bfe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
	...

08006c10 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d817      	bhi.n	8006c54 <USBH_Get_USB_Status+0x44>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <USBH_Get_USB_Status+0x1c>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c43 	.word	0x08006c43
 8006c34:	08006c49 	.word	0x08006c49
 8006c38:	08006c4f 	.word	0x08006c4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c40:	e00b      	b.n	8006c5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	73fb      	strb	r3, [r7, #15]
    break;
 8006c46:	e008      	b.n	8006c5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c4c:	e005      	b.n	8006c5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	73fb      	strb	r3, [r7, #15]
    break;
 8006c52:	e002      	b.n	8006c5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	73fb      	strb	r3, [r7, #15]
    break;
 8006c58:	bf00      	nop
  }
  return usb_status;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	e001      	b.n	8006c86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	4803      	ldr	r0, [pc, #12]	; (8006c9c <MX_DriverVbusFS+0x34>)
 8006c8e:	f7fa f99f 	bl	8000fd0 <HAL_GPIO_WritePin>
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40020800 	.word	0x40020800

08006ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ca6:	e003      	b.n	8006cb0 <LoopCopyDataInit>

08006ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006cae:	3104      	adds	r1, #4

08006cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006cb0:	480b      	ldr	r0, [pc, #44]	; (8006ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006cb8:	d3f6      	bcc.n	8006ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8006cba:	4a0b      	ldr	r2, [pc, #44]	; (8006ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006cbc:	e002      	b.n	8006cc4 <LoopFillZerobss>

08006cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006cc0:	f842 3b04 	str.w	r3, [r2], #4

08006cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006cc4:	4b09      	ldr	r3, [pc, #36]	; (8006cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006cc8:	d3f9      	bcc.n	8006cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006cca:	f7ff fcff 	bl	80066cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cce:	f000 f817 	bl	8006d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cd2:	f7ff f8d5 	bl	8005e80 <main>
  bx  lr    
 8006cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006cdc:	08006f30 	.word	0x08006f30
  ldr  r0, =_sdata
 8006ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006ce4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8006ce8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8006cec:	2000084c 	.word	0x2000084c

08006cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cf0:	e7fe      	b.n	8006cf0 <ADC_IRQHandler>
	...

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	; (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	2000002c 	.word	0x2000002c

08006d00 <__libc_init_array>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4e0d      	ldr	r6, [pc, #52]	; (8006d38 <__libc_init_array+0x38>)
 8006d04:	4c0d      	ldr	r4, [pc, #52]	; (8006d3c <__libc_init_array+0x3c>)
 8006d06:	1ba4      	subs	r4, r4, r6
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	2500      	movs	r5, #0
 8006d0c:	42a5      	cmp	r5, r4
 8006d0e:	d109      	bne.n	8006d24 <__libc_init_array+0x24>
 8006d10:	4e0b      	ldr	r6, [pc, #44]	; (8006d40 <__libc_init_array+0x40>)
 8006d12:	4c0c      	ldr	r4, [pc, #48]	; (8006d44 <__libc_init_array+0x44>)
 8006d14:	f000 f8ea 	bl	8006eec <_init>
 8006d18:	1ba4      	subs	r4, r4, r6
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	2500      	movs	r5, #0
 8006d1e:	42a5      	cmp	r5, r4
 8006d20:	d105      	bne.n	8006d2e <__libc_init_array+0x2e>
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d28:	4798      	blx	r3
 8006d2a:	3501      	adds	r5, #1
 8006d2c:	e7ee      	b.n	8006d0c <__libc_init_array+0xc>
 8006d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d32:	4798      	blx	r3
 8006d34:	3501      	adds	r5, #1
 8006d36:	e7f2      	b.n	8006d1e <__libc_init_array+0x1e>
 8006d38:	08006f28 	.word	0x08006f28
 8006d3c:	08006f28 	.word	0x08006f28
 8006d40:	08006f28 	.word	0x08006f28
 8006d44:	08006f2c 	.word	0x08006f2c

08006d48 <malloc>:
 8006d48:	4b02      	ldr	r3, [pc, #8]	; (8006d54 <malloc+0xc>)
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	f000 b861 	b.w	8006e14 <_malloc_r>
 8006d52:	bf00      	nop
 8006d54:	2000002c 	.word	0x2000002c

08006d58 <free>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <free+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f000 b80b 	b.w	8006d78 <_free_r>
 8006d62:	bf00      	nop
 8006d64:	2000002c 	.word	0x2000002c

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <_free_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d045      	beq.n	8006e0c <_free_r+0x94>
 8006d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d84:	1f0c      	subs	r4, r1, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfb8      	it	lt
 8006d8a:	18e4      	addlt	r4, r4, r3
 8006d8c:	f000 f8ac 	bl	8006ee8 <__malloc_lock>
 8006d90:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <_free_r+0x98>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	4610      	mov	r0, r2
 8006d96:	b933      	cbnz	r3, 8006da6 <_free_r+0x2e>
 8006d98:	6063      	str	r3, [r4, #4]
 8006d9a:	6014      	str	r4, [r2, #0]
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da2:	f000 b8a2 	b.w	8006eea <__malloc_unlock>
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	d90c      	bls.n	8006dc4 <_free_r+0x4c>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	1862      	adds	r2, r4, r1
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bf04      	itt	eq
 8006db2:	681a      	ldreq	r2, [r3, #0]
 8006db4:	685b      	ldreq	r3, [r3, #4]
 8006db6:	6063      	str	r3, [r4, #4]
 8006db8:	bf04      	itt	eq
 8006dba:	1852      	addeq	r2, r2, r1
 8006dbc:	6022      	streq	r2, [r4, #0]
 8006dbe:	6004      	str	r4, [r0, #0]
 8006dc0:	e7ec      	b.n	8006d9c <_free_r+0x24>
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	b10a      	cbz	r2, 8006dcc <_free_r+0x54>
 8006dc8:	42a2      	cmp	r2, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x4a>
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	1858      	adds	r0, r3, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x74>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1858      	adds	r0, r3, r1
 8006dda:	4282      	cmp	r2, r0
 8006ddc:	6019      	str	r1, [r3, #0]
 8006dde:	d1dd      	bne.n	8006d9c <_free_r+0x24>
 8006de0:	6810      	ldr	r0, [r2, #0]
 8006de2:	6852      	ldr	r2, [r2, #4]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	4401      	add	r1, r0
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	e7d7      	b.n	8006d9c <_free_r+0x24>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x7c>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d3      	b.n	8006d9c <_free_r+0x24>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428a      	cmp	r2, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6811      	ldreq	r1, [r2, #0]
 8006dfe:	6852      	ldreq	r2, [r2, #4]
 8006e00:	6062      	str	r2, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	605c      	str	r4, [r3, #4]
 8006e0a:	e7c7      	b.n	8006d9c <_free_r+0x24>
 8006e0c:	bd38      	pop	{r3, r4, r5, pc}
 8006e0e:	bf00      	nop
 8006e10:	200000b8 	.word	0x200000b8

08006e14 <_malloc_r>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	1ccd      	adds	r5, r1, #3
 8006e18:	f025 0503 	bic.w	r5, r5, #3
 8006e1c:	3508      	adds	r5, #8
 8006e1e:	2d0c      	cmp	r5, #12
 8006e20:	bf38      	it	cc
 8006e22:	250c      	movcc	r5, #12
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	4606      	mov	r6, r0
 8006e28:	db01      	blt.n	8006e2e <_malloc_r+0x1a>
 8006e2a:	42a9      	cmp	r1, r5
 8006e2c:	d903      	bls.n	8006e36 <_malloc_r+0x22>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	6033      	str	r3, [r6, #0]
 8006e32:	2000      	movs	r0, #0
 8006e34:	bd70      	pop	{r4, r5, r6, pc}
 8006e36:	f000 f857 	bl	8006ee8 <__malloc_lock>
 8006e3a:	4a21      	ldr	r2, [pc, #132]	; (8006ec0 <_malloc_r+0xac>)
 8006e3c:	6814      	ldr	r4, [r2, #0]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	b991      	cbnz	r1, 8006e68 <_malloc_r+0x54>
 8006e42:	4c20      	ldr	r4, [pc, #128]	; (8006ec4 <_malloc_r+0xb0>)
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	b91b      	cbnz	r3, 8006e50 <_malloc_r+0x3c>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 f83d 	bl	8006ec8 <_sbrk_r>
 8006e4e:	6020      	str	r0, [r4, #0]
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f000 f838 	bl	8006ec8 <_sbrk_r>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d124      	bne.n	8006ea6 <_malloc_r+0x92>
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	4630      	mov	r0, r6
 8006e62:	f000 f842 	bl	8006eea <__malloc_unlock>
 8006e66:	e7e4      	b.n	8006e32 <_malloc_r+0x1e>
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	1b5b      	subs	r3, r3, r5
 8006e6c:	d418      	bmi.n	8006ea0 <_malloc_r+0x8c>
 8006e6e:	2b0b      	cmp	r3, #11
 8006e70:	d90f      	bls.n	8006e92 <_malloc_r+0x7e>
 8006e72:	600b      	str	r3, [r1, #0]
 8006e74:	50cd      	str	r5, [r1, r3]
 8006e76:	18cc      	adds	r4, r1, r3
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 f836 	bl	8006eea <__malloc_unlock>
 8006e7e:	f104 000b 	add.w	r0, r4, #11
 8006e82:	1d23      	adds	r3, r4, #4
 8006e84:	f020 0007 	bic.w	r0, r0, #7
 8006e88:	1ac3      	subs	r3, r0, r3
 8006e8a:	d0d3      	beq.n	8006e34 <_malloc_r+0x20>
 8006e8c:	425a      	negs	r2, r3
 8006e8e:	50e2      	str	r2, [r4, r3]
 8006e90:	e7d0      	b.n	8006e34 <_malloc_r+0x20>
 8006e92:	428c      	cmp	r4, r1
 8006e94:	684b      	ldr	r3, [r1, #4]
 8006e96:	bf16      	itet	ne
 8006e98:	6063      	strne	r3, [r4, #4]
 8006e9a:	6013      	streq	r3, [r2, #0]
 8006e9c:	460c      	movne	r4, r1
 8006e9e:	e7eb      	b.n	8006e78 <_malloc_r+0x64>
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	6849      	ldr	r1, [r1, #4]
 8006ea4:	e7cc      	b.n	8006e40 <_malloc_r+0x2c>
 8006ea6:	1cc4      	adds	r4, r0, #3
 8006ea8:	f024 0403 	bic.w	r4, r4, #3
 8006eac:	42a0      	cmp	r0, r4
 8006eae:	d005      	beq.n	8006ebc <_malloc_r+0xa8>
 8006eb0:	1a21      	subs	r1, r4, r0
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f000 f808 	bl	8006ec8 <_sbrk_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d0cf      	beq.n	8006e5c <_malloc_r+0x48>
 8006ebc:	6025      	str	r5, [r4, #0]
 8006ebe:	e7db      	b.n	8006e78 <_malloc_r+0x64>
 8006ec0:	200000b8 	.word	0x200000b8
 8006ec4:	200000bc 	.word	0x200000bc

08006ec8 <_sbrk_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4c06      	ldr	r4, [pc, #24]	; (8006ee4 <_sbrk_r+0x1c>)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	f7ff fbce 	bl	8006674 <_sbrk>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_sbrk_r+0x1a>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_sbrk_r+0x1a>
 8006ee0:	602b      	str	r3, [r5, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000848 	.word	0x20000848

08006ee8 <__malloc_lock>:
 8006ee8:	4770      	bx	lr

08006eea <__malloc_unlock>:
 8006eea:	4770      	bx	lr

08006eec <_init>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

08006ef8 <_fini>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr
