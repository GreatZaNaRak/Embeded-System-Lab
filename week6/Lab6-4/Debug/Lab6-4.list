
Lab6-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800bc54  0800bc54  0001bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be4c  0800be4c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800be4c  0800be4c  0001be4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be54  0800be54  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800be5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b8  20000094  0800bef0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000484c  0800bef0  0002484c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022566  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049c6  00000000  00000000  0004262a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c0  00000000  00000000  00046ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d8  00000000  00000000  000488b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002698c  00000000  00000000  00049f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000176a6  00000000  00000000  00070914  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4fea  00000000  00000000  00087fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cfa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a28  00000000  00000000  0015d020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc3c 	.word	0x0800bc3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800bc3c 	.word	0x0800bc3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f00a f9d4 	bl	800a950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000002c 	.word	0x2000002c
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	20004064 	.word	0x20004064

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20004064 	.word	0x20004064

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	e16b      	b.n	8000bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f040 815a 	bne.w	8000baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d003      	beq.n	8000906 <HAL_GPIO_Init+0x4a>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b12      	cmp	r3, #18
 8000904:	d123      	bne.n	800094e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	220f      	movs	r2, #15
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4013      	ands	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	69b9      	ldr	r1, [r7, #24]
 800094a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0203 	and.w	r2, r3, #3
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4313      	orrs	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d00b      	beq.n	80009a2 <HAL_GPIO_Init+0xe6>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000996:	2b11      	cmp	r3, #17
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d130      	bne.n	8000a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	68da      	ldr	r2, [r3, #12]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d8:	2201      	movs	r2, #1
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	f003 0201 	and.w	r2, r3, #1
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80b4 	beq.w	8000baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a5e      	ldr	r2, [pc, #376]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d02b      	beq.n	8000ae2 <HAL_GPIO_Init+0x226>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d025      	beq.n	8000ade <HAL_GPIO_Init+0x222>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d01f      	beq.n	8000ada <HAL_GPIO_Init+0x21e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d019      	beq.n	8000ad6 <HAL_GPIO_Init+0x21a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x320>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x216>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x324>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x212>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x328>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x20e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x32c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x20a>
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	e00e      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000aca:	2306      	movs	r3, #6
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000af4:	4934      	ldr	r1, [pc, #208]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	f67f ae90 	bls.w	80008d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3724      	adds	r7, #36	; 0x24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c0c:	e003      	b.n	8000c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	401a      	ands	r2, r3
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d104      	bne.n	8000c46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	041a      	lsls	r2, r3, #16
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	b08f      	sub	sp, #60	; 0x3c
 8000c5c:	af0a      	add	r7, sp, #40	; 0x28
 8000c5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e054      	b.n	8000d14 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d106      	bne.n	8000c8a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f00a f8b7 	bl	800adf8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fb83 	bl	80043b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	687e      	ldr	r6, [r7, #4]
 8000cb6:	466d      	mov	r5, sp
 8000cb8:	f106 0410 	add.w	r4, r6, #16
 8000cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ccc:	1d33      	adds	r3, r6, #4
 8000cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cd0:	6838      	ldr	r0, [r7, #0]
 8000cd2:	f003 fafd 	bl	80042d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fb7a 	bl	80043d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	687e      	ldr	r6, [r7, #4]
 8000cea:	466d      	mov	r5, sp
 8000cec:	f106 0410 	add.w	r4, r6, #16
 8000cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d00:	1d33      	adds	r3, r6, #4
 8000d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d04:	6838      	ldr	r0, [r7, #0]
 8000d06:	f003 fc8d 	bl	8004624 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d1c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	70fb      	strb	r3, [r7, #3]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70bb      	strb	r3, [r7, #2]
 8000d32:	4613      	mov	r3, r2
 8000d34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_HCD_HC_Init+0x28>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e07f      	b.n	8000e44 <HAL_HCD_HC_Init+0x128>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	333d      	adds	r3, #61	; 0x3d
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3338      	adds	r3, #56	; 0x38
 8000d70:	787a      	ldrb	r2, [r7, #1]
 8000d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3340      	adds	r3, #64	; 0x40
 8000d84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d86:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3339      	adds	r3, #57	; 0x39
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d9c:	78fa      	ldrb	r2, [r7, #3]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	333f      	adds	r3, #63	; 0x3f
 8000dac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000db0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000db2:	78fa      	ldrb	r2, [r7, #3]
 8000db4:	78bb      	ldrb	r3, [r7, #2]
 8000db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dba:	b2d8      	uxtb	r0, r3
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	333a      	adds	r3, #58	; 0x3a
 8000dca:	4602      	mov	r2, r0
 8000dcc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000dce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da0a      	bge.n	8000dec <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
 8000de4:	333b      	adds	r3, #59	; 0x3b
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e009      	b.n	8000e00 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000dec:	78fa      	ldrb	r2, [r7, #3]
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	333b      	adds	r3, #59	; 0x3b
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000e00:	78fa      	ldrb	r2, [r7, #3]
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	440b      	add	r3, r1
 8000e0e:	333c      	adds	r3, #60	; 0x3c
 8000e10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	787c      	ldrb	r4, [r7, #1]
 8000e1c:	78ba      	ldrb	r2, [r7, #2]
 8000e1e:	78f9      	ldrb	r1, [r7, #3]
 8000e20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	4623      	mov	r3, r4
 8000e32:	f003 fd79 	bl	8004928 <USB_HC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <HAL_HCD_HC_Halt+0x1e>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e00f      	b.n	8000e8a <HAL_HCD_HC_Halt+0x3e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 ffb3 	bl	8004de6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	70fb      	strb	r3, [r7, #3]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	70bb      	strb	r3, [r7, #2]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000eae:	78fa      	ldrb	r2, [r7, #3]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	333b      	adds	r3, #59	; 0x3b
 8000ebe:	78ba      	ldrb	r2, [r7, #2]
 8000ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	333f      	adds	r3, #63	; 0x3f
 8000ed2:	787a      	ldrb	r2, [r7, #1]
 8000ed4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000ed6:	7c3b      	ldrb	r3, [r7, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10a      	bne.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000edc:	78fa      	ldrb	r2, [r7, #3]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3342      	adds	r3, #66	; 0x42
 8000eec:	2203      	movs	r2, #3
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e009      	b.n	8000f06 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3342      	adds	r3, #66	; 0x42
 8000f02:	2202      	movs	r2, #2
 8000f04:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000f06:	787b      	ldrb	r3, [r7, #1]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	f200 80d6 	bhi.w	80010ba <HAL_HCD_HC_SubmitRequest+0x226>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	080010a5 	.word	0x080010a5
 8000f1c:	08000f91 	.word	0x08000f91
 8000f20:	0800101b 	.word	0x0800101b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000f24:	7c3b      	ldrb	r3, [r7, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	f040 80c9 	bne.w	80010be <HAL_HCD_HC_SubmitRequest+0x22a>
 8000f2c:	78bb      	ldrb	r3, [r7, #2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f040 80c5 	bne.w	80010be <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000f34:	8b3b      	ldrh	r3, [r7, #24]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	440b      	add	r3, r1
 8000f48:	3351      	adds	r3, #81	; 0x51
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3351      	adds	r3, #81	; 0x51
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10a      	bne.n	8000f7a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f64:	78fa      	ldrb	r2, [r7, #3]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3342      	adds	r3, #66	; 0x42
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f78:	e0a1      	b.n	80010be <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	3342      	adds	r3, #66	; 0x42
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
      break;
 8000f8e:	e096      	b.n	80010be <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f90:	78bb      	ldrb	r3, [r7, #2]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d120      	bne.n	8000fd8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3351      	adds	r3, #81	; 0x51
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10a      	bne.n	8000fc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3342      	adds	r3, #66	; 0x42
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000fc0:	e07e      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fc2:	78fa      	ldrb	r2, [r7, #3]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3342      	adds	r3, #66	; 0x42
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	701a      	strb	r2, [r3, #0]
      break;
 8000fd6:	e073      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3350      	adds	r3, #80	; 0x50
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10a      	bne.n	8001004 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3342      	adds	r3, #66	; 0x42
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
      break;
 8001002:	e05d      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	3342      	adds	r3, #66	; 0x42
 8001014:	2202      	movs	r2, #2
 8001016:	701a      	strb	r2, [r3, #0]
      break;
 8001018:	e052      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800101a:	78bb      	ldrb	r3, [r7, #2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d120      	bne.n	8001062 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3351      	adds	r3, #81	; 0x51
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10a      	bne.n	800104c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3342      	adds	r3, #66	; 0x42
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800104a:	e039      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	3342      	adds	r3, #66	; 0x42
 800105c:	2202      	movs	r2, #2
 800105e:	701a      	strb	r2, [r3, #0]
      break;
 8001060:	e02e      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3350      	adds	r3, #80	; 0x50
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10a      	bne.n	800108e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	3342      	adds	r3, #66	; 0x42
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
      break;
 800108c:	e018      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800108e:	78fa      	ldrb	r2, [r7, #3]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	3342      	adds	r3, #66	; 0x42
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]
      break;
 80010a2:	e00d      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	3342      	adds	r3, #66	; 0x42
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
      break;
 80010b8:	e002      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80010ba:	bf00      	nop
 80010bc:	e000      	b.n	80010c0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80010be:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80010c0:	78fa      	ldrb	r2, [r7, #3]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	3344      	adds	r3, #68	; 0x44
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	8b39      	ldrh	r1, [r7, #24]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4403      	add	r3, r0
 80010e4:	3348      	adds	r3, #72	; 0x48
 80010e6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80010e8:	78fa      	ldrb	r2, [r7, #3]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	335c      	adds	r3, #92	; 0x5c
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80010fc:	78fa      	ldrb	r2, [r7, #3]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	334c      	adds	r3, #76	; 0x4c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	3339      	adds	r3, #57	; 0x39
 8001120:	78fa      	ldrb	r2, [r7, #3]
 8001122:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001124:	78fa      	ldrb	r2, [r7, #3]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	335d      	adds	r3, #93	; 0x5d
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	3338      	adds	r3, #56	; 0x38
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	18d1      	adds	r1, r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	f003 fcf2 	bl	8004b3c <USB_HC_StartXfer>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop

08001164 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fa0f 	bl	800459e <USB_GetMode>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	f040 80f1 	bne.w	800136a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f003 f9f3 	bl	8004578 <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80e7 	beq.w	8001368 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 f9ea 	bl	8004578 <USB_ReadInterrupts>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011ae:	d104      	bne.n	80011ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f9da 	bl	8004578 <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011ce:	d104      	bne.n	80011da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 f9ca 	bl	8004578 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011ee:	d104      	bne.n	80011fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 f9ba 	bl	8004578 <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b02      	cmp	r3, #2
 800120c:	d103      	bne.n	8001216 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f9ac 	bl	8004578 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800122a:	d117      	bne.n	800125c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800123a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800123e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f009 fe57 	bl	800aef4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f003 faa5 	bl	800479c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800125a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f989 	bl	8004578 <USB_ReadInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d102      	bne.n	8001278 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f8c8 	bl	8002408 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 f97b 	bl	8004578 <USB_ReadInterrupts>
 8001282:	4603      	mov	r3, r0
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b08      	cmp	r3, #8
 800128a:	d106      	bne.n	800129a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f009 fe15 	bl	800aebc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2208      	movs	r2, #8
 8001298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 f96a 	bl	8004578 <USB_ReadInterrupts>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012ae:	d138      	bne.n	8001322 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fd85 	bl	8004dc4 <USB_HC_ReadInterrupt>
 80012ba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e025      	b.n	800130e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d018      	beq.n	8001308 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ec:	d106      	bne.n	80012fc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f8cf 	bl	8001498 <HCD_HC_IN_IRQHandler>
 80012fa:	e005      	b.n	8001308 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fc5f 	bl	8001bc6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3d4      	bcc.n	80012c2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f926 	bl	8004578 <USB_ReadInterrupts>
 800132c:	4603      	mov	r3, r0
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b10      	cmp	r3, #16
 8001334:	d101      	bne.n	800133a <HAL_HCD_IRQHandler+0x1d6>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_HCD_IRQHandler+0x1d8>
 800133a:	2300      	movs	r3, #0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d014      	beq.n	800136a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0210 	bic.w	r2, r2, #16
 800134e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 ffad 	bl	80022b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0210 	orr.w	r2, r2, #16
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	e000      	b.n	800136a <HAL_HCD_IRQHandler+0x206>
      return;
 8001368:	bf00      	nop
    }
  }
}
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_HCD_Start+0x16>
 8001382:	2302      	movs	r3, #2
 8001384:	e013      	b.n	80013ae <HAL_HCD_Start+0x3e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fffd 	bl	8004392 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fa60 	bl	8004864 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_HCD_Stop+0x16>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e00d      	b.n	80013e8 <HAL_HCD_Stop+0x32>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fe3f 	bl	800505c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fa07 	bl	8004810 <USB_ResetPort>
 8001402:	4603      	mov	r3, r0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	335c      	adds	r3, #92	; 0x5c
 8001428:	781b      	ldrb	r3, [r3, #0]
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	334c      	adds	r3, #76	; 0x4c
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fa49 	bl	8004904 <USB_GetCurrentFrame>
 8001472:	4603      	mov	r3, r0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fa24 	bl	80048d6 <USB_GetHostSpeed>
 800148e:	4603      	mov	r3, r0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d119      	bne.n	80014fc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d4:	461a      	mov	r2, r3
 80014d6:	2304      	movs	r3, #4
 80014d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	0151      	lsls	r1, r2, #5
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	440a      	add	r2, r1
 80014f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	60d3      	str	r3, [r2, #12]
 80014fa:	e095      	b.n	8001628 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4413      	add	r3, r2
 8001504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	2b20      	cmp	r3, #32
 8001510:	d109      	bne.n	8001526 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151e:	461a      	mov	r2, r3
 8001520:	2320      	movs	r3, #32
 8001522:	6093      	str	r3, [r2, #8]
 8001524:	e080      	b.n	8001628 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4413      	add	r3, r2
 800152e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b08      	cmp	r3, #8
 800153a:	d134      	bne.n	80015a6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	0151      	lsls	r1, r2, #5
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	440a      	add	r2, r1
 8001552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	335d      	adds	r3, #93	; 0x5d
 800156c:	2205      	movs	r2, #5
 800156e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4413      	add	r3, r2
 8001578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800157c:	461a      	mov	r2, r3
 800157e:	2310      	movs	r3, #16
 8001580:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4413      	add	r3, r2
 800158a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158e:	461a      	mov	r2, r3
 8001590:	2308      	movs	r3, #8
 8001592:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fc21 	bl	8004de6 <USB_HC_Halt>
 80015a4:	e040      	b.n	8001628 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d134      	bne.n	8001628 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	0151      	lsls	r1, r2, #5
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	440a      	add	r2, r1
 80015d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fbfc 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fa:	461a      	mov	r2, r3
 80015fc:	2310      	movs	r3, #16
 80015fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	335d      	adds	r3, #93	; 0x5d
 8001610:	2208      	movs	r2, #8
 8001612:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4413      	add	r3, r2
 800161c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001620:	461a      	mov	r2, r3
 8001622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001626:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800163a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163e:	d122      	bne.n	8001686 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4413      	add	r3, r2
 8001648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	0151      	lsls	r1, r2, #5
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	440a      	add	r2, r1
 8001656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fbbb 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4413      	add	r3, r2
 8001678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167c:	461a      	mov	r2, r3
 800167e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001682:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001684:	e29b      	b.n	8001bbe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 80c1 	bne.w	8001820 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01b      	beq.n	80016de <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3348      	adds	r3, #72	; 0x48
 80016b6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	0159      	lsls	r1, r3, #5
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	440b      	add	r3, r1
 80016c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016ca:	1ad1      	subs	r1, r2, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4403      	add	r3, r0
 80016da:	334c      	adds	r3, #76	; 0x4c
 80016dc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	335d      	adds	r3, #93	; 0x5d
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3358      	adds	r3, #88	; 0x58
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4413      	add	r3, r2
 800170e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001712:	461a      	mov	r2, r3
 8001714:	2301      	movs	r3, #1
 8001716:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	333f      	adds	r3, #63	; 0x3f
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	333f      	adds	r3, #63	; 0x3f
 800173e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001740:	2b02      	cmp	r3, #2
 8001742:	d121      	bne.n	8001788 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	015a      	lsls	r2, r3, #5
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4413      	add	r3, r2
 800174c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	0151      	lsls	r1, r2, #5
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	440a      	add	r2, r1
 800175a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fb39 	bl	8004de6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	461a      	mov	r2, r3
 8001782:	2310      	movs	r3, #16
 8001784:	6093      	str	r3, [r2, #8]
 8001786:	e034      	b.n	80017f2 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	333f      	adds	r3, #63	; 0x3f
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d129      	bne.n	80017f2 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	015a      	lsls	r2, r3, #5
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	0151      	lsls	r1, r2, #5
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	440a      	add	r2, r1
 80017b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	335c      	adds	r3, #92	; 0x5c
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	b2d8      	uxtb	r0, r3
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	335c      	adds	r3, #92	; 0x5c
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4601      	mov	r1, r0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f009 fb8f 	bl	800af10 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3350      	adds	r3, #80	; 0x50
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2d8      	uxtb	r0, r3
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3350      	adds	r3, #80	; 0x50
 800181a:	4602      	mov	r2, r0
 800181c:	701a      	strb	r2, [r3, #0]
}
 800181e:	e1ce      	b.n	8001bbe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b02      	cmp	r3, #2
 8001834:	f040 80f1 	bne.w	8001a1a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	015a      	lsls	r2, r3, #5
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4413      	add	r3, r2
 8001840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	0151      	lsls	r1, r2, #5
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	440a      	add	r2, r1
 800184e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	335d      	adds	r3, #93	; 0x5d
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10a      	bne.n	8001884 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	335c      	adds	r3, #92	; 0x5c
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e0b0      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	335d      	adds	r3, #93	; 0x5d
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d10a      	bne.n	80018b0 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	335c      	adds	r3, #92	; 0x5c
 80018aa:	2205      	movs	r2, #5
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e09a      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	335d      	adds	r3, #93	; 0x5d
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d00a      	beq.n	80018dc <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	335d      	adds	r3, #93	; 0x5d
 80018d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d156      	bne.n	800198a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3358      	adds	r3, #88	; 0x58
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4403      	add	r3, r0
 80018fe:	3358      	adds	r3, #88	; 0x58
 8001900:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3358      	adds	r3, #88	; 0x58
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d914      	bls.n	8001942 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	3358      	adds	r3, #88	; 0x58
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	335c      	adds	r3, #92	; 0x5c
 800193c:	2204      	movs	r2, #4
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e009      	b.n	8001956 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	335c      	adds	r3, #92	; 0x5c
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4413      	add	r3, r2
 800195e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800196c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001974:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4413      	add	r3, r2
 800197e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02d      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	335d      	adds	r3, #93	; 0x5d
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d122      	bne.n	80019e6 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	335c      	adds	r3, #92	; 0x5c
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	461a      	mov	r2, r3
 80019f4:	2302      	movs	r3, #2
 80019f6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	b2d8      	uxtb	r0, r3
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	335c      	adds	r3, #92	; 0x5c
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4601      	mov	r1, r0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f009 fa7c 	bl	800af10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a18:	e0d1      	b.n	8001bbe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2c:	2b80      	cmp	r3, #128	; 0x80
 8001a2e:	d13e      	bne.n	8001aae <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	0151      	lsls	r1, r2, #5
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	440a      	add	r2, r1
 8001a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3358      	adds	r3, #88	; 0x58
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1c59      	adds	r1, r3, #1
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4403      	add	r3, r0
 8001a72:	3358      	adds	r3, #88	; 0x58
 8001a74:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	335d      	adds	r3, #93	; 0x5d
 8001a86:	2206      	movs	r2, #6
 8001a88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 f9a6 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	6093      	str	r3, [r2, #8]
}
 8001aac:	e087      	b.n	8001bbe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d17c      	bne.n	8001bbe <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	333f      	adds	r3, #63	; 0x3f
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d122      	bne.n	8001b20 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3358      	adds	r3, #88	; 0x58
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	0151      	lsls	r1, r2, #5
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	440a      	add	r2, r1
 8001b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f964 	bl	8004de6 <USB_HC_Halt>
 8001b1e:	e045      	b.n	8001bac <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	333f      	adds	r3, #63	; 0x3f
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	333f      	adds	r3, #63	; 0x3f
 8001b46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d12f      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3358      	adds	r3, #88	; 0x58
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d121      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	335d      	adds	r3, #93	; 0x5d
 8001b78:	2203      	movs	r2, #3
 8001b7a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	0151      	lsls	r1, r2, #5
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	440a      	add	r2, r1
 8001b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 f91d 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2310      	movs	r3, #16
 8001bbc:	6093      	str	r3, [r2, #8]
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d119      	bne.n	8001c2a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	461a      	mov	r2, r3
 8001c04:	2304      	movs	r3, #4
 8001c06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	0151      	lsls	r1, r2, #5
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c28:	e33e      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d141      	bne.n	8001cc4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2320      	movs	r3, #32
 8001c50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	333d      	adds	r3, #61	; 0x3d
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 831f 	bne.w	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	333d      	adds	r3, #61	; 0x3d
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	335c      	adds	r3, #92	; 0x5c
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	0151      	lsls	r1, r2, #5
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	440a      	add	r2, r1
 8001ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f892 	bl	8004de6 <USB_HC_Halt>
}
 8001cc2:	e2f1      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d13f      	bne.n	8001d5a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	335d      	adds	r3, #93	; 0x5d
 8001cea:	2204      	movs	r2, #4
 8001cec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	333d      	adds	r3, #61	; 0x3d
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	3358      	adds	r3, #88	; 0x58
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	0151      	lsls	r1, r2, #5
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 f850 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	461a      	mov	r2, r3
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	6093      	str	r3, [r2, #8]
}
 8001d58:	e2a6      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d70:	d122      	bne.n	8001db8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f822 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db4:	6093      	str	r3, [r2, #8]
}
 8001db6:	e277      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d135      	bne.n	8001e3a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3358      	adds	r3, #88	; 0x58
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 ffea 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2301      	movs	r3, #1
 8001e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	335d      	adds	r3, #93	; 0x5d
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	e236      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d12b      	bne.n	8001ea8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2308      	movs	r3, #8
 8001e60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	0151      	lsls	r1, r2, #5
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	440a      	add	r2, r1
 8001e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 ffaa 	bl	8004de6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	335d      	adds	r3, #93	; 0x5d
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	701a      	strb	r2, [r3, #0]
}
 8001ea6:	e1ff      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d155      	bne.n	8001f6a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3358      	adds	r3, #88	; 0x58
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	335d      	adds	r3, #93	; 0x5d
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	333d      	adds	r3, #61	; 0x3d
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d114      	bne.n	8001f26 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	333c      	adds	r3, #60	; 0x3c
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	333d      	adds	r3, #61	; 0x3d
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	0151      	lsls	r1, r2, #5
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	440a      	add	r2, r1
 8001f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 ff48 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	461a      	mov	r2, r3
 8001f64:	2310      	movs	r3, #16
 8001f66:	6093      	str	r3, [r2, #8]
}
 8001f68:	e19e      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d12b      	bne.n	8001fd8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 ff1b 	bl	8004de6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	335d      	adds	r3, #93	; 0x5d
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	6093      	str	r3, [r2, #8]
}
 8001fd6:	e167      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fee:	d135      	bne.n	800205c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	0151      	lsls	r1, r2, #5
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	440a      	add	r2, r1
 8002006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fee3 	bl	8004de6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	2310      	movs	r3, #16
 8002030:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002044:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	335d      	adds	r3, #93	; 0x5d
 8002056:	2208      	movs	r2, #8
 8002058:	701a      	strb	r2, [r3, #0]
}
 800205a:	e125      	b.n	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	f040 811a 	bne.w	80022a8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	440a      	add	r2, r1
 800208a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	335d      	adds	r3, #93	; 0x5d
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d137      	bne.n	800211a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335c      	adds	r3, #92	; 0x5c
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	333f      	adds	r3, #63	; 0x3f
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d00b      	beq.n	80020ec <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	333f      	adds	r3, #63	; 0x3f
 80020e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	f040 80c5 	bne.w	8002276 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	3351      	adds	r3, #81	; 0x51
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f083 0301 	eor.w	r3, r3, #1
 8002102:	b2d8      	uxtb	r0, r3
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3351      	adds	r3, #81	; 0x51
 8002114:	4602      	mov	r2, r0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e0ad      	b.n	8002276 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	335d      	adds	r3, #93	; 0x5d
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d10a      	bne.n	8002146 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	335c      	adds	r3, #92	; 0x5c
 8002140:	2202      	movs	r2, #2
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e097      	b.n	8002276 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	335d      	adds	r3, #93	; 0x5d
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d10a      	bne.n	8002172 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	335c      	adds	r3, #92	; 0x5c
 800216c:	2202      	movs	r2, #2
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e081      	b.n	8002276 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	335d      	adds	r3, #93	; 0x5d
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10a      	bne.n	800219e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	335c      	adds	r3, #92	; 0x5c
 8002198:	2205      	movs	r2, #5
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e06b      	b.n	8002276 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	335d      	adds	r3, #93	; 0x5d
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d00a      	beq.n	80021ca <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	335d      	adds	r3, #93	; 0x5d
 80021c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d155      	bne.n	8002276 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3358      	adds	r3, #88	; 0x58
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1c59      	adds	r1, r3, #1
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4403      	add	r3, r0
 80021ec:	3358      	adds	r3, #88	; 0x58
 80021ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3358      	adds	r3, #88	; 0x58
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d914      	bls.n	8002230 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	3358      	adds	r3, #88	; 0x58
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	335c      	adds	r3, #92	; 0x5c
 800222a:	2204      	movs	r2, #4
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e009      	b.n	8002244 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800225a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002262:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	461a      	mov	r2, r3
 8002284:	2302      	movs	r3, #2
 8002286:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	b2d8      	uxtb	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	335c      	adds	r3, #92	; 0x5c
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	4601      	mov	r1, r0
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f008 fe34 	bl	800af10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	0c5b      	lsrs	r3, r3, #17
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d003      	beq.n	80022f4 <HCD_RXQLVL_IRQHandler+0x44>
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	f000 8082 	beq.w	80023f6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80022f2:	e083      	b.n	80023fc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d07f      	beq.n	80023fa <HCD_RXQLVL_IRQHandler+0x14a>
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	3344      	adds	r3, #68	; 0x44
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d074      	beq.n	80023fa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	; 0x44
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	b292      	uxth	r2, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f002 f8fb 	bl	8004526 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3344      	adds	r3, #68	; 0x44
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	18d1      	adds	r1, r2, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4403      	add	r3, r0
 8002354:	3344      	adds	r3, #68	; 0x44
 8002356:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	334c      	adds	r3, #76	; 0x4c
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	18d1      	adds	r1, r2, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4403      	add	r3, r0
 800237c:	334c      	adds	r3, #76	; 0x4c
 800237e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HCD_RXQLVL_IRQHandler+0x154>)
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d031      	beq.n	80023fa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3350      	adds	r3, #80	; 0x50
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2d8      	uxtb	r0, r3
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	3350      	adds	r3, #80	; 0x50
 80023f0:	4602      	mov	r2, r0
 80023f2:	701a      	strb	r2, [r3, #0]
      break;
 80023f4:	e001      	b.n	80023fa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80023fa:	bf00      	nop
  }
}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	1ff80000 	.word	0x1ff80000

08002408 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002434:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d113      	bne.n	8002468 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10a      	bne.n	8002460 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002458:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f008 fd3c 	bl	800aed8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b08      	cmp	r3, #8
 8002470:	d147      	bne.n	8002502 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b04      	cmp	r3, #4
 8002482:	d129      	bne.n	80024d8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d113      	bne.n	80024b4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002492:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002496:	d106      	bne.n	80024a6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 f97c 	bl	800479c <USB_InitFSLSPClkSel>
 80024a4:	e011      	b.n	80024ca <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 f975 	bl	800479c <USB_InitFSLSPClkSel>
 80024b2:	e00a      	b.n	80024ca <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c2:	461a      	mov	r2, r3
 80024c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024c8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f008 fd32 	bl	800af34 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f008 fd01 	bl	800aed8 <HAL_HCD_Connect_Callback>
 80024d6:	e014      	b.n	8002502 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f008 fd39 	bl	800af50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80024ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80024f0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002500:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b20      	cmp	r3, #32
 800250a:	d103      	bne.n	8002514 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f043 0320 	orr.w	r3, r3, #32
 8002512:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e10f      	b.n	800275a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f008 fa2a 	bl	800a9a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800256c:	f001 f9ac 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8002570:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a7b      	ldr	r2, [pc, #492]	; (8002764 <HAL_I2C_Init+0x23c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d807      	bhi.n	800258c <HAL_I2C_Init+0x64>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7a      	ldr	r2, [pc, #488]	; (8002768 <HAL_I2C_Init+0x240>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e006      	b.n	800259a <HAL_I2C_Init+0x72>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a77      	ldr	r2, [pc, #476]	; (800276c <HAL_I2C_Init+0x244>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0db      	b.n	800275a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a72      	ldr	r2, [pc, #456]	; (8002770 <HAL_I2C_Init+0x248>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9b      	lsrs	r3, r3, #18
 80025ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a64      	ldr	r2, [pc, #400]	; (8002764 <HAL_I2C_Init+0x23c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d802      	bhi.n	80025dc <HAL_I2C_Init+0xb4>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3301      	adds	r3, #1
 80025da:	e009      	b.n	80025f0 <HAL_I2C_Init+0xc8>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	4a63      	ldr	r2, [pc, #396]	; (8002774 <HAL_I2C_Init+0x24c>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	3301      	adds	r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002602:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4956      	ldr	r1, [pc, #344]	; (8002764 <HAL_I2C_Init+0x23c>)
 800260c:	428b      	cmp	r3, r1
 800260e:	d80d      	bhi.n	800262c <HAL_I2C_Init+0x104>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e59      	subs	r1, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fbb1 f3f3 	udiv	r3, r1, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b04      	cmp	r3, #4
 8002626:	bf38      	it	cc
 8002628:	2304      	movcc	r3, #4
 800262a:	e04f      	b.n	80026cc <HAL_I2C_Init+0x1a4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <HAL_I2C_Init+0x130>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e012      	b.n	800267e <HAL_I2C_Init+0x156>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	0099      	lsls	r1, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x15e>
 8002682:	2301      	movs	r3, #1
 8002684:	e022      	b.n	80026cc <HAL_I2C_Init+0x1a4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10e      	bne.n	80026ac <HAL_I2C_Init+0x184>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e58      	subs	r0, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	440b      	add	r3, r1
 800269c:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	e00f      	b.n	80026cc <HAL_I2C_Init+0x1a4>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	6809      	ldr	r1, [r1, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6911      	ldr	r1, [r2, #16]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	430b      	orrs	r3, r1
 800270e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	000186a0 	.word	0x000186a0
 8002768:	001e847f 	.word	0x001e847f
 800276c:	003d08ff 	.word	0x003d08ff
 8002770:	431bde83 	.word	0x431bde83
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e128      	b.n	80029dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a90      	ldr	r2, [pc, #576]	; (80029e4 <HAL_I2S_Init+0x26c>)
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f008 f947 	bl	800aa38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2202      	movs	r2, #2
 80027cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d060      	beq.n	8002898 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027de:	2310      	movs	r3, #16
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e001      	b.n	80027e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d802      	bhi.n	80027f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f001 f970 	bl	8003adc <HAL_RCCEx_GetPeriphCLKFreq>
 80027fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002806:	d125      	bne.n	8002854 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	fbb2 f2f3 	udiv	r2, r2, r3
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	3305      	adds	r3, #5
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e01f      	b.n	8002872 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	3305      	adds	r3, #5
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e00e      	b.n	8002872 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fbb2 f2f3 	udiv	r2, r2, r3
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	3305      	adds	r3, #5
 8002870:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_I2S_Init+0x270>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	08db      	lsrs	r3, r3, #3
 800287c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e003      	b.n	80028a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002898:	2302      	movs	r3, #2
 800289a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d902      	bls.n	80028ac <HAL_I2S_Init+0x134>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2bff      	cmp	r3, #255	; 0xff
 80028aa:	d907      	bls.n	80028bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e08f      	b.n	80029dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	ea42 0103 	orr.w	r1, r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028da:	f023 030f 	bic.w	r3, r3, #15
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6851      	ldr	r1, [r2, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68d2      	ldr	r2, [r2, #12]
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6992      	ldr	r2, [r2, #24]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d161      	bne.n	80029cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a38      	ldr	r2, [pc, #224]	; (80029ec <HAL_I2S_Init+0x274>)
 800290c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a37      	ldr	r2, [pc, #220]	; (80029f0 <HAL_I2S_Init+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_I2S_Init+0x1a4>
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_I2S_Init+0x27c>)
 800291a:	e001      	b.n	8002920 <HAL_I2S_Init+0x1a8>
 800291c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4932      	ldr	r1, [pc, #200]	; (80029f0 <HAL_I2S_Init+0x278>)
 8002928:	428a      	cmp	r2, r1
 800292a:	d101      	bne.n	8002930 <HAL_I2S_Init+0x1b8>
 800292c:	4a31      	ldr	r2, [pc, #196]	; (80029f4 <HAL_I2S_Init+0x27c>)
 800292e:	e001      	b.n	8002934 <HAL_I2S_Init+0x1bc>
 8002930:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002934:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002938:	f023 030f 	bic.w	r3, r3, #15
 800293c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <HAL_I2S_Init+0x278>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_I2S_Init+0x1d4>
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_I2S_Init+0x27c>)
 800294a:	e001      	b.n	8002950 <HAL_I2S_Init+0x1d8>
 800294c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002950:	2202      	movs	r2, #2
 8002952:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <HAL_I2S_Init+0x278>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_I2S_Init+0x1ea>
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_I2S_Init+0x27c>)
 8002960:	e001      	b.n	8002966 <HAL_I2S_Init+0x1ee>
 8002962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d003      	beq.n	800297c <HAL_I2S_Init+0x204>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800297c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	e001      	b.n	8002988 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	b299      	uxth	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800299e:	4303      	orrs	r3, r0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	430b      	orrs	r3, r1
 80029a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	897b      	ldrh	r3, [r7, #10]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_I2S_Init+0x278>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_I2S_Init+0x24c>
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_I2S_Init+0x27c>)
 80029c2:	e001      	b.n	80029c8 <HAL_I2S_Init+0x250>
 80029c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c8:	897a      	ldrh	r2, [r7, #10]
 80029ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08002aef 	.word	0x08002aef
 80029e8:	cccccccd 	.word	0xcccccccd
 80029ec:	08002c05 	.word	0x08002c05
 80029f0:	40003800 	.word	0x40003800
 80029f4:	40003400 	.word	0x40003400

080029f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb8 	bl	80029f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10e      	bne.n	8002ae6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ad6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff93 	bl	8002a0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d13a      	bne.n	8002b80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d109      	bne.n	8002b28 <I2S_IRQHandler+0x3a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d102      	bne.n	8002b28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffb4 	bl	8002a90 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d126      	bne.n	8002b80 <I2S_IRQHandler+0x92>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d11f      	bne.n	8002b80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff50 	bl	8002a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d136      	bne.n	8002bfa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d109      	bne.n	8002baa <I2S_IRQHandler+0xbc>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d102      	bne.n	8002baa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff45 	bl	8002a34 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d122      	bne.n	8002bfa <I2S_IRQHandler+0x10c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d11b      	bne.n	8002bfa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bd0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff13 	bl	8002a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4aa2      	ldr	r2, [pc, #648]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c1e:	4ba2      	ldr	r3, [pc, #648]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c20:	e001      	b.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a9b      	ldr	r2, [pc, #620]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c3e:	e001      	b.n	8002c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c50:	d004      	beq.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8099 	bne.w	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d107      	bne.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f925 	bl	8002ec0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9c8 	bl	8003020 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d13a      	bne.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d035      	beq.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cae:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cb0:	e001      	b.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4979      	ldr	r1, [pc, #484]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cbe:	428b      	cmp	r3, r1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cc2:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cc4:	e001      	b.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f043 0202 	orr.w	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fe88 	bl	8002a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	f040 80be 	bne.w	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80b8 	beq.w	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a59      	ldr	r2, [pc, #356]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d44:	e001      	b.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4954      	ldr	r1, [pc, #336]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d52:	428b      	cmp	r3, r1
 8002d54:	d101      	bne.n	8002d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d56:	4b54      	ldr	r3, [pc, #336]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d58:	e001      	b.n	8002d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fe4a 	bl	8002a20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d8c:	e084      	b.n	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d107      	bne.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8be 	bl	8002f24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8fd 	bl	8002fbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d12f      	bne.n	8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02a      	beq.n	8002e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002de4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002df2:	e001      	b.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4929      	ldr	r1, [pc, #164]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e00:	428b      	cmp	r3, r1
 8002e02:	d101      	bne.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e06:	e001      	b.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fdfa 	bl	8002a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d131      	bne.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02c      	beq.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e4c:	e001      	b.n	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4912      	ldr	r1, [pc, #72]	; (8002ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e5a:	428b      	cmp	r3, r1
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e60:	e001      	b.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e7a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff fdc5 	bl	8002a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e96:	e000      	b.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e98:	bf00      	nop
}
 8002e9a:	bf00      	nop
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40003800 	.word	0x40003800
 8002ea8:	40003400 	.word	0x40003400

08002eac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c99      	adds	r1, r3, #2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6251      	str	r1, [r2, #36]	; 0x24
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffc9 	bl	8002eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c99      	adds	r1, r3, #2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6251      	str	r1, [r2, #36]	; 0x24
 8002f36:	8819      	ldrh	r1, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <I2SEx_TxISR_I2SExt+0x22>
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f44:	e001      	b.n	8002f4a <I2SEx_TxISR_I2SExt+0x26>
 8002f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d121      	bne.n	8002faa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <I2SEx_TxISR_I2SExt+0x50>
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f72:	e001      	b.n	8002f78 <I2SEx_TxISR_I2SExt+0x54>
 8002f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	490d      	ldr	r1, [pc, #52]	; (8002fb4 <I2SEx_TxISR_I2SExt+0x90>)
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d101      	bne.n	8002f88 <I2SEx_TxISR_I2SExt+0x64>
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <I2SEx_TxISR_I2SExt+0x94>)
 8002f86:	e001      	b.n	8002f8c <I2SEx_TxISR_I2SExt+0x68>
 8002f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff81 	bl	8002eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40003800 	.word	0x40003800
 8002fb8:	40003400 	.word	0x40003400

08002fbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68d8      	ldr	r0, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	1c99      	adds	r1, r3, #2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fd4:	b282      	uxth	r2, r0
 8002fd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d113      	bne.n	8003018 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ffe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff4a 	bl	8002eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <I2SEx_RxISR_I2SExt+0x90>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x16>
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <I2SEx_RxISR_I2SExt+0x94>)
 8003034:	e001      	b.n	800303a <I2SEx_RxISR_I2SExt+0x1a>
 8003036:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800303a:	68d8      	ldr	r0, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	1c99      	adds	r1, r3, #2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003046:	b282      	uxth	r2, r0
 8003048:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d121      	bne.n	80030a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <I2SEx_RxISR_I2SExt+0x90>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <I2SEx_RxISR_I2SExt+0x50>
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <I2SEx_RxISR_I2SExt+0x94>)
 800306e:	e001      	b.n	8003074 <I2SEx_RxISR_I2SExt+0x54>
 8003070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	490d      	ldr	r1, [pc, #52]	; (80030b0 <I2SEx_RxISR_I2SExt+0x90>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d101      	bne.n	8003084 <I2SEx_RxISR_I2SExt+0x64>
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <I2SEx_RxISR_I2SExt+0x94>)
 8003082:	e001      	b.n	8003088 <I2SEx_RxISR_I2SExt+0x68>
 8003084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800308c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff03 	bl	8002eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40003800 	.word	0x40003800
 80030b4:	40003400 	.word	0x40003400

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e22d      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d075      	beq.n	80031c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	4ba3      	ldr	r3, [pc, #652]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00c      	beq.n	80030fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e2:	4ba0      	ldr	r3, [pc, #640]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d112      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b9d      	ldr	r3, [pc, #628]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fa:	d10b      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	4b99      	ldr	r3, [pc, #612]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d05b      	beq.n	80031c0 <HAL_RCC_OscConfig+0x108>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d157      	bne.n	80031c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e208      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x74>
 800311e:	4b91      	ldr	r3, [pc, #580]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a90      	ldr	r2, [pc, #576]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0xb0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x98>
 8003136:	4b8b      	ldr	r3, [pc, #556]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a8a      	ldr	r2, [pc, #552]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b88      	ldr	r3, [pc, #544]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a87      	ldr	r2, [pc, #540]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0xb0>
 8003150:	4b84      	ldr	r3, [pc, #528]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a83      	ldr	r2, [pc, #524]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b81      	ldr	r3, [pc, #516]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a80      	ldr	r2, [pc, #512]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd fa64 	bl	800063c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003178:	f7fd fa60 	bl	800063c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1cd      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xc0>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fa50 	bl	800063c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fa4c 	bl	800063c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1b9      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	4b6c      	ldr	r3, [pc, #432]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0xe8>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d063      	beq.n	8003296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	4b5c      	ldr	r3, [pc, #368]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_RCC_OscConfig+0x152>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e18d      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b56      	ldr	r3, [pc, #344]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4952      	ldr	r1, [pc, #328]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	e03a      	b.n	8003296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003228:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCC_OscConfig+0x2b0>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd fa05 	bl	800063c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003236:	f7fd fa01 	bl	800063c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e16e      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4940      	ldr	r1, [pc, #256]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326a:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_OscConfig+0x2b0>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd f9e4 	bl	800063c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003278:	f7fd f9e0 	bl	800063c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e14d      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d030      	beq.n	8003304 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_OscConfig+0x2b4>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fd f9c4 	bl	800063c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fd f9c0 	bl	800063c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e12d      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	4b26      	ldr	r3, [pc, #152]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x200>
 80032d6:	e015      	b.n	8003304 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_OscConfig+0x2b4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fd f9ad 	bl	800063c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e6:	f7fd f9a9 	bl	800063c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e116      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a0 	beq.w	8003452 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x2b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d121      	bne.n	8003392 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCC_OscConfig+0x2b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HAL_RCC_OscConfig+0x2b8>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fd f96f 	bl	800063c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e011      	b.n	8003386 <HAL_RCC_OscConfig+0x2ce>
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	42470000 	.word	0x42470000
 800336c:	42470e80 	.word	0x42470e80
 8003370:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fd f962 	bl	800063c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0cf      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003386:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x478>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2f0>
 800339a:	4b66      	ldr	r3, [pc, #408]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a65      	ldr	r2, [pc, #404]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x32a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x312>
 80033b0:	4b60      	ldr	r3, [pc, #384]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a5f      	ldr	r2, [pc, #380]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a5c      	ldr	r2, [pc, #368]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x32a>
 80033ca:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a59      	ldr	r2, [pc, #356]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a56      	ldr	r2, [pc, #344]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fd f927 	bl	800063c <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd f923 	bl	800063c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e08e      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x33a>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fd f911 	bl	800063c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fd f90d 	bl	800063c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e078      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d064      	beq.n	8003524 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	d05c      	beq.n	8003520 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d141      	bne.n	80034f2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b32      	ldr	r3, [pc, #200]	; (8003538 <HAL_RCC_OscConfig+0x480>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fd f8e2 	bl	800063c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd f8de 	bl	800063c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e04b      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b29      	ldr	r3, [pc, #164]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	491d      	ldr	r1, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c4:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_RCC_OscConfig+0x480>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fd f8b7 	bl	800063c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fd f8b3 	bl	800063c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e020      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x41a>
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_RCC_OscConfig+0x480>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fd f8a0 	bl	800063c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd f89c 	bl	800063c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e009      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_RCC_OscConfig+0x47c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x448>
 800351e:	e001      	b.n	8003524 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40007000 	.word	0x40007000
 8003534:	40023800 	.word	0x40023800
 8003538:	42470060 	.word	0x42470060

0800353c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0ca      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003550:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d90c      	bls.n	8003578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b6      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a57      	ldr	r2, [pc, #348]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a8:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a51      	ldr	r2, [pc, #324]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b4f      	ldr	r3, [pc, #316]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	494c      	ldr	r1, [pc, #304]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d044      	beq.n	800365c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d119      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07d      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	4b3e      	ldr	r3, [pc, #248]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e06d      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e065      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361a:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4933      	ldr	r1, [pc, #204]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800362c:	f7fd f806 	bl	800063c <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fd f802 	bl	800063c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e04d      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 020c 	and.w	r2, r3, #12
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	429a      	cmp	r2, r3
 800365a:	d1eb      	bne.n	8003634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCC_ClockConfig+0x1b4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d20c      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCC_ClockConfig+0x1b4>)
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e030      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4915      	ldr	r1, [pc, #84]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490d      	ldr	r1, [pc, #52]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c2:	f000 f81d 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 80036c6:	4601      	mov	r1, r0
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	fa21 f303 	lsr.w	r3, r1, r3
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80036de:	200f      	movs	r0, #15
 80036e0:	f7fc ff68 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	0800be00 	.word	0x0800be00
 80036fc:	2000002c 	.word	0x2000002c

08003700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d007      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x32>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d008      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x38>
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 80b4 	bne.w	8003894 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b5e      	ldr	r3, [pc, #376]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800372e:	60bb      	str	r3, [r7, #8]
       break;
 8003730:	e0b3      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003732:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003734:	60bb      	str	r3, [r7, #8]
      break;
 8003736:	e0b0      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003738:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003742:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04a      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374e:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	f04f 0400 	mov.w	r4, #0
 8003758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	ea03 0501 	and.w	r5, r3, r1
 8003764:	ea04 0602 	and.w	r6, r4, r2
 8003768:	4629      	mov	r1, r5
 800376a:	4632      	mov	r2, r6
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	0154      	lsls	r4, r2, #5
 8003776:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800377a:	014b      	lsls	r3, r1, #5
 800377c:	4619      	mov	r1, r3
 800377e:	4622      	mov	r2, r4
 8003780:	1b49      	subs	r1, r1, r5
 8003782:	eb62 0206 	sbc.w	r2, r2, r6
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	0194      	lsls	r4, r2, #6
 8003790:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003794:	018b      	lsls	r3, r1, #6
 8003796:	1a5b      	subs	r3, r3, r1
 8003798:	eb64 0402 	sbc.w	r4, r4, r2
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	00e2      	lsls	r2, r4, #3
 80037a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037aa:	00d9      	lsls	r1, r3, #3
 80037ac:	460b      	mov	r3, r1
 80037ae:	4614      	mov	r4, r2
 80037b0:	195b      	adds	r3, r3, r5
 80037b2:	eb44 0406 	adc.w	r4, r4, r6
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	0262      	lsls	r2, r4, #9
 80037c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037c4:	0259      	lsls	r1, r3, #9
 80037c6:	460b      	mov	r3, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	4621      	mov	r1, r4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f04f 0400 	mov.w	r4, #0
 80037d4:	461a      	mov	r2, r3
 80037d6:	4623      	mov	r3, r4
 80037d8:	f7fc fd4a 	bl	8000270 <__aeabi_uldivmod>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e049      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e4:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	ea03 0501 	and.w	r5, r3, r1
 80037fa:	ea04 0602 	and.w	r6, r4, r2
 80037fe:	4629      	mov	r1, r5
 8003800:	4632      	mov	r2, r6
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f04f 0400 	mov.w	r4, #0
 800380a:	0154      	lsls	r4, r2, #5
 800380c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003810:	014b      	lsls	r3, r1, #5
 8003812:	4619      	mov	r1, r3
 8003814:	4622      	mov	r2, r4
 8003816:	1b49      	subs	r1, r1, r5
 8003818:	eb62 0206 	sbc.w	r2, r2, r6
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	f04f 0400 	mov.w	r4, #0
 8003824:	0194      	lsls	r4, r2, #6
 8003826:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	1a5b      	subs	r3, r3, r1
 800382e:	eb64 0402 	sbc.w	r4, r4, r2
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003840:	00d9      	lsls	r1, r3, #3
 8003842:	460b      	mov	r3, r1
 8003844:	4614      	mov	r4, r2
 8003846:	195b      	adds	r3, r3, r5
 8003848:	eb44 0406 	adc.w	r4, r4, r6
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	02a2      	lsls	r2, r4, #10
 8003856:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800385a:	0299      	lsls	r1, r3, #10
 800385c:	460b      	mov	r3, r1
 800385e:	4614      	mov	r4, r2
 8003860:	4618      	mov	r0, r3
 8003862:	4621      	mov	r1, r4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f04f 0400 	mov.w	r4, #0
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	f7fc fcff 	bl	8000270 <__aeabi_uldivmod>
 8003872:	4603      	mov	r3, r0
 8003874:	460c      	mov	r4, r1
 8003876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	3301      	adds	r3, #1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	60bb      	str	r3, [r7, #8]
      break;
 8003892:	e002      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003896:	60bb      	str	r3, [r7, #8]
      break;
 8003898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389a:	68bb      	ldr	r3, [r7, #8]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a4:	40023800 	.word	0x40023800
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	007a1200 	.word	0x007a1200

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	2000002c 	.word	0x2000002c

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4601      	mov	r1, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4a03      	ldr	r2, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	0800be10 	.word	0x0800be10

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4601      	mov	r1, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4a03      	ldr	r2, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	0800be10 	.word	0x0800be10

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800393c:	2b00      	cmp	r3, #0
 800393e:	d035      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003940:	4b62      	ldr	r3, [pc, #392]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003946:	f7fc fe79 	bl	800063c <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800394e:	f7fc fe75 	bl	800063c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0b0      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003960:	4b5b      	ldr	r3, [pc, #364]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	019a      	lsls	r2, r3, #6
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	071b      	lsls	r3, r3, #28
 8003978:	4955      	ldr	r1, [pc, #340]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003980:	4b52      	ldr	r3, [pc, #328]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003986:	f7fc fe59 	bl	800063c <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800398e:	f7fc fe55 	bl	800063c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e090      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8083 	beq.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b44      	ldr	r3, [pc, #272]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a43      	ldr	r2, [pc, #268]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3e      	ldr	r2, [pc, #248]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039e2:	f7fc fe2b 	bl	800063c <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ea:	f7fc fe27 	bl	800063c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e062      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a08:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d028      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a30:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d114      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fc fdf5 	bl	800063c <HAL_GetTick>
 8003a52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fc fdf1 	bl	800063c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e02a      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a84:	d10d      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	490d      	ldr	r1, [pc, #52]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]
 8003aa0:	e005      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003aac:	6093      	str	r3, [r2, #8]
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aba:	4905      	ldr	r1, [pc, #20]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	42470068 	.word	0x42470068
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	42470e40 	.word	0x42470e40

08003adc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d13d      	bne.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b02:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d12f      	bne.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b10:	617b      	str	r3, [r7, #20]
          break;
 8003b12:	e02f      	b.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b20:	d108      	bne.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e007      	b.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	0f1b      	lsrs	r3, r3, #28
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
          break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
          break;
 8003b72:	bf00      	nop
        }
      }
      break;
 8003b74:	bf00      	nop
    }
  }
  return frequency;
 8003b76:	697b      	ldr	r3, [r7, #20]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40023800 	.word	0x40023800
 8003b88:	00bb8000 	.word	0x00bb8000
 8003b8c:	007a1200 	.word	0x007a1200
 8003b90:	00f42400 	.word	0x00f42400

08003b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e056      	b.n	8003c54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f006 ffa1 	bl	800ab08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bdc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	ea42 0103 	orr.w	r1, r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 0104 	and.w	r1, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e03f      	b.n	8003cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f006 ff88 	bl	800ab98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f90b 	bl	8003ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	f040 8083 	bne.w	8003e1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Transmit+0x2e>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e07b      	b.n	8003e20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Transmit+0x40>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e074      	b.n	8003e20 <HAL_UART_Transmit+0x12a>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2221      	movs	r2, #33	; 0x21
 8003d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d4c:	f7fc fc76 	bl	800063c <HAL_GetTick>
 8003d50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d5e:	e042      	b.n	8003de6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d122      	bne.n	8003dbe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f850 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e046      	b.n	8003e20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3302      	adds	r3, #2
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	e017      	b.n	8003de6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3301      	adds	r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	e013      	b.n	8003de6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f82d 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e023      	b.n	8003e20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	60ba      	str	r2, [r7, #8]
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1b7      	bne.n	8003d60 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2140      	movs	r1, #64	; 0x40
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f814 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e00a      	b.n	8003e20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	e02c      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d028      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e48:	f7fc fbf8 	bl	800063c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d21d      	bcs.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e00f      	b.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d0c3      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003efc:	f023 030c 	bic.w	r3, r3, #12
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f28:	f040 80e4 	bne.w	80040f4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4aab      	ldr	r2, [pc, #684]	; (80041e0 <UART_SetConfig+0x324>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <UART_SetConfig+0x84>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4aaa      	ldr	r2, [pc, #680]	; (80041e4 <UART_SetConfig+0x328>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d16c      	bne.n	800401a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f40:	f7ff fcd6 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009a      	lsls	r2, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	4aa3      	ldr	r2, [pc, #652]	; (80041e8 <UART_SetConfig+0x32c>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	011c      	lsls	r4, r3, #4
 8003f64:	f7ff fcc4 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f7e:	f7ff fcb7 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	4a93      	ldr	r2, [pc, #588]	; (80041e8 <UART_SetConfig+0x32c>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2264      	movs	r2, #100	; 0x64
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	1aeb      	subs	r3, r5, r3
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	3332      	adds	r3, #50	; 0x32
 8003fac:	4a8e      	ldr	r2, [pc, #568]	; (80041e8 <UART_SetConfig+0x32c>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fba:	441c      	add	r4, r3
 8003fbc:	f7ff fc98 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009a      	lsls	r2, r3, #2
 8003fca:	441a      	add	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fd6:	f7ff fc8b 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009a      	lsls	r2, r3, #2
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	4a7d      	ldr	r2, [pc, #500]	; (80041e8 <UART_SetConfig+0x32c>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2264      	movs	r2, #100	; 0x64
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	1aeb      	subs	r3, r5, r3
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	3332      	adds	r3, #50	; 0x32
 8004004:	4a78      	ldr	r2, [pc, #480]	; (80041e8 <UART_SetConfig+0x32c>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	f003 0207 	and.w	r2, r3, #7
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4422      	add	r2, r4
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	e154      	b.n	80042c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800401a:	f7ff fc55 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800401e:	4602      	mov	r2, r0
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009a      	lsls	r2, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	4a6c      	ldr	r2, [pc, #432]	; (80041e8 <UART_SetConfig+0x32c>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	011c      	lsls	r4, r3, #4
 800403e:	f7ff fc43 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004042:	4602      	mov	r2, r0
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fbb2 f5f3 	udiv	r5, r2, r3
 8004058:	f7ff fc36 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800405c:	4602      	mov	r2, r0
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	4a5d      	ldr	r2, [pc, #372]	; (80041e8 <UART_SetConfig+0x32c>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	2264      	movs	r2, #100	; 0x64
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	1aeb      	subs	r3, r5, r3
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	3332      	adds	r3, #50	; 0x32
 8004086:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <UART_SetConfig+0x32c>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004094:	441c      	add	r4, r3
 8004096:	f7ff fc17 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800409a:	4602      	mov	r2, r0
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80040b0:	f7ff fc0a 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009a      	lsls	r2, r3, #2
 80040be:	441a      	add	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	4a47      	ldr	r2, [pc, #284]	; (80041e8 <UART_SetConfig+0x32c>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	2264      	movs	r2, #100	; 0x64
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	1aeb      	subs	r3, r5, r3
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	3332      	adds	r3, #50	; 0x32
 80040de:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <UART_SetConfig+0x32c>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	f003 0207 	and.w	r2, r3, #7
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4422      	add	r2, r4
 80040f0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80040f2:	e0e7      	b.n	80042c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a39      	ldr	r2, [pc, #228]	; (80041e0 <UART_SetConfig+0x324>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <UART_SetConfig+0x24c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a38      	ldr	r2, [pc, #224]	; (80041e4 <UART_SetConfig+0x328>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d171      	bne.n	80041ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004108:	f7ff fbf2 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 800410c:	4602      	mov	r2, r0
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009a      	lsls	r2, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	4a31      	ldr	r2, [pc, #196]	; (80041e8 <UART_SetConfig+0x32c>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	011c      	lsls	r4, r3, #4
 800412c:	f7ff fbe0 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004130:	4602      	mov	r2, r0
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009a      	lsls	r2, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fbb2 f5f3 	udiv	r5, r2, r3
 8004146:	f7ff fbd3 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 800414a:	4602      	mov	r2, r0
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <UART_SetConfig+0x32c>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2264      	movs	r2, #100	; 0x64
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	1aeb      	subs	r3, r5, r3
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	3332      	adds	r3, #50	; 0x32
 8004174:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <UART_SetConfig+0x32c>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004180:	441c      	add	r4, r3
 8004182:	f7ff fbb5 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004186:	4602      	mov	r2, r0
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	fbb2 f5f3 	udiv	r5, r2, r3
 800419c:	f7ff fba8 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009a      	lsls	r2, r3, #2
 80041aa:	441a      	add	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <UART_SetConfig+0x32c>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	2264      	movs	r2, #100	; 0x64
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	1aeb      	subs	r3, r5, r3
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	3332      	adds	r3, #50	; 0x32
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <UART_SetConfig+0x32c>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4422      	add	r2, r4
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	e071      	b.n	80042c4 <UART_SetConfig+0x408>
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40011400 	.word	0x40011400
 80041e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041ec:	f7ff fb6c 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	4a31      	ldr	r2, [pc, #196]	; (80042cc <UART_SetConfig+0x410>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	011c      	lsls	r4, r3, #4
 8004210:	f7ff fb5a 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004214:	4602      	mov	r2, r0
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	fbb2 f5f3 	udiv	r5, r2, r3
 800422a:	f7ff fb4d 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800422e:	4602      	mov	r2, r0
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009a      	lsls	r2, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	4a21      	ldr	r2, [pc, #132]	; (80042cc <UART_SetConfig+0x410>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2264      	movs	r2, #100	; 0x64
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	1aeb      	subs	r3, r5, r3
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	3332      	adds	r3, #50	; 0x32
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <UART_SetConfig+0x410>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004264:	441c      	add	r4, r3
 8004266:	f7ff fb2f 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800426a:	4602      	mov	r2, r0
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004280:	f7ff fb22 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004284:	4602      	mov	r2, r0
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009a      	lsls	r2, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <UART_SetConfig+0x410>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2264      	movs	r2, #100	; 0x64
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	1aeb      	subs	r3, r5, r3
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <UART_SetConfig+0x410>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4422      	add	r2, r4
 80042c0:	609a      	str	r2, [r3, #8]
}
 80042c2:	e7ff      	b.n	80042c4 <UART_SetConfig+0x408>
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bdb0      	pop	{r4, r5, r7, pc}
 80042cc:	51eb851f 	.word	0x51eb851f

080042d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042d0:	b084      	sub	sp, #16
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	f107 001c 	add.w	r0, r7, #28
 80042de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d122      	bne.n	800432e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f94a 	bl	80045bc <USB_CoreReset>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	e01a      	b.n	8004364 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f93e 	bl	80045bc <USB_CoreReset>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
 8004356:	e005      	b.n	8004364 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10b      	bne.n	8004382 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f043 0206 	orr.w	r2, r3, #6
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800438e:	b004      	add	sp, #16
 8004390:	4770      	bx	lr

08004392 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f043 0201 	orr.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 0201 	bic.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e00b      	b.n	800441a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e001      	b.n	800441a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e003      	b.n	8004422 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800441a:	2032      	movs	r0, #50	; 0x32
 800441c:	f7fc f91a 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <USB_FlushTxFifo+0x48>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b20      	cmp	r3, #32
 8004462:	d0f0      	beq.n	8004446 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	00030d40 	.word	0x00030d40

08004478 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2210      	movs	r2, #16
 8004488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <USB_FlushRxFifo+0x40>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e006      	b.n	80044aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d0f0      	beq.n	800448a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	00030d40 	.word	0x00030d40

080044bc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	460b      	mov	r3, r1
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80044da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11a      	bne.n	8004518 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044e2:	88bb      	ldrh	r3, [r7, #4]
 80044e4:	3303      	adds	r3, #3
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e00f      	b.n	8004510 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	031a      	lsls	r2, r3, #12
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fc:	461a      	mov	r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3304      	adds	r3, #4
 8004508:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	3301      	adds	r3, #1
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	429a      	cmp	r2, r3
 8004516:	d3eb      	bcc.n	80044f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004526:	b480      	push	{r7}
 8004528:	b089      	sub	sp, #36	; 0x24
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	4613      	mov	r3, r2
 8004532:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	3303      	adds	r3, #3
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e00b      	b.n	8004562 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	601a      	str	r2, [r3, #0]
    pDest++;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3304      	adds	r3, #4
 800455a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	3301      	adds	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	429a      	cmp	r2, r3
 8004568:	d3ef      	bcc.n	800454a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800456a:	69fb      	ldr	r3, [r7, #28]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3724      	adds	r7, #36	; 0x24
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0301 	and.w	r3, r3, #1
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <USB_CoreReset+0x64>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e01b      	b.n	8004612 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	daf2      	bge.n	80045c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <USB_CoreReset+0x64>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e006      	b.n	8004612 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d0f0      	beq.n	80045f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	00030d40 	.word	0x00030d40

08004624 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004624:	b084      	sub	sp, #16
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	f107 001c 	add.w	r0, r7, #28
 8004632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	2b03      	cmp	r3, #3
 800467a:	d10a      	bne.n	8004692 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800468a:	f043 0304 	orr.w	r3, r3, #4
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e014      	b.n	80046bc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e009      	b.n	80046bc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80046bc:	2110      	movs	r1, #16
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff feb4 	bl	800442c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fed7 	bl	8004478 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e015      	b.n	80046fc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
 80046e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f0:	461a      	mov	r2, r3
 80046f2:	2300      	movs	r3, #0
 80046f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d3e5      	bcc.n	80046d0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004704:	2101      	movs	r1, #1
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8ac 	bl	8004864 <USB_DriveVbus>

  HAL_Delay(200U);
 800470c:	20c8      	movs	r0, #200	; 0xc8
 800470e:	f7fb ffa1 	bl	8000654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f04f 32ff 	mov.w	r2, #4294967295
 800471e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <USB_HostInit+0x164>)
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a13      	ldr	r2, [pc, #76]	; (800478c <USB_HostInit+0x168>)
 800473e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004742:	e009      	b.n	8004758 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2280      	movs	r2, #128	; 0x80
 8004748:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a10      	ldr	r2, [pc, #64]	; (8004790 <USB_HostInit+0x16c>)
 800474e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <USB_HostInit+0x170>)
 8004754:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <USB_HostInit+0x174>)
 8004770:	4313      	orrs	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004782:	b004      	add	sp, #16
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	01000200 	.word	0x01000200
 800478c:	00e00300 	.word	0x00e00300
 8004790:	00600080 	.word	0x00600080
 8004794:	004000e0 	.word	0x004000e0
 8004798:	a3200008 	.word	0xa3200008

0800479c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e4:	461a      	mov	r2, r3
 80047e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80047ea:	6053      	str	r3, [r2, #4]
 80047ec:	e009      	b.n	8004802 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d106      	bne.n	8004802 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047fa:	461a      	mov	r2, r3
 80047fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8004800:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004830:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800483a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004840:	2064      	movs	r0, #100	; 0x64
 8004842:	f7fb ff07 	bl	8000654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800484e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004852:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004854:	200a      	movs	r0, #10
 8004856:	f7fb fefd 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004888:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <USB_DriveVbus+0x44>
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d106      	bne.n	80048a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b2:	d109      	bne.n	80048c8 <USB_DriveVbus+0x64>
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	0c5b      	lsrs	r3, r3, #17
 80048f4:	f003 0303 	and.w	r3, r3, #3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	b29b      	uxth	r3, r3
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	70fb      	strb	r3, [r7, #3]
 800493a:	460b      	mov	r3, r1
 800493c:	70bb      	strb	r3, [r7, #2]
 800493e:	4613      	mov	r3, r2
 8004940:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004956:	461a      	mov	r2, r3
 8004958:	f04f 33ff 	mov.w	r3, #4294967295
 800495c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800495e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004962:	2b03      	cmp	r3, #3
 8004964:	d87e      	bhi.n	8004a64 <USB_HC_Init+0x13c>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <USB_HC_Init+0x44>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	0800497d 	.word	0x0800497d
 8004970:	08004a27 	.word	0x08004a27
 8004974:	0800497d 	.word	0x0800497d
 8004978:	080049e9 	.word	0x080049e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004988:	461a      	mov	r2, r3
 800498a:	f240 439d 	movw	r3, #1181	; 0x49d
 800498e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004990:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004994:	2b00      	cmp	r3, #0
 8004996:	da10      	bge.n	80049ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80049b8:	e057      	b.n	8004a6a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d051      	beq.n	8004a6a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049e4:	60d3      	str	r3, [r2, #12]
      break;
 80049e6:	e040      	b.n	8004a6a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	461a      	mov	r2, r3
 80049f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80049fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da34      	bge.n	8004a6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a24:	e023      	b.n	8004a6e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a32:	461a      	mov	r2, r3
 8004a34:	f240 2325 	movw	r3, #549	; 0x225
 8004a38:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da17      	bge.n	8004a72 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a5c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004a60:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004a62:	e006      	b.n	8004a72 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
      break;
 8004a68:	e004      	b.n	8004a74 <USB_HC_Init+0x14c>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e002      	b.n	8004a74 <USB_HC_Init+0x14c>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <USB_HC_Init+0x14c>
      break;
 8004a72:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004a9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da03      	bge.n	8004aae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	e001      	b.n	8004ab2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d103      	bne.n	8004ac2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e001      	b.n	8004ac6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ac6:	787b      	ldrb	r3, [r7, #1]
 8004ac8:	059b      	lsls	r3, r3, #22
 8004aca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ace:	78bb      	ldrb	r3, [r7, #2]
 8004ad0:	02db      	lsls	r3, r3, #11
 8004ad2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ad6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004adc:	049b      	lsls	r3, r3, #18
 8004ade:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ae2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ae4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004aea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	0159      	lsls	r1, r3, #5
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	440b      	add	r3, r1
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b02:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004b04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d10f      	bne.n	8004b2c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b2a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08c      	sub	sp, #48	; 0x30
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b58:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d028      	beq.n	8004bb8 <USB_HC_StartXfer+0x7c>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	791b      	ldrb	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d124      	bne.n	8004bb8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <USB_HC_StartXfer+0x50>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	795b      	ldrb	r3, [r3, #5]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d107      	bne.n	8004b8c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	4619      	mov	r1, r3
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa2e 	bl	8004fe4 <USB_DoPing>
      return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e112      	b.n	8004db2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d112      	bne.n	8004bb8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004bb0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d018      	beq.n	8004bf2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	8912      	ldrh	r2, [r2, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	8912      	ldrh	r2, [r2, #8]
 8004bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004bd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bd8:	8b7b      	ldrh	r3, [r7, #26]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90b      	bls.n	8004bf6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004bde:	8b7b      	ldrh	r3, [r7, #26]
 8004be0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	8912      	ldrh	r2, [r2, #8]
 8004be8:	fb02 f203 	mul.w	r2, r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	611a      	str	r2, [r3, #16]
 8004bf0:	e001      	b.n	8004bf6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	78db      	ldrb	r3, [r3, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	8912      	ldrh	r2, [r2, #8]
 8004c04:	fb02 f203 	mul.w	r2, r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c16:	04d9      	lsls	r1, r3, #19
 8004c18:	4b68      	ldr	r3, [pc, #416]	; (8004dbc <USB_HC_StartXfer+0x280>)
 8004c1a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c1c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	7a9b      	ldrb	r3, [r3, #10]
 8004c22:	075b      	lsls	r3, r3, #29
 8004c24:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	0148      	lsls	r0, r1, #5
 8004c2c:	6a39      	ldr	r1, [r7, #32]
 8004c2e:	4401      	add	r1, r0
 8004c30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c34:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c36:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68d9      	ldr	r1, [r3, #12]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	460a      	mov	r2, r1
 8004c50:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c88:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	7e7b      	ldrb	r3, [r7, #25]
 8004c9a:	075b      	lsls	r3, r3, #29
 8004c9c:	69f9      	ldr	r1, [r7, #28]
 8004c9e:	0148      	lsls	r0, r1, #5
 8004ca0:	6a39      	ldr	r1, [r7, #32]
 8004ca2:	4401      	add	r1, r0
 8004ca4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a41      	ldr	r2, [pc, #260]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cbc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cbe:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cc6:	4a3e      	ldr	r2, [pc, #248]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cc8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	78db      	ldrb	r3, [r3, #3]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	4a39      	ldr	r2, [pc, #228]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e005      	b.n	8004cec <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ce0:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ce8:	4a35      	ldr	r2, [pc, #212]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cea:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf4:	4a32      	ldr	r2, [pc, #200]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004cf6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <USB_HC_StartXfer+0x284>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d14e      	bne.n	8004db0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	78db      	ldrb	r3, [r3, #3]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d14a      	bne.n	8004db0 <USB_HC_StartXfer+0x274>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d046      	beq.n	8004db0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	79db      	ldrb	r3, [r3, #7]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d830      	bhi.n	8004d8c <USB_HC_StartXfer+0x250>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <USB_HC_StartXfer+0x1f4>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d41 	.word	0x08004d41
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d41 	.word	0x08004d41
 8004d3c:	08004d65 	.word	0x08004d65
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	3303      	adds	r3, #3
 8004d46:	089b      	lsrs	r3, r3, #2
 8004d48:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004d4a:	8afa      	ldrh	r2, [r7, #22]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d91c      	bls.n	8004d90 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d62:	e015      	b.n	8004d90 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	3303      	adds	r3, #3
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d6e:	8afa      	ldrh	r2, [r7, #22]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d90a      	bls.n	8004d94 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d8a:	e003      	b.n	8004d94 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <USB_HC_StartXfer+0x25a>
          break;
 8004d90:	bf00      	nop
 8004d92:	e000      	b.n	8004d96 <USB_HC_StartXfer+0x25a>
          break;
 8004d94:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	68d9      	ldr	r1, [r3, #12]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785a      	ldrb	r2, [r3, #1]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	b298      	uxth	r0, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fb86 	bl	80044bc <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3728      	adds	r7, #40	; 0x28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	1ff80000 	.word	0x1ff80000
 8004dc0:	200000b0 	.word	0x200000b0

08004dc4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	b29b      	uxth	r3, r3
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0c9b      	lsrs	r3, r3, #18
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <USB_HC_Halt+0x3a>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d16c      	bne.n	8004efa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d143      	bne.n	8004ed4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eaa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb8:	d81d      	bhi.n	8004ef6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed0:	d0ec      	beq.n	8004eac <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ed2:	e080      	b.n	8004fd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ef4:	e06f      	b.n	8004fd6 <USB_HC_Halt+0x1f0>
          break;
 8004ef6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ef8:	e06d      	b.n	8004fd6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d143      	bne.n	8004fb2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f96:	d81d      	bhi.n	8004fd4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fae:	d0ec      	beq.n	8004f8a <USB_HC_Halt+0x1a4>
 8004fb0:	e011      	b.n	8004fd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e000      	b.n	8004fd6 <USB_HC_Halt+0x1f0>
          break;
 8004fd4:	bf00      	nop
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	04da      	lsls	r2, r3, #19
 8005000:	4b15      	ldr	r3, [pc, #84]	; (8005058 <USB_DoPing+0x74>)
 8005002:	4013      	ands	r3, r2
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	440a      	add	r2, r1
 800500c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005014:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800502c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005034:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	1ff80000 	.word	0x1ff80000

0800505c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff f9a1 	bl	80043b4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005072:	2110      	movs	r1, #16
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff f9d9 	bl	800442c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff f9fc 	bl	8004478 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	e01f      	b.n	80050c6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800509c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	461a      	mov	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3301      	adds	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d9dc      	bls.n	8005086 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e034      	b.n	800513c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	461a      	mov	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3301      	adds	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005118:	d80c      	bhi.n	8005134 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005130:	d0ec      	beq.n	800510c <USB_StopHost+0xb0>
 8005132:	e000      	b.n	8005136 <USB_StopHost+0xda>
        break;
 8005134:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	d9c7      	bls.n	80050d2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005148:	461a      	mov	r2, r3
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff f91a 	bl	8004392 <USB_EnableGlobalInt>

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af04      	add	r7, sp, #16
 800516e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005170:	2302      	movs	r3, #2
 8005172:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005174:	2301      	movs	r3, #1
 8005176:	2202      	movs	r2, #2
 8005178:	2102      	movs	r1, #2
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fc8c 	bl	8005a98 <USBH_FindInterface>
 8005180:	4603      	mov	r3, r0
 8005182:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2bff      	cmp	r3, #255	; 0xff
 8005188:	f000 812a 	beq.w	80053e0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fc65 	bl	8005a60 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800519c:	2050      	movs	r0, #80	; 0x50
 800519e:	f006 f92d 	bl	800b3fc <malloc>
 80051a2:	4603      	mov	r3, r0
 80051a4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80051b0:	7bbb      	ldrb	r3, [r7, #14]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	211a      	movs	r1, #26
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	da15      	bge.n	80051f4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	211a      	movs	r1, #26
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	211a      	movs	r1, #26
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80051ee:	881a      	ldrh	r2, [r3, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 ff2f 	bl	800705e <USBH_AllocPipe>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	7819      	ldrb	r1, [r3, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	7858      	ldrb	r0, [r3, #1]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	8952      	ldrh	r2, [r2, #10]
 8005220:	9202      	str	r2, [sp, #8]
 8005222:	2203      	movs	r2, #3
 8005224:	9201      	str	r2, [sp, #4]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4623      	mov	r3, r4
 800522a:	4602      	mov	r2, r0
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 fee7 	bl	8007000 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f006 f804 	bl	800b248 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005240:	2300      	movs	r3, #0
 8005242:	2200      	movs	r2, #0
 8005244:	210a      	movs	r1, #10
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fc26 	bl	8005a98 <USBH_FindInterface>
 800524c:	4603      	mov	r3, r0
 800524e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	2bff      	cmp	r3, #255	; 0xff
 8005254:	f000 80c4 	beq.w	80053e0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005258:	7bbb      	ldrb	r3, [r7, #14]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	211a      	movs	r1, #26
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	4413      	add	r3, r2
 8005264:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b25b      	sxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	da16      	bge.n	800529e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	211a      	movs	r1, #26
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	211a      	movs	r1, #26
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	4413      	add	r3, r2
 8005292:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005296:	881a      	ldrh	r2, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	835a      	strh	r2, [r3, #26]
 800529c:	e015      	b.n	80052ca <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	211a      	movs	r1, #26
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	211a      	movs	r1, #26
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80052c4:	881a      	ldrh	r2, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	211a      	movs	r1, #26
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da16      	bge.n	8005310 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	211a      	movs	r1, #26
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	f203 3352 	addw	r3, r3, #850	; 0x352
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	211a      	movs	r1, #26
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	835a      	strh	r2, [r3, #26]
 800530e:	e015      	b.n	800533c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	211a      	movs	r1, #26
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005320:	781a      	ldrb	r2, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	211a      	movs	r1, #26
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	7b9b      	ldrb	r3, [r3, #14]
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fe8b 	bl	800705e <USBH_AllocPipe>
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	7bdb      	ldrb	r3, [r3, #15]
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fe81 	bl	800705e <USBH_AllocPipe>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	7b59      	ldrb	r1, [r3, #13]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	7b98      	ldrb	r0, [r3, #14]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	8b12      	ldrh	r2, [r2, #24]
 800537c:	9202      	str	r2, [sp, #8]
 800537e:	2202      	movs	r2, #2
 8005380:	9201      	str	r2, [sp, #4]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	4623      	mov	r3, r4
 8005386:	4602      	mov	r2, r0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f001 fe39 	bl	8007000 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	7b19      	ldrb	r1, [r3, #12]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	7bd8      	ldrb	r0, [r3, #15]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	8b52      	ldrh	r2, [r2, #26]
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	2202      	movs	r2, #2
 80053aa:	9201      	str	r2, [sp, #4]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4623      	mov	r3, r4
 80053b0:	4602      	mov	r2, r0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 fe24 	bl	8007000 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	7b5b      	ldrb	r3, [r3, #13]
 80053c4:	2200      	movs	r2, #0
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f005 ff3d 	bl	800b248 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	7b1b      	ldrb	r3, [r3, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f005 ff36 	bl	800b248 <USBH_LL_SetToggle>
      status = USBH_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd90      	pop	{r4, r7, pc}

080053ea <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fe17 	bl	800703e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fe3f 	bl	800709a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	7b1b      	ldrb	r3, [r3, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00e      	beq.n	8005448 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	7b1b      	ldrb	r3, [r3, #12]
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fe04 	bl	800703e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	7b1b      	ldrb	r3, [r3, #12]
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fe2c 	bl	800709a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	7b5b      	ldrb	r3, [r3, #13]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	7b5b      	ldrb	r3, [r3, #13]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 fdf1 	bl	800703e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	7b5b      	ldrb	r3, [r3, #13]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 fe19 	bl	800709a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	4618      	mov	r0, r3
 8005484:	f005 ffc2 	bl	800b40c <free>
    phost->pActiveClass->pData = 0U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80054a4:	2302      	movs	r3, #2
 80054a6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	3340      	adds	r3, #64	; 0x40
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f8b2 	bl	8005622 <GetLineCoding>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80054ce:	2102      	movs	r1, #2
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
  }
  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005500:	2b04      	cmp	r3, #4
 8005502:	d877      	bhi.n	80055f4 <USBH_CDC_Process+0x114>
 8005504:	a201      	add	r2, pc, #4	; (adr r2, 800550c <USBH_CDC_Process+0x2c>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005521 	.word	0x08005521
 8005510:	08005527 	.word	0x08005527
 8005514:	08005557 	.word	0x08005557
 8005518:	080055cb 	.word	0x080055cb
 800551c:	080055d9 	.word	0x080055d9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
    break;
 8005524:	e06d      	b.n	8005602 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f897 	bl	8005660 <SetLineCoding>
 8005532:	4603      	mov	r3, r0
 8005534:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005544:	e058      	b.n	80055f8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d055      	beq.n	80055f8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2204      	movs	r2, #4
 8005550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005554:	e050      	b.n	80055f8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	3340      	adds	r3, #64	; 0x40
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f860 	bl	8005622 <GetLineCoding>
 8005562:	4603      	mov	r3, r0
 8005564:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d126      	bne.n	80055ba <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557e:	791b      	ldrb	r3, [r3, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d13b      	bne.n	80055fc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005590:	429a      	cmp	r2, r3
 8005592:	d133      	bne.n	80055fc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d12b      	bne.n	80055fc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ac:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d124      	bne.n	80055fc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f984 	bl	80058c0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80055b8:	e020      	b.n	80055fc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d01d      	beq.n	80055fc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2204      	movs	r2, #4
 80055c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80055c8:	e018      	b.n	80055fc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f867 	bl	800569e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f8f8 	bl	80057c6 <CDC_ProcessReception>
    break;
 80055d6:	e014      	b.n	8005602 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fffa 	bl	80065d4 <USBH_ClrFeature>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80055f2:	e005      	b.n	8005600 <USBH_CDC_Process+0x120>

  default:
    break;
 80055f4:	bf00      	nop
 80055f6:	e004      	b.n	8005602 <USBH_CDC_Process+0x122>
    break;
 80055f8:	bf00      	nop
 80055fa:	e002      	b.n	8005602 <USBH_CDC_Process+0x122>
    break;
 80055fc:	bf00      	nop
 80055fe:	e000      	b.n	8005602 <USBH_CDC_Process+0x122>
    break;
 8005600:	bf00      	nop

  }

  return status;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	22a1      	movs	r2, #161	; 0xa1
 8005630:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2221      	movs	r2, #33	; 0x21
 8005636:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2207      	movs	r2, #7
 8005648:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2207      	movs	r2, #7
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 f99f 	bl	8006994 <USBH_CtlReq>
 8005656:	4603      	mov	r3, r0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2221      	movs	r2, #33	; 0x21
 800566e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2207      	movs	r2, #7
 8005686:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2207      	movs	r2, #7
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 f980 	bl	8006994 <USBH_CtlReq>
 8005694:	4603      	mov	r3, r0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af02      	add	r7, sp, #8
 80056a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d002      	beq.n	80056c4 <CDC_ProcessTransmission+0x26>
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d025      	beq.n	800570e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80056c2:	e07c      	b.n	80057be <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	8b12      	ldrh	r2, [r2, #24]
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d90c      	bls.n	80056ea <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	69d9      	ldr	r1, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8b1a      	ldrh	r2, [r3, #24]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	7b58      	ldrb	r0, [r3, #13]
 80056dc:	2301      	movs	r3, #1
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	4603      	mov	r3, r0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fc49 	bl	8006f7a <USBH_BulkSendData>
 80056e8:	e00c      	b.n	8005704 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	7b58      	ldrb	r0, [r3, #13]
 80056f8:	2301      	movs	r3, #1
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	4603      	mov	r3, r0
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fc3b 	bl	8006f7a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800570c:	e057      	b.n	80057be <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	7b5b      	ldrb	r3, [r3, #13]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f005 fd6d 	bl	800b1f4 <USBH_LL_GetURBState>
 800571a:	4603      	mov	r3, r0
 800571c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d136      	bne.n	8005792 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	8b12      	ldrh	r2, [r2, #24]
 800572c:	4293      	cmp	r3, r2
 800572e:	d90e      	bls.n	800574e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	8b12      	ldrh	r2, [r2, #24]
 8005738:	1a9a      	subs	r2, r3, r2
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	8b12      	ldrh	r2, [r2, #24]
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	61da      	str	r2, [r3, #28]
 800574c:	e002      	b.n	8005754 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005764:	e006      	b.n	8005774 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f892 	bl	8005898 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2204      	movs	r2, #4
 8005778:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005788:	2200      	movs	r2, #0
 800578a:	4619      	mov	r1, r3
 800578c:	f001 ff36 	bl	80075fc <osMessagePut>
    break;
 8005790:	e014      	b.n	80057bc <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d111      	bne.n	80057bc <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057b4:	2200      	movs	r2, #0
 80057b6:	4619      	mov	r1, r3
 80057b8:	f001 ff20 	bl	80075fc <osMessagePut>
    break;
 80057bc:	bf00      	nop
  }
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d002      	beq.n	80057ec <CDC_ProcessReception+0x26>
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d00e      	beq.n	8005808 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80057ea:	e051      	b.n	8005890 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	6a19      	ldr	r1, [r3, #32]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	8b5a      	ldrh	r2, [r3, #26]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	7b1b      	ldrb	r3, [r3, #12]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 fbe3 	bl	8006fc4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2204      	movs	r2, #4
 8005802:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005806:	e043      	b.n	8005890 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	7b1b      	ldrb	r3, [r3, #12]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f005 fcf0 	bl	800b1f4 <USBH_LL_GetURBState>
 8005814:	4603      	mov	r3, r0
 8005816:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d137      	bne.n	800588e <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	7b1b      	ldrb	r3, [r3, #12]
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f005 fc53 	bl	800b0d0 <USBH_LL_GetLastXferSize>
 800582a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	429a      	cmp	r2, r3
 8005834:	d016      	beq.n	8005864 <CDC_ProcessReception+0x9e>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	8b5b      	ldrh	r3, [r3, #26]
 800583a:	461a      	mov	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4293      	cmp	r3, r2
 8005840:	d910      	bls.n	8005864 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	441a      	add	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2203      	movs	r2, #3
 800585e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005862:	e006      	b.n	8005872 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f81d 	bl	80058ac <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005886:	2200      	movs	r2, #0
 8005888:	4619      	mov	r1, r3
 800588a:	f001 feb7 	bl	80075fc <osMessagePut>
    break;
 800588e:	bf00      	nop
  }
}
 8005890:	bf00      	nop
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]

}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80058d4:	b5b0      	push	{r4, r5, r7, lr}
 80058d6:	b090      	sub	sp, #64	; 0x40
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80058e8:	2302      	movs	r3, #2
 80058ea:	e03d      	b.n	8005968 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	79fa      	ldrb	r2, [r7, #7]
 80058f0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f837 	bl	8005978 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <USBH_Init+0x9c>)
 800591a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800591e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8005924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fe3c 	bl	80075a8 <osMessageCreate>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8005938:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <USBH_Init+0xa0>)
 800593a:	f107 0414 	add.w	r4, r7, #20
 800593e:	461d      	mov	r5, r3
 8005940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800594c:	f107 0314 	add.w	r3, r7, #20
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	4618      	mov	r0, r3
 8005954:	f001 fc11 	bl	800717a <osThreadCreate>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f005 fb03 	bl	800af6c <USBH_LL_Init>

  return USBH_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3740      	adds	r7, #64	; 0x40
 800596c:	46bd      	mov	sp, r7
 800596e:	bdb0      	pop	{r4, r5, r7, pc}
 8005970:	0800bc58 	.word	0x0800bc58
 8005974:	0800bc74 	.word	0x0800bc74

08005978 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005984:	e008      	b.n	8005998 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	32e0      	adds	r2, #224	; 0xe0
 800598c:	2100      	movs	r1, #0
 800598e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b0e      	cmp	r3, #14
 800599c:	d9f3      	bls.n	8005986 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e009      	b.n	80059b8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059be:	d3f1      	bcc.n	80059a4 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2240      	movs	r2, #64	; 0x40
 80059e4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d017      	beq.n	8005a4e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10f      	bne.n	8005a48 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	33dc      	adds	r3, #220	; 0xdc
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	e004      	b.n	8005a52 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	73fb      	strb	r3, [r7, #15]
 8005a4c:	e001      	b.n	8005a52 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d204      	bcs.n	8005a86 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005a84:	e001      	b.n	8005a8a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a86:	2302      	movs	r3, #2
 8005a88:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	70fb      	strb	r3, [r7, #3]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70bb      	strb	r3, [r7, #2]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005ac0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ac2:	e025      	b.n	8005b10 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	221a      	movs	r2, #26
 8005ac8:	fb02 f303 	mul.w	r3, r2, r3
 8005acc:	3308      	adds	r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	795b      	ldrb	r3, [r3, #5]
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d002      	beq.n	8005ae6 <USBH_FindInterface+0x4e>
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	2bff      	cmp	r3, #255	; 0xff
 8005ae4:	d111      	bne.n	8005b0a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005aea:	78ba      	ldrb	r2, [r7, #2]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d002      	beq.n	8005af6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005af0:	78bb      	ldrb	r3, [r7, #2]
 8005af2:	2bff      	cmp	r3, #255	; 0xff
 8005af4:	d109      	bne.n	8005b0a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005afa:	787a      	ldrb	r2, [r7, #1]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d002      	beq.n	8005b06 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b00:	787b      	ldrb	r3, [r7, #1]
 8005b02:	2bff      	cmp	r3, #255	; 0xff
 8005b04:	d101      	bne.n	8005b0a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	e006      	b.n	8005b18 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d9d6      	bls.n	8005ac4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b16:	23ff      	movs	r3, #255	; 0xff
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f005 fa59 	bl	800afe4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005b32:	2101      	movs	r1, #1
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f005 fb70 	bl	800b21a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af04      	add	r7, sp, #16
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fb7e 	bl	8006256 <USBH_IsPortEnabled>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10c      	bne.n	8005b7a <USBH_Process+0x36>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d002      	beq.n	8005b7a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2203      	movs	r2, #3
 8005b78:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b0b      	cmp	r3, #11
 8005b82:	f200 81ab 	bhi.w	8005edc <USBH_Process+0x398>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <USBH_Process+0x48>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005bbd 	.word	0x08005bbd
 8005b90:	08005bfb 	.word	0x08005bfb
 8005b94:	08005c0f 	.word	0x08005c0f
 8005b98:	08005eb7 	.word	0x08005eb7
 8005b9c:	08005edd 	.word	0x08005edd
 8005ba0:	08005cb9 	.word	0x08005cb9
 8005ba4:	08005e51 	.word	0x08005e51
 8005ba8:	08005ce9 	.word	0x08005ce9
 8005bac:	08005d25 	.word	0x08005d25
 8005bb0:	08005d5f 	.word	0x08005d5f
 8005bb4:	08005da7 	.word	0x08005da7
 8005bb8:	08005e9f 	.word	0x08005e9f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 818b 	beq.w	8005ee0 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005bd0:	20c8      	movs	r0, #200	; 0xc8
 8005bd2:	f005 fb6c 	bl	800b2ae <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f005 fa5f 	bl	800b09a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f001 fd02 	bl	80075fc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005bf8:	e172      	b.n	8005ee0 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f040 816f 	bne.w	8005ee4 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005c0c:	e16a      	b.n	8005ee4 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005c0e:	2064      	movs	r0, #100	; 0x64
 8005c10:	f005 fb4d 	bl	800b2ae <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f005 fa1b 	bl	800b050 <USBH_LL_GetSpeed>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2205      	movs	r2, #5
 8005c28:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 fa16 	bl	800705e <USBH_AllocPipe>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005c3a:	2180      	movs	r1, #128	; 0x80
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fa0e 	bl	800705e <USBH_AllocPipe>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	7919      	ldrb	r1, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	9202      	str	r2, [sp, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	9201      	str	r2, [sp, #4]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f9c7 	bl	8007000 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7959      	ldrb	r1, [r3, #5]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005c86:	b292      	uxth	r2, r2
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	9201      	str	r2, [sp, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4603      	mov	r3, r0
 8005c92:	2200      	movs	r2, #0
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 f9b3 	bl	8007000 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f001 fca3 	bl	80075fc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005cb6:	e120      	b.n	8005efa <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f923 	bl	8005f04 <USBH_HandleEnum>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 8111 	bne.w	8005ee8 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d103      	bne.n	8005ce0 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005cde:	e103      	b.n	8005ee8 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2207      	movs	r2, #7
 8005ce4:	701a      	strb	r2, [r3, #0]
    break;
 8005ce6:	e0ff      	b.n	8005ee8 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80fc 	beq.w	8005eec <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2208      	movs	r2, #8
 8005d04:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2205      	movs	r2, #5
 8005d0a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f001 fc6d 	bl	80075fc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d22:	e0e3      	b.n	8005eec <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fc09 	bl	8006546 <USBH_SetCfg>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2209      	movs	r2, #9
 8005d3e:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d54:	2200      	movs	r2, #0
 8005d56:	4619      	mov	r1, r3
 8005d58:	f001 fc50 	bl	80075fc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d5c:	e0cd      	b.n	8005efa <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fc0c 	bl	800658c <USBH_SetFeature>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e002      	b.n	8005d88 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	220a      	movs	r2, #10
 8005d86:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f001 fc2c 	bl	80075fc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005da4:	e0a9      	b.n	8005efa <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d040      	beq.n	8005e32 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
 8005dbc:	e017      	b.n	8005dee <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	33dc      	adds	r3, #220	; 0xdc
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	791a      	ldrb	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d108      	bne.n	8005de8 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	33dc      	adds	r3, #220	; 0xdc
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	3301      	adds	r3, #1
 8005dec:	73fb      	strb	r3, [r7, #15]
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0e4      	beq.n	8005dbe <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2206      	movs	r2, #6
 8005e14:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e1c:	2103      	movs	r1, #3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
 8005e22:	e006      	b.n	8005e32 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	220d      	movs	r2, #13
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	220d      	movs	r2, #13
 8005e30:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2205      	movs	r2, #5
 8005e36:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e46:	2200      	movs	r2, #0
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f001 fbd7 	bl	80075fc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e4e:	e054      	b.n	8005efa <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00f      	beq.n	8005e7a <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005e6a:	7bbb      	ldrb	r3, [r7, #14]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13e      	bne.n	8005ef0 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	220b      	movs	r2, #11
 8005e76:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005e78:	e03a      	b.n	8005ef0 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220d      	movs	r2, #13
 8005e7e:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2205      	movs	r2, #5
 8005e84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e94:	2200      	movs	r2, #0
 8005e96:	4619      	mov	r1, r3
 8005e98:	f001 fbb0 	bl	80075fc <osMessagePut>
    break;
 8005e9c:	e028      	b.n	8005ef0 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d025      	beq.n	8005ef4 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
    }
    break;
 8005eb4:	e01e      	b.n	8005ef4 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fd5e 	bl	8005978 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d018      	beq.n	8005ef8 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005eda:	e00d      	b.n	8005ef8 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8005edc:	bf00      	nop
 8005ede:	e00c      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005ee0:	bf00      	nop
 8005ee2:	e00a      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005ee4:	bf00      	nop
 8005ee6:	e008      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005ee8:	bf00      	nop
 8005eea:	e006      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005eec:	bf00      	nop
 8005eee:	e004      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005ef0:	bf00      	nop
 8005ef2:	e002      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005ef4:	bf00      	nop
 8005ef6:	e000      	b.n	8005efa <USBH_Process+0x3b6>
    break;
 8005ef8:	bf00      	nop
  }
 return USBH_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b07      	cmp	r3, #7
 8005f16:	f200 8132 	bhi.w	800617e <USBH_HandleEnum+0x27a>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USBH_HandleEnum+0x1c>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f41 	.word	0x08005f41
 8005f24:	08005fb3 	.word	0x08005fb3
 8005f28:	08005fcb 	.word	0x08005fcb
 8005f2c:	08006041 	.word	0x08006041
 8005f30:	08006059 	.word	0x08006059
 8005f34:	08006077 	.word	0x08006077
 8005f38:	080060e3 	.word	0x080060e3
 8005f3c:	08006133 	.word	0x08006133
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005f40:	2108      	movs	r1, #8
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa2f 	bl	80063a6 <USBH_Get_DevDesc>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 8119 	bne.w	8006182 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	7919      	ldrb	r1, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f74:	b292      	uxth	r2, r2
 8005f76:	9202      	str	r2, [sp, #8]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f83c 	bl	8007000 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7959      	ldrb	r1, [r3, #5]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	9202      	str	r2, [sp, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 f828 	bl	8007000 <USBH_OpenPipe>

    }
    break;
 8005fb0:	e0e7      	b.n	8006182 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005fb2:	2112      	movs	r1, #18
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f9f6 	bl	80063a6 <USBH_Get_DevDesc>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 80e2 	bne.w	8006186 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	705a      	strb	r2, [r3, #1]

    }
    break;
 8005fc8:	e0dd      	b.n	8006186 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005fca:	2101      	movs	r1, #1
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fa96 	bl	80064fe <USBH_SetAddress>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 80d8 	bne.w	800618a <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8005fda:	2002      	movs	r0, #2
 8005fdc:	f005 f967 	bl	800b2ae <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2203      	movs	r2, #3
 8005fec:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7919      	ldrb	r1, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006002:	b292      	uxth	r2, r2
 8006004:	9202      	str	r2, [sp, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	9201      	str	r2, [sp, #4]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	4603      	mov	r3, r0
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fff5 	bl	8007000 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	7959      	ldrb	r1, [r3, #5]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800602a:	b292      	uxth	r2, r2
 800602c:	9202      	str	r2, [sp, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	9201      	str	r2, [sp, #4]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	2200      	movs	r2, #0
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 ffe1 	bl	8007000 <USBH_OpenPipe>
    }
    break;
 800603e:	e0a4      	b.n	800618a <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006040:	2109      	movs	r1, #9
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9d7 	bl	80063f6 <USBH_Get_CfgDesc>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 809f 	bne.w	800618e <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2204      	movs	r2, #4
 8006054:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006056:	e09a      	b.n	800618e <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f9c8 	bl	80063f6 <USBH_Get_CfgDesc>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 8092 	bne.w	8006192 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2205      	movs	r2, #5
 8006072:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006074:	e08d      	b.n	8006192 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01e      	beq.n	80060be <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800608c:	23ff      	movs	r3, #255	; 0xff
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9d5 	bl	800643e <USBH_Get_StringDesc>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d17d      	bne.n	8006196 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2206      	movs	r2, #6
 800609e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2205      	movs	r2, #5
 80060a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060b4:	2200      	movs	r2, #0
 80060b6:	4619      	mov	r1, r3
 80060b8:	f001 faa0 	bl	80075fc <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060bc:	e06b      	b.n	8006196 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2206      	movs	r2, #6
 80060c2:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2205      	movs	r2, #5
 80060c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060d8:	2200      	movs	r2, #0
 80060da:	4619      	mov	r1, r3
 80060dc:	f001 fa8e 	bl	80075fc <osMessagePut>
    break;
 80060e0:	e059      	b.n	8006196 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80060f8:	23ff      	movs	r3, #255	; 0xff
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f99f 	bl	800643e <USBH_Get_StringDesc>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d149      	bne.n	800619a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2207      	movs	r2, #7
 800610a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800610c:	e045      	b.n	800619a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2207      	movs	r2, #7
 8006112:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2205      	movs	r2, #5
 8006118:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006128:	2200      	movs	r2, #0
 800612a:	4619      	mov	r1, r3
 800612c:	f001 fa66 	bl	80075fc <osMessagePut>
    break;
 8006130:	e033      	b.n	800619a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006148:	23ff      	movs	r3, #255	; 0xff
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f977 	bl	800643e <USBH_Get_StringDesc>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d123      	bne.n	800619e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800615a:	e020      	b.n	800619e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2205      	movs	r2, #5
 8006164:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006174:	2200      	movs	r2, #0
 8006176:	4619      	mov	r1, r3
 8006178:	f001 fa40 	bl	80075fc <osMessagePut>
    break;
 800617c:	e00f      	b.n	800619e <USBH_HandleEnum+0x29a>

  default:
    break;
 800617e:	bf00      	nop
 8006180:	e00e      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 8006182:	bf00      	nop
 8006184:	e00c      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 8006186:	bf00      	nop
 8006188:	e00a      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 800618a:	bf00      	nop
 800618c:	e008      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 800618e:	bf00      	nop
 8006190:	e006      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 8006192:	bf00      	nop
 8006194:	e004      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <USBH_HandleEnum+0x29c>
    break;
 800619e:	bf00      	nop
  }
  return Status;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f804 	bl	80061ee <USBH_HandleSof>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d10a      	bne.n	8006216 <USBH_HandleSof+0x28>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
  }
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800622e:	bf00      	nop
}
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800624a:	bf00      	nop
}
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800629a:	2104      	movs	r1, #4
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
 80062a0:	e007      	b.n	80062b2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062c6:	2200      	movs	r2, #0
 80062c8:	4619      	mov	r1, r3
 80062ca:	f001 f997 	bl	80075fc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f004 fe9a 	bl	800b01a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fed4 	bl	800709a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	795b      	ldrb	r3, [r3, #5]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fece 	bl	800709a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006316:	2105      	movs	r1, #5
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f004 fe61 	bl	800afe4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2203      	movs	r2, #3
 8006326:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800633c:	2200      	movs	r2, #0
 800633e:	4619      	mov	r1, r3
 8006340:	f001 f95c 	bl	80075fc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800635c:	f107 030c 	add.w	r3, r7, #12
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	4618      	mov	r0, r3
 8006366:	f001 f989 	bl	800767c <osMessageGet>
    if(event.status == osEventMessage)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b10      	cmp	r3, #16
 800636e:	d1f2      	bne.n	8006356 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fbe7 	bl	8005b44 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006376:	e7ee      	b.n	8006356 <USBH_Process_OS+0x8>

08006378 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006394:	2200      	movs	r2, #0
 8006396:	4619      	mov	r1, r3
 8006398:	f001 f930 	bl	80075fc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f864 	bl	8006494 <USBH_GetDescriptor>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f203 3022 	addw	r0, r3, #802	; 0x322
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	b292      	uxth	r2, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	f000 f918 	bl	800661c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af02      	add	r7, sp, #8
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	331c      	adds	r3, #28
 8006406:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006408:	887b      	ldrh	r3, [r7, #2]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f83d 	bl	8006494 <USBH_GetDescriptor>
 800641a:	4603      	mov	r3, r0
 800641c:	72fb      	strb	r3, [r7, #11]
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f964 	bl	80066fc <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006434:	7afb      	ldrb	r3, [r7, #11]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b088      	sub	sp, #32
 8006442:	af02      	add	r7, sp, #8
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	461a      	mov	r2, r3
 800644a:	460b      	mov	r3, r1
 800644c:	72fb      	strb	r3, [r7, #11]
 800644e:	4613      	mov	r3, r2
 8006450:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800645a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006462:	893b      	ldrh	r3, [r7, #8]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	460b      	mov	r3, r1
 8006468:	2100      	movs	r1, #0
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f812 	bl	8006494 <USBH_GetDescriptor>
 8006470:	4603      	mov	r3, r0
 8006472:	75fb      	strb	r3, [r7, #23]
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d107      	bne.n	800648a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006480:	893a      	ldrh	r2, [r7, #8]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fa37 	bl	80068f8 <USBH_ParseStringDesc>
  }
  return status;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	72fb      	strb	r3, [r7, #11]
 80064a2:	4613      	mov	r3, r2
 80064a4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	789b      	ldrb	r3, [r3, #2]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d11c      	bne.n	80064e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2206      	movs	r2, #6
 80064be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	893a      	ldrh	r2, [r7, #8]
 80064c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80064c6:	893b      	ldrh	r3, [r7, #8]
 80064c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d0:	d104      	bne.n	80064dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f240 4209 	movw	r2, #1033	; 0x409
 80064d8:	829a      	strh	r2, [r3, #20]
 80064da:	e002      	b.n	80064e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8b3a      	ldrh	r2, [r7, #24]
 80064e6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80064e8:	8b3b      	ldrh	r3, [r7, #24]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fa50 	bl	8006994 <USBH_CtlReq>
 80064f4:	4603      	mov	r3, r0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10f      	bne.n	8006532 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2205      	movs	r2, #5
 800651c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	b29a      	uxth	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006532:	2200      	movs	r2, #0
 8006534:	2100      	movs	r1, #0
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa2c 	bl	8006994 <USBH_CtlReq>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	789b      	ldrb	r3, [r3, #2]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10e      	bne.n	8006578 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2209      	movs	r2, #9
 8006564:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	887a      	ldrh	r2, [r7, #2]
 800656a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006578:	2200      	movs	r2, #0
 800657a:	2100      	movs	r1, #0
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa09 	bl	8006994 <USBH_CtlReq>
 8006582:	4603      	mov	r3, r0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	789b      	ldrb	r3, [r3, #2]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10f      	bne.n	80065c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2203      	movs	r2, #3
 80065aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80065c0:	2200      	movs	r2, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9e5 	bl	8006994 <USBH_CtlReq>
 80065ca:	4603      	mov	r3, r0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	789b      	ldrb	r3, [r3, #2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10f      	bne.n	8006608 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006608:	2200      	movs	r2, #0
 800660a:	2100      	movs	r1, #0
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f9c1 	bl	8006994 <USBH_CtlReq>
 8006612:	4603      	mov	r3, r0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	785a      	ldrb	r2, [r3, #1]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	3302      	adds	r3, #2
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b29a      	uxth	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	3303      	adds	r3, #3
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	b29b      	uxth	r3, r3
 800664e:	4313      	orrs	r3, r2
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	791a      	ldrb	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	795a      	ldrb	r2, [r3, #5]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	799a      	ldrb	r2, [r3, #6]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	79da      	ldrb	r2, [r3, #7]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d939      	bls.n	80066f0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	3308      	adds	r3, #8
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	b29a      	uxth	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3309      	adds	r3, #9
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	b29b      	uxth	r3, r3
 8006690:	4313      	orrs	r3, r2
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	330a      	adds	r3, #10
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	330b      	adds	r3, #11
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	330c      	adds	r3, #12
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	330d      	adds	r3, #13
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	7b9a      	ldrb	r2, [r3, #14]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	7bda      	ldrb	r2, [r3, #15]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	7c1a      	ldrb	r2, [r3, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	7c5a      	ldrb	r2, [r3, #17]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	745a      	strb	r2, [r3, #17]
  }
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	785a      	ldrb	r2, [r3, #1]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	3302      	adds	r3, #2
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b29a      	uxth	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3303      	adds	r3, #3
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	b29b      	uxth	r3, r3
 8006742:	4313      	orrs	r3, r2
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	791a      	ldrb	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	795a      	ldrb	r2, [r3, #5]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	799a      	ldrb	r2, [r3, #6]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	79da      	ldrb	r2, [r3, #7]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	7a1a      	ldrb	r2, [r3, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	2b09      	cmp	r3, #9
 8006776:	d95f      	bls.n	8006838 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006778:	2309      	movs	r3, #9
 800677a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006780:	e051      	b.n	8006826 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006782:	f107 0316 	add.w	r3, r7, #22
 8006786:	4619      	mov	r1, r3
 8006788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800678a:	f000 f8e8 	bl	800695e <USBH_GetNextDesc>
 800678e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d146      	bne.n	8006826 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800679c:	221a      	movs	r2, #26
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	3308      	adds	r3, #8
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	3302      	adds	r3, #2
 80067aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80067ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067ae:	69f8      	ldr	r0, [r7, #28]
 80067b0:	f000 f846 	bl	8006840 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067be:	e022      	b.n	8006806 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80067c0:	f107 0316 	add.w	r3, r7, #22
 80067c4:	4619      	mov	r1, r3
 80067c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067c8:	f000 f8c9 	bl	800695e <USBH_GetNextDesc>
 80067cc:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b05      	cmp	r3, #5
 80067d4:	d117      	bne.n	8006806 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80067d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80067de:	3201      	adds	r2, #1
 80067e0:	00d2      	lsls	r2, r2, #3
 80067e2:	211a      	movs	r1, #26
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	3308      	adds	r3, #8
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80067f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067f6:	69b8      	ldr	r0, [r7, #24]
 80067f8:	f000 f851 	bl	800689e <USBH_ParseEPDesc>
            ep_ix++;
 80067fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006800:	3301      	adds	r3, #1
 8006802:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800680e:	429a      	cmp	r2, r3
 8006810:	d204      	bcs.n	800681c <USBH_ParseCfgDesc+0x120>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	885a      	ldrh	r2, [r3, #2]
 8006816:	8afb      	ldrh	r3, [r7, #22]
 8006818:	429a      	cmp	r2, r3
 800681a:	d8d1      	bhi.n	80067c0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800681c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006820:	3301      	adds	r3, #1
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006826:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800682a:	2b01      	cmp	r3, #1
 800682c:	d804      	bhi.n	8006838 <USBH_ParseCfgDesc+0x13c>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	885a      	ldrh	r2, [r3, #2]
 8006832:	8afb      	ldrh	r3, [r7, #22]
 8006834:	429a      	cmp	r2, r3
 8006836:	d8a4      	bhi.n	8006782 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006838:	bf00      	nop
 800683a:	3728      	adds	r7, #40	; 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	785a      	ldrb	r2, [r3, #1]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	789a      	ldrb	r2, [r3, #2]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	78da      	ldrb	r2, [r3, #3]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	791a      	ldrb	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	795a      	ldrb	r2, [r3, #5]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	799a      	ldrb	r2, [r3, #6]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	79da      	ldrb	r2, [r3, #7]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	7a1a      	ldrb	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	721a      	strb	r2, [r3, #8]
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	785a      	ldrb	r2, [r3, #1]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	789a      	ldrb	r2, [r3, #2]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	78da      	ldrb	r2, [r3, #3]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	3304      	adds	r3, #4
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	3305      	adds	r3, #5
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4313      	orrs	r3, r2
 80068de:	b29a      	uxth	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	799a      	ldrb	r2, [r3, #6]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	719a      	strb	r2, [r3, #6]
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d120      	bne.n	8006952 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	1e9a      	subs	r2, r3, #2
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	4293      	cmp	r3, r2
 800691a:	bf28      	it	cs
 800691c:	4613      	movcs	r3, r2
 800691e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3302      	adds	r3, #2
 8006924:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006926:	2300      	movs	r3, #0
 8006928:	82fb      	strh	r3, [r7, #22]
 800692a:	e00b      	b.n	8006944 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800692c:	8afb      	ldrh	r3, [r7, #22]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3301      	adds	r3, #1
 800693c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800693e:	8afb      	ldrh	r3, [r7, #22]
 8006940:	3302      	adds	r3, #2
 8006942:	82fb      	strh	r3, [r7, #22]
 8006944:	8afa      	ldrh	r2, [r7, #22]
 8006946:	8abb      	ldrh	r3, [r7, #20]
 8006948:	429a      	cmp	r2, r3
 800694a:	d3ef      	bcc.n	800692c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
  }
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	881a      	ldrh	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	4413      	add	r3, r2
 8006974:	b29a      	uxth	r2, r3
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4413      	add	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	789b      	ldrb	r3, [r3, #2]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d002      	beq.n	80069b4 <USBH_CtlReq+0x20>
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d01d      	beq.n	80069ee <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 80069b2:	e042      	b.n	8006a3a <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2202      	movs	r2, #2
 80069ca:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2203      	movs	r2, #3
 80069d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e4:	2200      	movs	r2, #0
 80069e6:	4619      	mov	r1, r3
 80069e8:	f000 fe08 	bl	80075fc <osMessagePut>
    break;
 80069ec:	e025      	b.n	8006a3a <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f828 	bl	8006a44 <USBH_HandleControl>
 80069f4:	4603      	mov	r3, r0
 80069f6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75fb      	strb	r3, [r7, #23]
    break;
 8006a0e:	e013      	b.n	8006a38 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d108      	bne.n	8006a28 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006a22:	2303      	movs	r3, #3
 8006a24:	75fb      	strb	r3, [r7, #23]
    break;
 8006a26:	e007      	b.n	8006a38 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d104      	bne.n	8006a38 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006a34:	2302      	movs	r3, #2
 8006a36:	75fb      	strb	r3, [r7, #23]
    break;
 8006a38:	bf00      	nop
  }
  return status;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7e1b      	ldrb	r3, [r3, #24]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	2b0a      	cmp	r3, #10
 8006a5c:	f200 821f 	bhi.w	8006e9e <USBH_HandleControl+0x45a>
 8006a60:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <USBH_HandleControl+0x24>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	08006aaf 	.word	0x08006aaf
 8006a70:	08006b51 	.word	0x08006b51
 8006a74:	08006b77 	.word	0x08006b77
 8006a78:	08006c03 	.word	0x08006c03
 8006a7c:	08006c2f 	.word	0x08006c2f
 8006a80:	08006cf1 	.word	0x08006cf1
 8006a84:	08006d13 	.word	0x08006d13
 8006a88:	08006da5 	.word	0x08006da5
 8006a8c:	08006dcd 	.word	0x08006dcd
 8006a90:	08006e5f 	.word	0x08006e5f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f103 0110 	add.w	r1, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	795b      	ldrb	r3, [r3, #5]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fa0d 	bl	8006ec0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	761a      	strb	r2, [r3, #24]
    break;
 8006aac:	e202      	b.n	8006eb4 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	795b      	ldrb	r3, [r3, #5]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f004 fb9d 	bl	800b1f4 <USBH_LL_GetURBState>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d12c      	bne.n	8006b1e <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7c1b      	ldrb	r3, [r3, #16]
 8006ac8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006acc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8adb      	ldrh	r3, [r3, #22]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d103      	bne.n	8006ae4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2203      	movs	r2, #3
 8006ae0:	761a      	strb	r2, [r3, #24]
 8006ae2:	e00d      	b.n	8006b00 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2205      	movs	r2, #5
 8006ae8:	761a      	strb	r2, [r3, #24]
 8006aea:	e009      	b.n	8006b00 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8006aec:	7b7b      	ldrb	r3, [r7, #13]
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	d103      	bne.n	8006afa <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2209      	movs	r2, #9
 8006af6:	761a      	strb	r2, [r3, #24]
 8006af8:	e002      	b.n	8006b00 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2207      	movs	r2, #7
 8006afe:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2203      	movs	r2, #3
 8006b04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b14:	2200      	movs	r2, #0
 8006b16:	4619      	mov	r1, r3
 8006b18:	f000 fd70 	bl	80075fc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b1c:	e1c1      	b.n	8006ea2 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d003      	beq.n	8006b2c <USBH_HandleControl+0xe8>
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	f040 81bb 	bne.w	8006ea2 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	220b      	movs	r2, #11
 8006b30:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b46:	2200      	movs	r2, #0
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f000 fd57 	bl	80075fc <osMessagePut>
    break;
 8006b4e:	e1a8      	b.n	8006ea2 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6899      	ldr	r1, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	899a      	ldrh	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	791b      	ldrb	r3, [r3, #4]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9e8 	bl	8006f3e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	761a      	strb	r2, [r3, #24]
    break;
 8006b74:	e19e      	b.n	8006eb4 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	791b      	ldrb	r3, [r3, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f004 fb39 	bl	800b1f4 <USBH_LL_GetURBState>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d110      	bne.n	8006bae <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2209      	movs	r2, #9
 8006b90:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2203      	movs	r2, #3
 8006b96:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f000 fd27 	bl	80075fc <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b05      	cmp	r3, #5
 8006bb2:	d110      	bne.n	8006bd6 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2203      	movs	r2, #3
 8006bbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f000 fd14 	bl	80075fc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bd4:	e167      	b.n	8006ea6 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	f040 8164 	bne.w	8006ea6 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	220b      	movs	r2, #11
 8006be2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2203      	movs	r2, #3
 8006be8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f000 fcfe 	bl	80075fc <osMessagePut>
    break;
 8006c00:	e151      	b.n	8006ea6 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6899      	ldr	r1, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	899a      	ldrh	r2, [r3, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7958      	ldrb	r0, [r3, #5]
 8006c0e:	2301      	movs	r3, #1
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4603      	mov	r3, r0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f96d 	bl	8006ef4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2206      	movs	r2, #6
 8006c2a:	761a      	strb	r2, [r3, #24]
    break;
 8006c2c:	e142      	b.n	8006eb4 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	795b      	ldrb	r3, [r3, #5]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f004 fadd 	bl	800b1f4 <USBH_LL_GetURBState>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d111      	bne.n	8006c68 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2207      	movs	r2, #7
 8006c48:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4619      	mov	r1, r3
 8006c62:	f000 fccb 	bl	80075fc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c66:	e120      	b.n	8006eaa <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d113      	bne.n	8006c96 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	220c      	movs	r2, #12
 8006c72:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006c74:	2303      	movs	r3, #3
 8006c76:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4619      	mov	r1, r3
 8006c90:	f000 fcb4 	bl	80075fc <osMessagePut>
    break;
 8006c94:	e109      	b.n	8006eaa <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d111      	bne.n	8006cc0 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2205      	movs	r2, #5
 8006ca0:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f000 fc9f 	bl	80075fc <osMessagePut>
    break;
 8006cbe:	e0f4      	b.n	8006eaa <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	f040 80f1 	bne.w	8006eaa <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	220b      	movs	r2, #11
 8006ccc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4619      	mov	r1, r3
 8006cea:	f000 fc87 	bl	80075fc <osMessagePut>
    break;
 8006cee:	e0dc      	b.n	8006eaa <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	791b      	ldrb	r3, [r3, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f920 	bl	8006f3e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	761a      	strb	r2, [r3, #24]

    break;
 8006d10:	e0d0      	b.n	8006eb4 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	791b      	ldrb	r3, [r3, #4]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f004 fa6b 	bl	800b1f4 <USBH_LL_GetURBState>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d113      	bne.n	8006d50 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	220d      	movs	r2, #13
 8006d2c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2203      	movs	r2, #3
 8006d36:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d46:	2200      	movs	r2, #0
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f000 fc57 	bl	80075fc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d4e:	e0ae      	b.n	8006eae <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d111      	bne.n	8006d7a <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	220b      	movs	r2, #11
 8006d5a:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d70:	2200      	movs	r2, #0
 8006d72:	4619      	mov	r1, r3
 8006d74:	f000 fc42 	bl	80075fc <osMessagePut>
    break;
 8006d78:	e099      	b.n	8006eae <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	f040 8096 	bne.w	8006eae <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8006d82:	2303      	movs	r3, #3
 8006d84:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f000 fc2d 	bl	80075fc <osMessagePut>
    break;
 8006da2:	e084      	b.n	8006eae <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	795a      	ldrb	r2, [r3, #5]
 8006da8:	2301      	movs	r3, #1
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f89e 	bl	8006ef4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	761a      	strb	r2, [r3, #24]
    break;
 8006dca:	e073      	b.n	8006eb4 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	795b      	ldrb	r3, [r3, #5]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f004 fa0e 	bl	800b1f4 <USBH_LL_GetURBState>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d113      	bne.n	8006e0a <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	220d      	movs	r2, #13
 8006dea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2203      	movs	r2, #3
 8006df0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e00:	2200      	movs	r2, #0
 8006e02:	4619      	mov	r1, r3
 8006e04:	f000 fbfa 	bl	80075fc <osMessagePut>
#endif
#endif
      }

    }
    break;
 8006e08:	e053      	b.n	8006eb2 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d111      	bne.n	8006e34 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2209      	movs	r2, #9
 8006e14:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f000 fbe5 	bl	80075fc <osMessagePut>
    break;
 8006e32:	e03e      	b.n	8006eb2 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d13b      	bne.n	8006eb2 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	220b      	movs	r2, #11
 8006e3e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2203      	movs	r2, #3
 8006e44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e54:	2200      	movs	r2, #0
 8006e56:	4619      	mov	r1, r3
 8006e58:	f000 fbd0 	bl	80075fc <osMessagePut>
    break;
 8006e5c:	e029      	b.n	8006eb2 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7e5b      	ldrb	r3, [r3, #25]
 8006e62:	3301      	adds	r3, #1
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	765a      	strb	r2, [r3, #25]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	7e5b      	ldrb	r3, [r3, #25]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d809      	bhi.n	8006e86 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f004 f8d1 	bl	800b01a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006e84:	e016      	b.n	8006eb4 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e8c:	2106      	movs	r1, #6
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9c:	e00a      	b.n	8006eb4 <USBH_HandleControl+0x470>

  default:
    break;
 8006e9e:	bf00      	nop
 8006ea0:	e008      	b.n	8006eb4 <USBH_HandleControl+0x470>
    break;
 8006ea2:	bf00      	nop
 8006ea4:	e006      	b.n	8006eb4 <USBH_HandleControl+0x470>
    break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <USBH_HandleControl+0x470>
    break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <USBH_HandleControl+0x470>
    break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <USBH_HandleControl+0x470>
    break;
 8006eb2:	bf00      	nop
  }
  return status;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af04      	add	r7, sp, #16
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ece:	79f9      	ldrb	r1, [r7, #7]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	9302      	str	r3, [sp, #8]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	2300      	movs	r3, #0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f004 f954 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af04      	add	r7, sp, #16
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4611      	mov	r1, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	460b      	mov	r3, r1
 8006f04:	80fb      	strh	r3, [r7, #6]
 8006f06:	4613      	mov	r3, r2
 8006f08:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f18:	7979      	ldrb	r1, [r7, #5]
 8006f1a:	7e3b      	ldrb	r3, [r7, #24]
 8006f1c:	9303      	str	r3, [sp, #12]
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	9302      	str	r3, [sp, #8]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	2301      	movs	r3, #1
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f004 f92f 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b088      	sub	sp, #32
 8006f42:	af04      	add	r7, sp, #16
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	4611      	mov	r1, r2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	80fb      	strh	r3, [r7, #6]
 8006f50:	4613      	mov	r3, r2
 8006f52:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f54:	7979      	ldrb	r1, [r7, #5]
 8006f56:	2300      	movs	r3, #0
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	9302      	str	r3, [sp, #8]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	2301      	movs	r3, #1
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	2201      	movs	r2, #1
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f004 f911 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f70:	2300      	movs	r3, #0

}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b088      	sub	sp, #32
 8006f7e:	af04      	add	r7, sp, #16
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	4611      	mov	r1, r2
 8006f86:	461a      	mov	r2, r3
 8006f88:	460b      	mov	r3, r1
 8006f8a:	80fb      	strh	r3, [r7, #6]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f9e:	7979      	ldrb	r1, [r7, #5]
 8006fa0:	7e3b      	ldrb	r3, [r7, #24]
 8006fa2:	9303      	str	r3, [sp, #12]
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	9302      	str	r3, [sp, #8]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	2301      	movs	r3, #1
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f004 f8ec 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af04      	add	r7, sp, #16
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4611      	mov	r1, r2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	80fb      	strh	r3, [r7, #6]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006fda:	7979      	ldrb	r1, [r7, #5]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	9302      	str	r3, [sp, #8]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	2301      	movs	r3, #1
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2302      	movs	r3, #2
 8006fee:	2201      	movs	r2, #1
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f004 f8ce 	bl	800b192 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af04      	add	r7, sp, #16
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	4608      	mov	r0, r1
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	4603      	mov	r3, r0
 8007010:	70fb      	strb	r3, [r7, #3]
 8007012:	460b      	mov	r3, r1
 8007014:	70bb      	strb	r3, [r7, #2]
 8007016:	4613      	mov	r3, r2
 8007018:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800701a:	7878      	ldrb	r0, [r7, #1]
 800701c:	78ba      	ldrb	r2, [r7, #2]
 800701e:	78f9      	ldrb	r1, [r7, #3]
 8007020:	8b3b      	ldrh	r3, [r7, #24]
 8007022:	9302      	str	r3, [sp, #8]
 8007024:	7d3b      	ldrb	r3, [r7, #20]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	7c3b      	ldrb	r3, [r7, #16]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4603      	mov	r3, r0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f004 f861 	bl	800b0f6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007034:	2300      	movs	r3, #0

}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f004 f880 	bl	800b154 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007054:	2300      	movs	r3, #0

}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f831 	bl	80070d2 <USBH_GetFreePipe>
 8007070:	4603      	mov	r3, r0
 8007072:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	89fa      	ldrh	r2, [r7, #14]
 8007082:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	32e0      	adds	r2, #224	; 0xe0
 800708a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800708e:	89fb      	ldrh	r3, [r7, #14]
 8007090:	b2db      	uxtb	r3, r3
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	2b0a      	cmp	r3, #10
 80070aa:	d80b      	bhi.n	80070c4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32e0      	adds	r2, #224	; 0xe0
 80070b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	32e0      	adds	r2, #224	; 0xe0
 80070c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	e00e      	b.n	8007102 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80070e4:	7bfa      	ldrb	r2, [r7, #15]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	32e0      	adds	r2, #224	; 0xe0
 80070ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	e007      	b.n	800710c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	3301      	adds	r3, #1
 8007100:	73fb      	strb	r3, [r7, #15]
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	2b0a      	cmp	r3, #10
 8007106:	d9ed      	bls.n	80070e4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007108:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800712a:	2b84      	cmp	r3, #132	; 0x84
 800712c:	d005      	beq.n	800713a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800712e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	3303      	adds	r3, #3
 8007138:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	607b      	str	r3, [r7, #4]
  return(result);
 8007154:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007156:	2b00      	cmp	r3, #0
 8007158:	bf14      	ite	ne
 800715a:	2301      	movne	r3, #1
 800715c:	2300      	moveq	r3, #0
 800715e:	b2db      	uxtb	r3, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007170:	f001 fd74 	bl	8008c5c <vTaskStartScheduler>
  
  return osOK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	bd80      	pop	{r7, pc}

0800717a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800717a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717c:	b089      	sub	sp, #36	; 0x24
 800717e:	af04      	add	r7, sp, #16
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <osThreadCreate+0x54>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01c      	beq.n	80071ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685c      	ldr	r4, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681d      	ldr	r5, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691e      	ldr	r6, [r3, #16]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff ffb6 	bl	8007118 <makeFreeRtosPriority>
 80071ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071b6:	9202      	str	r2, [sp, #8]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	9100      	str	r1, [sp, #0]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	4632      	mov	r2, r6
 80071c0:	4629      	mov	r1, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	f001 fb8f 	bl	80088e6 <xTaskCreateStatic>
 80071c8:	4603      	mov	r3, r0
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e01c      	b.n	8007208 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685c      	ldr	r4, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071da:	b29e      	uxth	r6, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff ff98 	bl	8007118 <makeFreeRtosPriority>
 80071e8:	4602      	mov	r2, r0
 80071ea:	f107 030c 	add.w	r3, r7, #12
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	9200      	str	r2, [sp, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	4632      	mov	r2, r6
 80071f6:	4629      	mov	r1, r5
 80071f8:	4620      	mov	r0, r4
 80071fa:	f001 fbcd 	bl	8008998 <xTaskCreate>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b01      	cmp	r3, #1
 8007202:	d001      	beq.n	8007208 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007212 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <osDelay+0x16>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e000      	b.n	800722a <osDelay+0x18>
 8007228:	2301      	movs	r3, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fce2 	bl	8008bf4 <vTaskDelay>
  
  return osOK;
 8007230:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af02      	add	r7, sp, #8
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d010      	beq.n	800726e <osSemaphoreCreate+0x34>
    if (count == 1) {
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10b      	bne.n	800726a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	2303      	movs	r3, #3
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	2001      	movs	r0, #1
 8007262:	f000 fcd1 	bl	8007c08 <xQueueGenericCreateStatic>
 8007266:	4603      	mov	r3, r0
 8007268:	e016      	b.n	8007298 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	e014      	b.n	8007298 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d110      	bne.n	8007296 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007274:	2203      	movs	r2, #3
 8007276:	2100      	movs	r1, #0
 8007278:	2001      	movs	r0, #1
 800727a:	f000 fd37 	bl	8007cec <xQueueGenericCreate>
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <osSemaphoreCreate+0x58>
 8007286:	2300      	movs	r3, #0
 8007288:	2200      	movs	r2, #0
 800728a:	2100      	movs	r1, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fd89 	bl	8007da4 <xQueueGenericSend>
      return sema;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	e000      	b.n	8007298 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007296:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	e03a      	b.n	800732e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	d103      	bne.n	80072cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e009      	b.n	80072e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d006      	beq.n	80072e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <osSemaphoreWait+0x40>
      ticks = 1;
 80072dc:	2301      	movs	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80072e0:	f7ff ff32 	bl	8007148 <inHandlerMode>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d017      	beq.n	800731a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80072ea:	f107 0308 	add.w	r3, r7, #8
 80072ee:	461a      	mov	r2, r3
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f952 	bl	800859c <xQueueReceiveFromISR>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d001      	beq.n	8007302 <osSemaphoreWait+0x62>
      return osErrorOS;
 80072fe:	23ff      	movs	r3, #255	; 0xff
 8007300:	e015      	b.n	800732e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d011      	beq.n	800732c <osSemaphoreWait+0x8c>
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <osSemaphoreWait+0x98>)
 800730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	e008      	b.n	800732c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f835 	bl	800838c <xQueueSemaphoreTake>
 8007322:	4603      	mov	r3, r0
 8007324:	2b01      	cmp	r3, #1
 8007326:	d001      	beq.n	800732c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007328:	23ff      	movs	r3, #255	; 0xff
 800732a:	e000      	b.n	800732e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800734c:	f7ff fefc 	bl	8007148 <inHandlerMode>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 feaf 	bl	80080c0 <xQueueGiveFromISR>
 8007362:	4603      	mov	r3, r0
 8007364:	2b01      	cmp	r3, #1
 8007366:	d001      	beq.n	800736c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007368:	23ff      	movs	r3, #255	; 0xff
 800736a:	e017      	b.n	800739c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d013      	beq.n	800739a <osSemaphoreRelease+0x5e>
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <osSemaphoreRelease+0x68>)
 8007374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	e00a      	b.n	800739a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007384:	2300      	movs	r3, #0
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fd0a 	bl	8007da4 <xQueueGenericSend>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d001      	beq.n	800739a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007396:	23ff      	movs	r3, #255	; 0xff
 8007398:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	3303      	adds	r3, #3
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80073bc:	2014      	movs	r0, #20
 80073be:	f002 fccf 	bl	8009d60 <pvPortMalloc>
 80073c2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d046      	beq.n	8007458 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 fcbc 	bl	8009d60 <pvPortMalloc>
 80073e8:	4602      	mov	r2, r0
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d02b      	beq.n	800744e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	4618      	mov	r0, r3
 8007402:	f002 fcad 	bl	8009d60 <pvPortMalloc>
 8007406:	4602      	mov	r2, r0
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d011      	beq.n	8007438 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	e008      	b.n	800742c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	429a      	cmp	r2, r3
 8007434:	d3f1      	bcc.n	800741a <osPoolCreate+0x72>
 8007436:	e00f      	b.n	8007458 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4618      	mov	r0, r3
 800743e:	f002 fd51 	bl	8009ee4 <vPortFree>
        vPortFree(thePool);
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f002 fd4e 	bl	8009ee4 <vPortFree>
        thePool = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	e004      	b.n	8007458 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800744e:	6978      	ldr	r0, [r7, #20]
 8007450:	f002 fd48 	bl	8009ee4 <vPortFree>
      thePool = NULL;
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007458:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b08a      	sub	sp, #40	; 0x28
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8007472:	f7ff fe69 	bl	8007148 <inHandlerMode>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00e      	beq.n	800749a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800747c:	f3ef 8211 	mrs	r2, BASEPRI
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	617a      	str	r2, [r7, #20]
 8007492:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007494:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	e001      	b.n	800749e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800749a:	f002 fb47 	bl	8009b2c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e029      	b.n	80074f8 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d301      	bcc.n	80074bc <osPoolAlloc+0x5a>
      index = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	4413      	add	r3, r2
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d113      	bne.n	80074f2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	4413      	add	r3, r2
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	440b      	add	r3, r1
 80074e8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	611a      	str	r2, [r3, #16]
      break;
 80074f0:	e007      	b.n	8007502 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3301      	adds	r3, #1
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	69fa      	ldr	r2, [r7, #28]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d3d0      	bcc.n	80074a4 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8007502:	f7ff fe21 	bl	8007148 <inHandlerMode>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	e001      	b.n	800751c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8007518:	f002 fb36 	bl	8009b88 <vPortExitCritical>
  }
  
  return p;
 800751c:	6a3b      	ldr	r3, [r7, #32]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3728      	adds	r7, #40	; 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8007526:	b480      	push	{r7}
 8007528:	b085      	sub	sp, #20
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <osPoolFree+0x14>
    return osErrorParameter;
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	e030      	b.n	800759c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <osPoolFree+0x1e>
    return osErrorParameter;
 8007540:	2380      	movs	r3, #128	; 0x80
 8007542:	e02b      	b.n	800759c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d201      	bcs.n	8007552 <osPoolFree+0x2c>
    return osErrorParameter;
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	e024      	b.n	800759c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	fbb3 f1f2 	udiv	r1, r3, r2
 8007566:	fb02 f201 	mul.w	r2, r2, r1
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <osPoolFree+0x4e>
    return osErrorParameter;
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	e013      	b.n	800759c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	fbb2 f3f3 	udiv	r3, r2, r3
 800757e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	429a      	cmp	r2, r3
 8007588:	d301      	bcc.n	800758e <osPoolFree+0x68>
    return osErrorParameter;
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	e006      	b.n	800759c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d012      	beq.n	80075e0 <osMessageCreate+0x38>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00e      	beq.n	80075e0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68dc      	ldr	r4, [r3, #12]
 80075d2:	2300      	movs	r3, #0
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	4623      	mov	r3, r4
 80075d8:	f000 fb16 	bl	8007c08 <xQueueGenericCreateStatic>
 80075dc:	4603      	mov	r3, r0
 80075de:	e008      	b.n	80075f2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	4619      	mov	r1, r3
 80075ec:	f000 fb7e 	bl	8007cec <xQueueGenericCreate>
 80075f0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd90      	pop	{r4, r7, pc}
	...

080075fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <osMessagePut+0x1e>
    ticks = 1;
 8007616:	2301      	movs	r3, #1
 8007618:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800761a:	f7ff fd95 	bl	8007148 <inHandlerMode>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d018      	beq.n	8007656 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007624:	f107 0210 	add.w	r2, r7, #16
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	2300      	movs	r3, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fcb2 	bl	8007f98 <xQueueGenericSendFromISR>
 8007634:	4603      	mov	r3, r0
 8007636:	2b01      	cmp	r3, #1
 8007638:	d001      	beq.n	800763e <osMessagePut+0x42>
      return osErrorOS;
 800763a:	23ff      	movs	r3, #255	; 0xff
 800763c:	e018      	b.n	8007670 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d014      	beq.n	800766e <osMessagePut+0x72>
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <osMessagePut+0x7c>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	e00b      	b.n	800766e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007656:	f107 0108 	add.w	r1, r7, #8
 800765a:	2300      	movs	r3, #0
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 fba0 	bl	8007da4 <xQueueGenericSend>
 8007664:	4603      	mov	r3, r0
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <osMessagePut+0x72>
      return osErrorOS;
 800766a:	23ff      	movs	r3, #255	; 0xff
 800766c:	e000      	b.n	8007670 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800767c:	b590      	push	{r4, r7, lr}
 800767e:	b08b      	sub	sp, #44	; 0x2c
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	617b      	str	r3, [r7, #20]
    return event;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	461c      	mov	r4, r3
 800769e:	f107 0314 	add.w	r3, r7, #20
 80076a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076aa:	e054      	b.n	8007756 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ba:	d103      	bne.n	80076c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
 80076c2:	e009      	b.n	80076d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <osMessageGet+0x5c>
      ticks = 1;
 80076d4:	2301      	movs	r3, #1
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80076d8:	f7ff fd36 	bl	8007148 <inHandlerMode>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01c      	beq.n	800771c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80076e2:	f107 0220 	add.w	r2, r7, #32
 80076e6:	f107 0314 	add.w	r3, r7, #20
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	68b8      	ldr	r0, [r7, #8]
 80076f0:	f000 ff54 	bl	800859c <xQueueReceiveFromISR>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d102      	bne.n	8007700 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80076fa:	2310      	movs	r3, #16
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	e001      	b.n	8007704 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01d      	beq.n	8007746 <osMessageGet+0xca>
 800770a:	4b15      	ldr	r3, [pc, #84]	; (8007760 <osMessageGet+0xe4>)
 800770c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	e014      	b.n	8007746 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	3304      	adds	r3, #4
 8007722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007724:	4619      	mov	r1, r3
 8007726:	68b8      	ldr	r0, [r7, #8]
 8007728:	f000 fd54 	bl	80081d4 <xQueueReceive>
 800772c:	4603      	mov	r3, r0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d102      	bne.n	8007738 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007732:	2310      	movs	r3, #16
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e006      	b.n	8007746 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <osMessageGet+0xc6>
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <osMessageGet+0xc8>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	461c      	mov	r4, r3
 800774a:	f107 0314 	add.w	r3, r7, #20
 800774e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	372c      	adds	r7, #44	; 0x2c
 800775a:	46bd      	mov	sp, r7
 800775c:	bd90      	pop	{r4, r7, pc}
 800775e:	bf00      	nop
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689c      	ldr	r4, [r3, #8]
 8007782:	200c      	movs	r0, #12
 8007784:	f002 faec 	bl	8009d60 <pvPortMalloc>
 8007788:	4603      	mov	r3, r0
 800778a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <osMailCreate+0x36>
    return NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	e038      	b.n	800780c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	2104      	movs	r1, #4
 80077b2:	f000 fa9b 	bl	8007cec <xQueueGenericCreate>
 80077b6:	4603      	mov	r3, r0
 80077b8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d107      	bne.n	80077d6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 fb89 	bl	8009ee4 <vPortFree>
    return NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e01a      	b.n	800780c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	681c      	ldr	r4, [r3, #0]
 80077dc:	f107 030c 	add.w	r3, r7, #12
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fde1 	bl	80073a8 <osPoolCreate>
 80077e6:	4603      	mov	r3, r0
 80077e8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d107      	bne.n	8007806 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f002 fb71 	bl	8009ee4 <vPortFree>
    return NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	e002      	b.n	800780c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800780c:	4618      	mov	r0, r3
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	bd90      	pop	{r4, r7, pc}

08007814 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <osMailAlloc+0x14>
    return NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	e006      	b.n	8007836 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fe18 	bl	8007462 <osPoolAlloc>
 8007832:	60f8      	str	r0, [r7, #12]
  
  return p;
 8007834:	68fb      	ldr	r3, [r7, #12]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <osMailPut+0x14>
    return osErrorParameter;
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	e02c      	b.n	80078ae <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8007858:	f7ff fc76 	bl	8007148 <inHandlerMode>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d018      	beq.n	8007894 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6858      	ldr	r0, [r3, #4]
 8007866:	f107 020c 	add.w	r2, r7, #12
 800786a:	4639      	mov	r1, r7
 800786c:	2300      	movs	r3, #0
 800786e:	f000 fb93 	bl	8007f98 <xQueueGenericSendFromISR>
 8007872:	4603      	mov	r3, r0
 8007874:	2b01      	cmp	r3, #1
 8007876:	d001      	beq.n	800787c <osMailPut+0x3c>
      return osErrorOS;
 8007878:	23ff      	movs	r3, #255	; 0xff
 800787a:	e018      	b.n	80078ae <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d014      	beq.n	80078ac <osMailPut+0x6c>
 8007882:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <osMailPut+0x78>)
 8007884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	e00b      	b.n	80078ac <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6858      	ldr	r0, [r3, #4]
 8007898:	4639      	mov	r1, r7
 800789a:	2300      	movs	r3, #0
 800789c:	2200      	movs	r2, #0
 800789e:	f000 fa81 	bl	8007da4 <xQueueGenericSend>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d001      	beq.n	80078ac <osMailPut+0x6c>
      return osErrorOS;
 80078a8:	23ff      	movs	r3, #255	; 0xff
 80078aa:	e000      	b.n	80078ae <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b08b      	sub	sp, #44	; 0x2c
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80078d2:	2380      	movs	r3, #128	; 0x80
 80078d4:	617b      	str	r3, [r7, #20]
    return event;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	461c      	mov	r4, r3
 80078da:	f107 0314 	add.w	r3, r7, #20
 80078de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078e6:	e056      	b.n	8007996 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d103      	bne.n	8007900 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
 80078fe:	e009      	b.n	8007914 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d006      	beq.n	8007914 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <osMailGet+0x58>
      ticks = 1;
 8007910:	2301      	movs	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007914:	f7ff fc18 	bl	8007148 <inHandlerMode>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01d      	beq.n	800795a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6858      	ldr	r0, [r3, #4]
 8007922:	f107 0220 	add.w	r2, r7, #32
 8007926:	f107 0314 	add.w	r3, r7, #20
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	f000 fe35 	bl	800859c <xQueueReceiveFromISR>
 8007932:	4603      	mov	r3, r0
 8007934:	2b01      	cmp	r3, #1
 8007936:	d102      	bne.n	800793e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8007938:	2320      	movs	r3, #32
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e001      	b.n	8007942 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01e      	beq.n	8007986 <osMailGet+0xca>
 8007948:	4b15      	ldr	r3, [pc, #84]	; (80079a0 <osMailGet+0xe4>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	e015      	b.n	8007986 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6858      	ldr	r0, [r3, #4]
 800795e:	f107 0314 	add.w	r3, r7, #20
 8007962:	3304      	adds	r3, #4
 8007964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007966:	4619      	mov	r1, r3
 8007968:	f000 fc34 	bl	80081d4 <xQueueReceive>
 800796c:	4603      	mov	r3, r0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d102      	bne.n	8007978 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8007972:	2320      	movs	r3, #32
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e006      	b.n	8007986 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <osMailGet+0xc6>
 800797e:	2300      	movs	r3, #0
 8007980:	e000      	b.n	8007984 <osMailGet+0xc8>
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	461c      	mov	r4, r3
 800798a:	f107 0314 	add.w	r3, r7, #20
 800798e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	372c      	adds	r7, #44	; 0x2c
 800799a:	46bd      	mov	sp, r7
 800799c:	bd90      	pop	{r4, r7, pc}
 800799e:	bf00      	nop
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <osMailFree+0x14>
    return osErrorParameter;
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	e006      	b.n	80079c6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fdb1 	bl	8007526 <osPoolFree>
 80079c4:	4603      	mov	r3, r0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f103 0208 	add.w	r2, r3, #8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f04f 32ff 	mov.w	r2, #4294967295
 80079e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f103 0208 	add.w	r2, r3, #8
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f103 0208 	add.w	r2, r3, #8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a86:	d103      	bne.n	8007a90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e00c      	b.n	8007aaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3308      	adds	r3, #8
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e002      	b.n	8007a9e <vListInsert+0x2e>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d2f6      	bcs.n	8007a98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6892      	ldr	r2, [r2, #8]
 8007af8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6852      	ldr	r2, [r2, #4]
 8007b02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d103      	bne.n	8007b16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	1e5a      	subs	r2, r3, #1
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d109      	bne.n	8007b60 <xQueueGenericReset+0x28>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	e7fe      	b.n	8007b5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007b60:	f001 ffe4 	bl	8009b2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b90:	3b01      	subs	r3, #1
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b96:	fb01 f303 	mul.w	r3, r1, r3
 8007b9a:	441a      	add	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	22ff      	movs	r2, #255	; 0xff
 8007ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	22ff      	movs	r2, #255	; 0xff
 8007bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d114      	bne.n	8007be0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01a      	beq.n	8007bf4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 fa8c 	bl	80090e0 <xTaskRemoveFromEventList>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d012      	beq.n	8007bf4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bce:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <xQueueGenericReset+0xcc>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	e009      	b.n	8007bf4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3310      	adds	r3, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fef2 	bl	80079ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff feed 	bl	80079ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bf4:	f001 ffc8 	bl	8009b88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bf8:	2301      	movs	r3, #1
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d109      	bne.n	8007c30 <xQueueGenericCreateStatic+0x28>
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2e:	e7fe      	b.n	8007c2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <xQueueGenericCreateStatic+0x42>
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
 8007c48:	e7fe      	b.n	8007c48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <xQueueGenericCreateStatic+0x4e>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <xQueueGenericCreateStatic+0x52>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <xQueueGenericCreateStatic+0x54>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <xQueueGenericCreateStatic+0x6c>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	e7fe      	b.n	8007c72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <xQueueGenericCreateStatic+0x78>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <xQueueGenericCreateStatic+0x7c>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <xQueueGenericCreateStatic+0x7e>
 8007c84:	2300      	movs	r3, #0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <xQueueGenericCreateStatic+0x96>
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	61fb      	str	r3, [r7, #28]
 8007c9c:	e7fe      	b.n	8007c9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c9e:	2348      	movs	r3, #72	; 0x48
 8007ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b48      	cmp	r3, #72	; 0x48
 8007ca6:	d009      	beq.n	8007cbc <xQueueGenericCreateStatic+0xb4>
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	e7fe      	b.n	8007cba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00d      	beq.n	8007ce2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f842 	bl	8007d66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3730      	adds	r7, #48	; 0x30
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08a      	sub	sp, #40	; 0x28
 8007cf0:	af02      	add	r7, sp, #8
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d109      	bne.n	8007d14 <xQueueGenericCreate+0x28>
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	613b      	str	r3, [r7, #16]
 8007d12:	e7fe      	b.n	8007d12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e004      	b.n	8007d2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3348      	adds	r3, #72	; 0x48
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f002 f816 	bl	8009d60 <pvPortMalloc>
 8007d34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00f      	beq.n	8007d5c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	3348      	adds	r3, #72	; 0x48
 8007d40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d4a:	79fa      	ldrb	r2, [r7, #7]
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	68b9      	ldr	r1, [r7, #8]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f805 	bl	8007d66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
	}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e002      	b.n	8007d88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d94:	2101      	movs	r1, #1
 8007d96:	69b8      	ldr	r0, [r7, #24]
 8007d98:	f7ff fece 	bl	8007b38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007db2:	2300      	movs	r3, #0
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d109      	bne.n	8007dd4 <xQueueGenericSend+0x30>
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dd2:	e7fe      	b.n	8007dd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d103      	bne.n	8007de2 <xQueueGenericSend+0x3e>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <xQueueGenericSend+0x42>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <xQueueGenericSend+0x44>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <xQueueGenericSend+0x5c>
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfe:	e7fe      	b.n	8007dfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d103      	bne.n	8007e0e <xQueueGenericSend+0x6a>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <xQueueGenericSend+0x6e>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <xQueueGenericSend+0x70>
 8007e12:	2300      	movs	r3, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <xQueueGenericSend+0x88>
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	623b      	str	r3, [r7, #32]
 8007e2a:	e7fe      	b.n	8007e2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e2c:	f001 fb14 	bl	8009458 <xTaskGetSchedulerState>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <xQueueGenericSend+0x98>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <xQueueGenericSend+0x9c>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e000      	b.n	8007e42 <xQueueGenericSend+0x9e>
 8007e40:	2300      	movs	r3, #0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <xQueueGenericSend+0xb6>
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e5a:	f001 fe67 	bl	8009b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <xQueueGenericSend+0xcc>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d129      	bne.n	8007ec4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e76:	f000 fc26 	bl	80086c6 <prvCopyDataToQueue>
 8007e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d010      	beq.n	8007ea6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	3324      	adds	r3, #36	; 0x24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f929 	bl	80090e0 <xTaskRemoveFromEventList>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d013      	beq.n	8007ebc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e94:	4b3f      	ldr	r3, [pc, #252]	; (8007f94 <xQueueGenericSend+0x1f0>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	e00a      	b.n	8007ebc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eac:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <xQueueGenericSend+0x1f0>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ebc:	f001 fe64 	bl	8009b88 <vPortExitCritical>
				return pdPASS;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e063      	b.n	8007f8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eca:	f001 fe5d 	bl	8009b88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e05c      	b.n	8007f8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 f961 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ee6:	f001 fe4f 	bl	8009b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eea:	f000 ff15 	bl	8008d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eee:	f001 fe1d 	bl	8009b2c <vPortEnterCritical>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d103      	bne.n	8007f08 <xQueueGenericSend+0x164>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f14:	d103      	bne.n	8007f1e <xQueueGenericSend+0x17a>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1e:	f001 fe33 	bl	8009b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f22:	1d3a      	adds	r2, r7, #4
 8007f24:	f107 0314 	add.w	r3, r7, #20
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f950 	bl	80091d0 <xTaskCheckForTimeOut>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d124      	bne.n	8007f80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f38:	f000 fcbd 	bl	80088b6 <prvIsQueueFull>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d018      	beq.n	8007f74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 f8a4 	bl	8009098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f52:	f000 fc48 	bl	80087e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f56:	f000 feed 	bl	8008d34 <xTaskResumeAll>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f af7c 	bne.w	8007e5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007f62:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <xQueueGenericSend+0x1f0>)
 8007f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	e772      	b.n	8007e5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f76:	f000 fc36 	bl	80087e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f7a:	f000 fedb 	bl	8008d34 <xTaskResumeAll>
 8007f7e:	e76c      	b.n	8007e5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f82:	f000 fc30 	bl	80087e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f86:	f000 fed5 	bl	8008d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f8a:	2300      	movs	r3, #0
		}
	}
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3738      	adds	r7, #56	; 0x38
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d109      	bne.n	8007fc4 <xQueueGenericSendFromISR+0x2c>
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc2:	e7fe      	b.n	8007fc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <xQueueGenericSendFromISR+0x3a>
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <xQueueGenericSendFromISR+0x3e>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueGenericSendFromISR+0x40>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <xQueueGenericSendFromISR+0x58>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
 8007fee:	e7fe      	b.n	8007fee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d103      	bne.n	8007ffe <xQueueGenericSendFromISR+0x66>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <xQueueGenericSendFromISR+0x6a>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <xQueueGenericSendFromISR+0x6c>
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <xQueueGenericSendFromISR+0x84>
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	e7fe      	b.n	800801a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800801c:	f001 fe62 	bl	8009ce4 <vPortValidateInterruptPriority>
	__asm volatile
 8008020:	f3ef 8211 	mrs	r2, BASEPRI
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	61ba      	str	r2, [r7, #24]
 8008036:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008038:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008044:	429a      	cmp	r2, r3
 8008046:	d302      	bcc.n	800804e <xQueueGenericSendFromISR+0xb6>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d12c      	bne.n	80080a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805e:	f000 fb32 	bl	80086c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008062:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d112      	bne.n	8008092 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d016      	beq.n	80080a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f001 f831 	bl	80090e0 <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00e      	beq.n	80080a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e007      	b.n	80080a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008096:	3301      	adds	r3, #1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	b25a      	sxtb	r2, r3
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080a2:	2301      	movs	r3, #1
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80080a6:	e001      	b.n	80080ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	637b      	str	r3, [r7, #52]	; 0x34
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3738      	adds	r7, #56	; 0x38
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08e      	sub	sp, #56	; 0x38
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	623b      	str	r3, [r7, #32]
 80080e6:	e7fe      	b.n	80080e6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <xQueueGiveFromISR+0x44>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	e7fe      	b.n	8008102 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <xQueueGiveFromISR+0x54>
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <xQueueGiveFromISR+0x58>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <xQueueGiveFromISR+0x5a>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <xQueueGiveFromISR+0x72>
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	e7fe      	b.n	8008130 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008132:	f001 fdd7 	bl	8009ce4 <vPortValidateInterruptPriority>
	__asm volatile
 8008136:	f3ef 8211 	mrs	r2, BASEPRI
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	617a      	str	r2, [r7, #20]
 800814c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800814e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800815e:	429a      	cmp	r2, r3
 8008160:	d22b      	bcs.n	80081ba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d112      	bne.n	80081a4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	d016      	beq.n	80081b4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	3324      	adds	r3, #36	; 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ffa8 	bl	80090e0 <xTaskRemoveFromEventList>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e007      	b.n	80081b4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	b25a      	sxtb	r2, r3
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081b4:	2301      	movs	r3, #1
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
 80081b8:	e001      	b.n	80081be <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3738      	adds	r7, #56	; 0x38
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08c      	sub	sp, #48	; 0x30
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d109      	bne.n	8008202 <xQueueReceive+0x2e>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	623b      	str	r3, [r7, #32]
 8008200:	e7fe      	b.n	8008200 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <xQueueReceive+0x3c>
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <xQueueReceive+0x40>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <xQueueReceive+0x42>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <xQueueReceive+0x5a>
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	e7fe      	b.n	800822c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800822e:	f001 f913 	bl	8009458 <xTaskGetSchedulerState>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <xQueueReceive+0x6a>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <xQueueReceive+0x6e>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueReceive+0x70>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d109      	bne.n	800825c <xQueueReceive+0x88>
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	61bb      	str	r3, [r7, #24]
 800825a:	e7fe      	b.n	800825a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800825c:	f001 fc66 	bl	8009b2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01f      	beq.n	80082ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008270:	f000 fa93 	bl	800879a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	1e5a      	subs	r2, r3, #1
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00f      	beq.n	80082a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	3310      	adds	r3, #16
 8008288:	4618      	mov	r0, r3
 800828a:	f000 ff29 	bl	80090e0 <xTaskRemoveFromEventList>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008294:	4b3c      	ldr	r3, [pc, #240]	; (8008388 <xQueueReceive+0x1b4>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082a4:	f001 fc70 	bl	8009b88 <vPortExitCritical>
				return pdPASS;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e069      	b.n	8008380 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082b2:	f001 fc69 	bl	8009b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e062      	b.n	8008380 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082c0:	f107 0310 	add.w	r3, r7, #16
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 ff6d 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082ca:	2301      	movs	r3, #1
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ce:	f001 fc5b 	bl	8009b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082d2:	f000 fd21 	bl	8008d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d6:	f001 fc29 	bl	8009b2c <vPortEnterCritical>
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d103      	bne.n	80082f0 <xQueueReceive+0x11c>
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f6:	b25b      	sxtb	r3, r3
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d103      	bne.n	8008306 <xQueueReceive+0x132>
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008306:	f001 fc3f 	bl	8009b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800830a:	1d3a      	adds	r2, r7, #4
 800830c:	f107 0310 	add.w	r3, r7, #16
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f000 ff5c 	bl	80091d0 <xTaskCheckForTimeOut>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d123      	bne.n	8008366 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800831e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008320:	f000 fab3 	bl	800888a <prvIsQueueEmpty>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d017      	beq.n	800835a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	3324      	adds	r3, #36	; 0x24
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f000 feb0 	bl	8009098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800833a:	f000 fa54 	bl	80087e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800833e:	f000 fcf9 	bl	8008d34 <xTaskResumeAll>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d189      	bne.n	800825c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008348:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <xQueueReceive+0x1b4>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	e780      	b.n	800825c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800835a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835c:	f000 fa43 	bl	80087e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008360:	f000 fce8 	bl	8008d34 <xTaskResumeAll>
 8008364:	e77a      	b.n	800825c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008368:	f000 fa3d 	bl	80087e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800836c:	f000 fce2 	bl	8008d34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008372:	f000 fa8a 	bl	800888a <prvIsQueueEmpty>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	f43f af6f 	beq.w	800825c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800837e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008380:	4618      	mov	r0, r3
 8008382:	3730      	adds	r7, #48	; 0x30
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08e      	sub	sp, #56	; 0x38
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800839e:	2300      	movs	r3, #0
 80083a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d109      	bne.n	80083bc <xQueueSemaphoreTake+0x30>
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	623b      	str	r3, [r7, #32]
 80083ba:	e7fe      	b.n	80083ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <xQueueSemaphoreTake+0x4c>
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	61fb      	str	r3, [r7, #28]
 80083d6:	e7fe      	b.n	80083d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083d8:	f001 f83e 	bl	8009458 <xTaskGetSchedulerState>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <xQueueSemaphoreTake+0x5c>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <xQueueSemaphoreTake+0x60>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <xQueueSemaphoreTake+0x62>
 80083ec:	2300      	movs	r3, #0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d109      	bne.n	8008406 <xQueueSemaphoreTake+0x7a>
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e7fe      	b.n	8008404 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008406:	f001 fb91 	bl	8009b2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d024      	beq.n	8008460 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	1e5a      	subs	r2, r3, #1
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008426:	f001 f9dd 	bl	80097e4 <pvTaskIncrementMutexHeldCount>
 800842a:	4602      	mov	r2, r0
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00f      	beq.n	8008458 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	3310      	adds	r3, #16
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fe4f 	bl	80090e0 <xTaskRemoveFromEventList>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008448:	4b53      	ldr	r3, [pc, #332]	; (8008598 <xQueueSemaphoreTake+0x20c>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008458:	f001 fb96 	bl	8009b88 <vPortExitCritical>
				return pdPASS;
 800845c:	2301      	movs	r3, #1
 800845e:	e096      	b.n	800858e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d110      	bne.n	8008488 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	d009      	beq.n	8008480 <xQueueSemaphoreTake+0xf4>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	617b      	str	r3, [r7, #20]
 800847e:	e7fe      	b.n	800847e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008480:	f001 fb82 	bl	8009b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008484:	2300      	movs	r3, #0
 8008486:	e082      	b.n	800858e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fe86 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800849c:	f001 fb74 	bl	8009b88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084a0:	f000 fc3a 	bl	8008d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a4:	f001 fb42 	bl	8009b2c <vPortEnterCritical>
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ae:	b25b      	sxtb	r3, r3
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d103      	bne.n	80084be <xQueueSemaphoreTake+0x132>
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d103      	bne.n	80084d4 <xQueueSemaphoreTake+0x148>
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084d4:	f001 fb58 	bl	8009b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084d8:	463a      	mov	r2, r7
 80084da:	f107 030c 	add.w	r3, r7, #12
 80084de:	4611      	mov	r1, r2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fe75 	bl	80091d0 <xTaskCheckForTimeOut>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d132      	bne.n	8008552 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ee:	f000 f9cc 	bl	800888a <prvIsQueueEmpty>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d026      	beq.n	8008546 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008500:	f001 fb14 	bl	8009b2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 ffc3 	bl	8009494 <xTaskPriorityInherit>
 800850e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008510:	f001 fb3a 	bl	8009b88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	3324      	adds	r3, #36	; 0x24
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fdbb 	bl	8009098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008524:	f000 f95f 	bl	80087e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008528:	f000 fc04 	bl	8008d34 <xTaskResumeAll>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f af69 	bne.w	8008406 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008534:	4b18      	ldr	r3, [pc, #96]	; (8008598 <xQueueSemaphoreTake+0x20c>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e75f      	b.n	8008406 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008548:	f000 f94d 	bl	80087e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800854c:	f000 fbf2 	bl	8008d34 <xTaskResumeAll>
 8008550:	e759      	b.n	8008406 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008554:	f000 f947 	bl	80087e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008558:	f000 fbec 	bl	8008d34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800855e:	f000 f994 	bl	800888a <prvIsQueueEmpty>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f43f af4e 	beq.w	8008406 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008570:	f001 fadc 	bl	8009b2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008576:	f000 f88e 	bl	8008696 <prvGetDisinheritPriorityAfterTimeout>
 800857a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008582:	4618      	mov	r0, r3
 8008584:	f001 f890 	bl	80096a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008588:	f001 fafe 	bl	8009b88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800858c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800858e:	4618      	mov	r0, r3
 8008590:	3738      	adds	r7, #56	; 0x38
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	; 0x38
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <xQueueReceiveFromISR+0x2a>
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	e7fe      	b.n	80085c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <xQueueReceiveFromISR+0x38>
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <xQueueReceiveFromISR+0x3c>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <xQueueReceiveFromISR+0x3e>
 80085d8:	2300      	movs	r3, #0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <xQueueReceiveFromISR+0x56>
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	e7fe      	b.n	80085f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085f2:	f001 fb77 	bl	8009ce4 <vPortValidateInterruptPriority>
	__asm volatile
 80085f6:	f3ef 8211 	mrs	r2, BASEPRI
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	61ba      	str	r2, [r7, #24]
 800860c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800860e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d02f      	beq.n	800867e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800862c:	f000 f8b5 	bl	800879a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	1e5a      	subs	r2, r3, #1
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d112      	bne.n	8008668 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	3310      	adds	r3, #16
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fd46 	bl	80090e0 <xTaskRemoveFromEventList>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	e007      	b.n	8008678 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800866c:	3301      	adds	r3, #1
 800866e:	b2db      	uxtb	r3, r3
 8008670:	b25a      	sxtb	r2, r3
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008678:	2301      	movs	r3, #1
 800867a:	637b      	str	r3, [r7, #52]	; 0x34
 800867c:	e001      	b.n	8008682 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800868c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800868e:	4618      	mov	r0, r3
 8008690:	3738      	adds	r7, #56	; 0x38
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008696:	b480      	push	{r7}
 8008698:	b085      	sub	sp, #20
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1c3 0307 	rsb	r3, r3, #7
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	e001      	b.n	80086b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80086b8:	68fb      	ldr	r3, [r7, #12]
	}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10d      	bne.n	8008700 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d14d      	bne.n	8008788 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 ff55 	bl	80095a0 <xTaskPriorityDisinherit>
 80086f6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	e043      	b.n	8008788 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d119      	bne.n	800873a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6898      	ldr	r0, [r3, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	461a      	mov	r2, r3
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	f002 fe83 	bl	800b41c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	441a      	add	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d32b      	bcc.n	8008788 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	609a      	str	r2, [r3, #8]
 8008738:	e026      	b.n	8008788 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68d8      	ldr	r0, [r3, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	461a      	mov	r2, r3
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	f002 fe69 	bl	800b41c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	425b      	negs	r3, r3
 8008754:	441a      	add	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d207      	bcs.n	8008776 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	425b      	negs	r3, r3
 8008770:	441a      	add	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d105      	bne.n	8008788 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3b01      	subs	r3, #1
 8008786:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008790:	697b      	ldr	r3, [r7, #20]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d018      	beq.n	80087de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	441a      	add	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d303      	bcc.n	80087ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68d9      	ldr	r1, [r3, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	461a      	mov	r2, r3
 80087d8:	6838      	ldr	r0, [r7, #0]
 80087da:	f002 fe1f 	bl	800b41c <memcpy>
	}
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087ee:	f001 f99d 	bl	8009b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087fa:	e011      	b.n	8008820 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	d012      	beq.n	800882a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3324      	adds	r3, #36	; 0x24
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fc69 	bl	80090e0 <xTaskRemoveFromEventList>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008814:	f000 fd3c 	bl	8009290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	3b01      	subs	r3, #1
 800881c:	b2db      	uxtb	r3, r3
 800881e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008824:	2b00      	cmp	r3, #0
 8008826:	dce9      	bgt.n	80087fc <prvUnlockQueue+0x16>
 8008828:	e000      	b.n	800882c <prvUnlockQueue+0x46>
					break;
 800882a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	22ff      	movs	r2, #255	; 0xff
 8008830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008834:	f001 f9a8 	bl	8009b88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008838:	f001 f978 	bl	8009b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008842:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008844:	e011      	b.n	800886a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d012      	beq.n	8008874 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3310      	adds	r3, #16
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fc44 	bl	80090e0 <xTaskRemoveFromEventList>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800885e:	f000 fd17 	bl	8009290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	3b01      	subs	r3, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800886a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dce9      	bgt.n	8008846 <prvUnlockQueue+0x60>
 8008872:	e000      	b.n	8008876 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008874:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800887e:	f001 f983 	bl	8009b88 <vPortExitCritical>
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008892:	f001 f94b 	bl	8009b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	d102      	bne.n	80088a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800889e:	2301      	movs	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	e001      	b.n	80088a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088a8:	f001 f96e 	bl	8009b88 <vPortExitCritical>

	return xReturn;
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088be:	f001 f935 	bl	8009b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d102      	bne.n	80088d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088ce:	2301      	movs	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	e001      	b.n	80088d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088d8:	f001 f956 	bl	8009b88 <vPortExitCritical>

	return xReturn;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b08e      	sub	sp, #56	; 0x38
 80088ea:	af04      	add	r7, sp, #16
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <xTaskCreateStatic+0x28>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	623b      	str	r3, [r7, #32]
 800890c:	e7fe      	b.n	800890c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <xTaskCreateStatic+0x42>
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	e7fe      	b.n	8008926 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008928:	2354      	movs	r3, #84	; 0x54
 800892a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b54      	cmp	r3, #84	; 0x54
 8008930:	d009      	beq.n	8008946 <xTaskCreateStatic+0x60>
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	e7fe      	b.n	8008944 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01e      	beq.n	800898a <xTaskCreateStatic+0xa4>
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01b      	beq.n	800898a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800895a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	2202      	movs	r2, #2
 8008960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008964:	2300      	movs	r3, #0
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	68b9      	ldr	r1, [r7, #8]
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f850 	bl	8008a22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008984:	f000 f8cc 	bl	8008b20 <prvAddNewTaskToReadyList>
 8008988:	e001      	b.n	800898e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800898e:	697b      	ldr	r3, [r7, #20]
	}
 8008990:	4618      	mov	r0, r3
 8008992:	3728      	adds	r7, #40	; 0x28
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	; 0x30
 800899c:	af04      	add	r7, sp, #16
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	4613      	mov	r3, r2
 80089a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 f9d7 	bl	8009d60 <pvPortMalloc>
 80089b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00e      	beq.n	80089d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80089ba:	2054      	movs	r0, #84	; 0x54
 80089bc:	f001 f9d0 	bl	8009d60 <pvPortMalloc>
 80089c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	631a      	str	r2, [r3, #48]	; 0x30
 80089ce:	e005      	b.n	80089dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089d0:	6978      	ldr	r0, [r7, #20]
 80089d2:	f001 fa87 	bl	8009ee4 <vPortFree>
 80089d6:	e001      	b.n	80089dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d017      	beq.n	8008a12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	2300      	movs	r3, #0
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f80e 	bl	8008a22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a06:	69f8      	ldr	r0, [r7, #28]
 8008a08:	f000 f88a 	bl	8008b20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	e002      	b.n	8008a18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a12:	f04f 33ff 	mov.w	r3, #4294967295
 8008a16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a18:	69bb      	ldr	r3, [r7, #24]
	}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3720      	adds	r7, #32
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b088      	sub	sp, #32
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	f023 0307 	bic.w	r3, r3, #7
 8008a48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <prvInitialiseNewTask+0x46>
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e7fe      	b.n	8008a66 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	e012      	b.n	8008a94 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	7819      	ldrb	r1, [r3, #0]
 8008a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3334      	adds	r3, #52	; 0x34
 8008a7e:	460a      	mov	r2, r1
 8008a80:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	3301      	adds	r3, #1
 8008a92:	61fb      	str	r3, [r7, #28]
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d9e9      	bls.n	8008a6e <prvInitialiseNewTask+0x4c>
 8008a9a:	e000      	b.n	8008a9e <prvInitialiseNewTask+0x7c>
		{
			break;
 8008a9c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	d901      	bls.n	8008ab0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008aac:	2306      	movs	r3, #6
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	2200      	movs	r2, #0
 8008ac0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe ffa1 	bl	8007a0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	3318      	adds	r3, #24
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe ff9c 	bl	8007a0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	f1c3 0207 	rsb	r2, r3, #7
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2200      	movs	r2, #0
 8008af0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	68f9      	ldr	r1, [r7, #12]
 8008afe:	69b8      	ldr	r0, [r7, #24]
 8008b00:	f000 feea 	bl	80098d8 <pxPortInitialiseStack>
 8008b04:	4602      	mov	r2, r0
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b16:	bf00      	nop
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b28:	f001 f800 	bl	8009b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b2c:	4b2a      	ldr	r3, [pc, #168]	; (8008bd8 <prvAddNewTaskToReadyList+0xb8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a29      	ldr	r2, [pc, #164]	; (8008bd8 <prvAddNewTaskToReadyList+0xb8>)
 8008b34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b36:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <prvAddNewTaskToReadyList+0xbc>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b3e:	4a27      	ldr	r2, [pc, #156]	; (8008bdc <prvAddNewTaskToReadyList+0xbc>)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b44:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <prvAddNewTaskToReadyList+0xb8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d110      	bne.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b4c:	f000 fbc4 	bl	80092d8 <prvInitialiseTaskLists>
 8008b50:	e00d      	b.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b52:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <prvAddNewTaskToReadyList+0xc0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b5a:	4b20      	ldr	r3, [pc, #128]	; (8008bdc <prvAddNewTaskToReadyList+0xbc>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d802      	bhi.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b68:	4a1c      	ldr	r2, [pc, #112]	; (8008bdc <prvAddNewTaskToReadyList+0xbc>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <prvAddNewTaskToReadyList+0xc4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	4a1b      	ldr	r2, [pc, #108]	; (8008be4 <prvAddNewTaskToReadyList+0xc4>)
 8008b76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	409a      	lsls	r2, r3
 8008b80:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	4a18      	ldr	r2, [pc, #96]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4a15      	ldr	r2, [pc, #84]	; (8008bec <prvAddNewTaskToReadyList+0xcc>)
 8008b98:	441a      	add	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	f7fe ff41 	bl	8007a28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ba6:	f000 ffef 	bl	8009b88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008baa:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <prvAddNewTaskToReadyList+0xc0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00e      	beq.n	8008bd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <prvAddNewTaskToReadyList+0xbc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d207      	bcs.n	8008bd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <prvAddNewTaskToReadyList+0xd0>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200001b4 	.word	0x200001b4
 8008bdc:	200000b4 	.word	0x200000b4
 8008be0:	200001c0 	.word	0x200001c0
 8008be4:	200001d0 	.word	0x200001d0
 8008be8:	200001bc 	.word	0x200001bc
 8008bec:	200000b8 	.word	0x200000b8
 8008bf0:	e000ed04 	.word	0xe000ed04

08008bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d016      	beq.n	8008c34 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <vTaskDelay+0x60>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <vTaskDelay+0x2e>
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	60bb      	str	r3, [r7, #8]
 8008c20:	e7fe      	b.n	8008c20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008c22:	f000 f879 	bl	8008d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c26:	2100      	movs	r1, #0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fdef 	bl	800980c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c2e:	f000 f881 	bl	8008d34 <xTaskResumeAll>
 8008c32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d107      	bne.n	8008c4a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008c3a:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <vTaskDelay+0x64>)
 8008c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	200001dc 	.word	0x200001dc
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	; 0x28
 8008c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c6a:	463a      	mov	r2, r7
 8008c6c:	1d39      	adds	r1, r7, #4
 8008c6e:	f107 0308 	add.w	r3, r7, #8
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 fa4a 	bl	800a10c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	9202      	str	r2, [sp, #8]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	2300      	movs	r3, #0
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	460a      	mov	r2, r1
 8008c8a:	491d      	ldr	r1, [pc, #116]	; (8008d00 <vTaskStartScheduler+0xa4>)
 8008c8c:	481d      	ldr	r0, [pc, #116]	; (8008d04 <vTaskStartScheduler+0xa8>)
 8008c8e:	f7ff fe2a 	bl	80088e6 <xTaskCreateStatic>
 8008c92:	4602      	mov	r2, r0
 8008c94:	4b1c      	ldr	r3, [pc, #112]	; (8008d08 <vTaskStartScheduler+0xac>)
 8008c96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c98:	4b1b      	ldr	r3, [pc, #108]	; (8008d08 <vTaskStartScheduler+0xac>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	e001      	b.n	8008caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d115      	bne.n	8008cdc <vTaskStartScheduler+0x80>
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cc2:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <vTaskStartScheduler+0xb0>)
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cca:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <vTaskStartScheduler+0xb4>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008cd0:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <vTaskStartScheduler+0xb8>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cd6:	f000 fe8b 	bl	80099f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cda:	e00d      	b.n	8008cf8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d109      	bne.n	8008cf8 <vTaskStartScheduler+0x9c>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e7fe      	b.n	8008cf6 <vTaskStartScheduler+0x9a>
}
 8008cf8:	bf00      	nop
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	0800bc90 	.word	0x0800bc90
 8008d04:	080092a9 	.word	0x080092a9
 8008d08:	200001d8 	.word	0x200001d8
 8008d0c:	200001d4 	.word	0x200001d4
 8008d10:	200001c0 	.word	0x200001c0
 8008d14:	200001b8 	.word	0x200001b8

08008d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008d1c:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <vTaskSuspendAll+0x18>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	4a03      	ldr	r2, [pc, #12]	; (8008d30 <vTaskSuspendAll+0x18>)
 8008d24:	6013      	str	r3, [r2, #0]
}
 8008d26:	bf00      	nop
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	200001dc 	.word	0x200001dc

08008d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d42:	4b41      	ldr	r3, [pc, #260]	; (8008e48 <xTaskResumeAll+0x114>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <xTaskResumeAll+0x2a>
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	e7fe      	b.n	8008d5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d5e:	f000 fee5 	bl	8009b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d62:	4b39      	ldr	r3, [pc, #228]	; (8008e48 <xTaskResumeAll+0x114>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4a37      	ldr	r2, [pc, #220]	; (8008e48 <xTaskResumeAll+0x114>)
 8008d6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d6c:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <xTaskResumeAll+0x114>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d161      	bne.n	8008e38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d74:	4b35      	ldr	r3, [pc, #212]	; (8008e4c <xTaskResumeAll+0x118>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d05d      	beq.n	8008e38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d7c:	e02e      	b.n	8008ddc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d7e:	4b34      	ldr	r3, [pc, #208]	; (8008e50 <xTaskResumeAll+0x11c>)
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3318      	adds	r3, #24
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fea9 	bl	8007ae2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fea4 	bl	8007ae2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	2201      	movs	r2, #1
 8008da0:	409a      	lsls	r2, r3
 8008da2:	4b2c      	ldr	r3, [pc, #176]	; (8008e54 <xTaskResumeAll+0x120>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	4a2a      	ldr	r2, [pc, #168]	; (8008e54 <xTaskResumeAll+0x120>)
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4a27      	ldr	r2, [pc, #156]	; (8008e58 <xTaskResumeAll+0x124>)
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f7fe fe30 	bl	8007a28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dcc:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <xTaskResumeAll+0x128>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008dd6:	4b22      	ldr	r3, [pc, #136]	; (8008e60 <xTaskResumeAll+0x12c>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ddc:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <xTaskResumeAll+0x11c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1cc      	bne.n	8008d7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dea:	f000 fb0f 	bl	800940c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dee:	4b1d      	ldr	r3, [pc, #116]	; (8008e64 <xTaskResumeAll+0x130>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d010      	beq.n	8008e1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dfa:	f000 f837 	bl	8008e6c <xTaskIncrementTick>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008e04:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <xTaskResumeAll+0x12c>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f1      	bne.n	8008dfa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008e16:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <xTaskResumeAll+0x130>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e1c:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <xTaskResumeAll+0x12c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e28:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <xTaskResumeAll+0x134>)
 8008e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e38:	f000 fea6 	bl	8009b88 <vPortExitCritical>

	return xAlreadyYielded;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200001dc 	.word	0x200001dc
 8008e4c:	200001b4 	.word	0x200001b4
 8008e50:	20000174 	.word	0x20000174
 8008e54:	200001bc 	.word	0x200001bc
 8008e58:	200000b8 	.word	0x200000b8
 8008e5c:	200000b4 	.word	0x200000b4
 8008e60:	200001c8 	.word	0x200001c8
 8008e64:	200001c4 	.word	0x200001c4
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e76:	4b50      	ldr	r3, [pc, #320]	; (8008fb8 <xTaskIncrementTick+0x14c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f040 808c 	bne.w	8008f98 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e80:	4b4e      	ldr	r3, [pc, #312]	; (8008fbc <xTaskIncrementTick+0x150>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e88:	4a4c      	ldr	r2, [pc, #304]	; (8008fbc <xTaskIncrementTick+0x150>)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d11f      	bne.n	8008ed4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e94:	4b4a      	ldr	r3, [pc, #296]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <xTaskIncrementTick+0x46>
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	e7fe      	b.n	8008eb0 <xTaskIncrementTick+0x44>
 8008eb2:	4b43      	ldr	r3, [pc, #268]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	4b42      	ldr	r3, [pc, #264]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a40      	ldr	r2, [pc, #256]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	4a40      	ldr	r2, [pc, #256]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	4b40      	ldr	r3, [pc, #256]	; (8008fc8 <xTaskIncrementTick+0x15c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	4a3e      	ldr	r2, [pc, #248]	; (8008fc8 <xTaskIncrementTick+0x15c>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	f000 fa9c 	bl	800940c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ed4:	4b3d      	ldr	r3, [pc, #244]	; (8008fcc <xTaskIncrementTick+0x160>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d34d      	bcc.n	8008f7a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ede:	4b38      	ldr	r3, [pc, #224]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <xTaskIncrementTick+0x80>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <xTaskIncrementTick+0x82>
 8008eec:	2300      	movs	r3, #0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <xTaskIncrementTick+0x160>)
 8008ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef8:	601a      	str	r2, [r3, #0]
					break;
 8008efa:	e03e      	b.n	8008f7a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008efc:	4b30      	ldr	r3, [pc, #192]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d203      	bcs.n	8008f1c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f14:	4a2d      	ldr	r2, [pc, #180]	; (8008fcc <xTaskIncrementTick+0x160>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6013      	str	r3, [r2, #0]
						break;
 8008f1a:	e02e      	b.n	8008f7a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fdde 	bl	8007ae2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	3318      	adds	r3, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fdd5 	bl	8007ae2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	409a      	lsls	r2, r3
 8008f40:	4b23      	ldr	r3, [pc, #140]	; (8008fd0 <xTaskIncrementTick+0x164>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	4a22      	ldr	r2, [pc, #136]	; (8008fd0 <xTaskIncrementTick+0x164>)
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4a1f      	ldr	r2, [pc, #124]	; (8008fd4 <xTaskIncrementTick+0x168>)
 8008f58:	441a      	add	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f7fe fd61 	bl	8007a28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6a:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <xTaskIncrementTick+0x16c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d3b4      	bcc.n	8008ede <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008f74:	2301      	movs	r3, #1
 8008f76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f78:	e7b1      	b.n	8008ede <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f7a:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <xTaskIncrementTick+0x16c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4914      	ldr	r1, [pc, #80]	; (8008fd4 <xTaskIncrementTick+0x168>)
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d907      	bls.n	8008fa2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008f92:	2301      	movs	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	e004      	b.n	8008fa2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008f98:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <xTaskIncrementTick+0x170>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	4a0f      	ldr	r2, [pc, #60]	; (8008fdc <xTaskIncrementTick+0x170>)
 8008fa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <xTaskIncrementTick+0x174>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008faa:	2301      	movs	r3, #1
 8008fac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008fae:	697b      	ldr	r3, [r7, #20]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	200001dc 	.word	0x200001dc
 8008fbc:	200001b8 	.word	0x200001b8
 8008fc0:	2000016c 	.word	0x2000016c
 8008fc4:	20000170 	.word	0x20000170
 8008fc8:	200001cc 	.word	0x200001cc
 8008fcc:	200001d4 	.word	0x200001d4
 8008fd0:	200001bc 	.word	0x200001bc
 8008fd4:	200000b8 	.word	0x200000b8
 8008fd8:	200000b4 	.word	0x200000b4
 8008fdc:	200001c4 	.word	0x200001c4
 8008fe0:	200001c8 	.word	0x200001c8

08008fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fea:	4b26      	ldr	r3, [pc, #152]	; (8009084 <vTaskSwitchContext+0xa0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ff2:	4b25      	ldr	r3, [pc, #148]	; (8009088 <vTaskSwitchContext+0xa4>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ff8:	e03e      	b.n	8009078 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008ffa:	4b23      	ldr	r3, [pc, #140]	; (8009088 <vTaskSwitchContext+0xa4>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009000:	4b22      	ldr	r3, [pc, #136]	; (800908c <vTaskSwitchContext+0xa8>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	fab3 f383 	clz	r3, r3
 800900c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800900e:	7afb      	ldrb	r3, [r7, #11]
 8009010:	f1c3 031f 	rsb	r3, r3, #31
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	491e      	ldr	r1, [pc, #120]	; (8009090 <vTaskSwitchContext+0xac>)
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <vTaskSwitchContext+0x5a>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	607b      	str	r3, [r7, #4]
 800903c:	e7fe      	b.n	800903c <vTaskSwitchContext+0x58>
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4a11      	ldr	r2, [pc, #68]	; (8009090 <vTaskSwitchContext+0xac>)
 800904a:	4413      	add	r3, r2
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3308      	adds	r3, #8
 8009060:	429a      	cmp	r2, r3
 8009062:	d104      	bne.n	800906e <vTaskSwitchContext+0x8a>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	605a      	str	r2, [r3, #4]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4a07      	ldr	r2, [pc, #28]	; (8009094 <vTaskSwitchContext+0xb0>)
 8009076:	6013      	str	r3, [r2, #0]
}
 8009078:	bf00      	nop
 800907a:	371c      	adds	r7, #28
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	200001dc 	.word	0x200001dc
 8009088:	200001c8 	.word	0x200001c8
 800908c:	200001bc 	.word	0x200001bc
 8009090:	200000b8 	.word	0x200000b8
 8009094:	200000b4 	.word	0x200000b4

08009098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <vTaskPlaceOnEventList+0x24>
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	e7fe      	b.n	80090ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090bc:	4b07      	ldr	r3, [pc, #28]	; (80090dc <vTaskPlaceOnEventList+0x44>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3318      	adds	r3, #24
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fe fcd3 	bl	8007a70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090ca:	2101      	movs	r1, #1
 80090cc:	6838      	ldr	r0, [r7, #0]
 80090ce:	f000 fb9d 	bl	800980c <prvAddCurrentTaskToDelayedList>
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200000b4 	.word	0x200000b4

080090e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <xTaskRemoveFromEventList+0x2a>
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e7fe      	b.n	8009108 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3318      	adds	r3, #24
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fce7 	bl	8007ae2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009114:	4b1d      	ldr	r3, [pc, #116]	; (800918c <xTaskRemoveFromEventList+0xac>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11c      	bne.n	8009156 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3304      	adds	r3, #4
 8009120:	4618      	mov	r0, r3
 8009122:	f7fe fcde 	bl	8007ae2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	2201      	movs	r2, #1
 800912c:	409a      	lsls	r2, r3
 800912e:	4b18      	ldr	r3, [pc, #96]	; (8009190 <xTaskRemoveFromEventList+0xb0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4313      	orrs	r3, r2
 8009134:	4a16      	ldr	r2, [pc, #88]	; (8009190 <xTaskRemoveFromEventList+0xb0>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4a13      	ldr	r2, [pc, #76]	; (8009194 <xTaskRemoveFromEventList+0xb4>)
 8009146:	441a      	add	r2, r3
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fc6a 	bl	8007a28 <vListInsertEnd>
 8009154:	e005      	b.n	8009162 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	3318      	adds	r3, #24
 800915a:	4619      	mov	r1, r3
 800915c:	480e      	ldr	r0, [pc, #56]	; (8009198 <xTaskRemoveFromEventList+0xb8>)
 800915e:	f7fe fc63 	bl	8007a28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <xTaskRemoveFromEventList+0xbc>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	429a      	cmp	r2, r3
 800916e:	d905      	bls.n	800917c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009174:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <xTaskRemoveFromEventList+0xc0>)
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e001      	b.n	8009180 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009180:	697b      	ldr	r3, [r7, #20]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	200001dc 	.word	0x200001dc
 8009190:	200001bc 	.word	0x200001bc
 8009194:	200000b8 	.word	0x200000b8
 8009198:	20000174 	.word	0x20000174
 800919c:	200000b4 	.word	0x200000b4
 80091a0:	200001c8 	.word	0x200001c8

080091a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <vTaskInternalSetTimeOutState+0x24>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <vTaskInternalSetTimeOutState+0x28>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	605a      	str	r2, [r3, #4]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	200001cc 	.word	0x200001cc
 80091cc:	200001b8 	.word	0x200001b8

080091d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d109      	bne.n	80091f4 <xTaskCheckForTimeOut+0x24>
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	e7fe      	b.n	80091f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <xTaskCheckForTimeOut+0x3e>
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	e7fe      	b.n	800920c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800920e:	f000 fc8d 	bl	8009b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009212:	4b1d      	ldr	r3, [pc, #116]	; (8009288 <xTaskCheckForTimeOut+0xb8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922a:	d102      	bne.n	8009232 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800922c:	2300      	movs	r3, #0
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	e023      	b.n	800927a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	4b15      	ldr	r3, [pc, #84]	; (800928c <xTaskCheckForTimeOut+0xbc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d007      	beq.n	800924e <xTaskCheckForTimeOut+0x7e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	429a      	cmp	r2, r3
 8009246:	d302      	bcc.n	800924e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009248:	2301      	movs	r3, #1
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	e015      	b.n	800927a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	429a      	cmp	r2, r3
 8009256:	d20b      	bcs.n	8009270 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ff9d 	bl	80091a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	e004      	b.n	800927a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009276:	2301      	movs	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800927a:	f000 fc85 	bl	8009b88 <vPortExitCritical>

	return xReturn;
 800927e:	69fb      	ldr	r3, [r7, #28]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200001b8 	.word	0x200001b8
 800928c:	200001cc 	.word	0x200001cc

08009290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009294:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <vTaskMissedYield+0x14>)
 8009296:	2201      	movs	r2, #1
 8009298:	601a      	str	r2, [r3, #0]
}
 800929a:	bf00      	nop
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	200001c8 	.word	0x200001c8

080092a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092b0:	f000 f852 	bl	8009358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092b4:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <prvIdleTask+0x28>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d9f9      	bls.n	80092b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092bc:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <prvIdleTask+0x2c>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092cc:	e7f0      	b.n	80092b0 <prvIdleTask+0x8>
 80092ce:	bf00      	nop
 80092d0:	200000b8 	.word	0x200000b8
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092de:	2300      	movs	r3, #0
 80092e0:	607b      	str	r3, [r7, #4]
 80092e2:	e00c      	b.n	80092fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a12      	ldr	r2, [pc, #72]	; (8009338 <prvInitialiseTaskLists+0x60>)
 80092f0:	4413      	add	r3, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fb6b 	bl	80079ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3301      	adds	r3, #1
 80092fc:	607b      	str	r3, [r7, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b06      	cmp	r3, #6
 8009302:	d9ef      	bls.n	80092e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009304:	480d      	ldr	r0, [pc, #52]	; (800933c <prvInitialiseTaskLists+0x64>)
 8009306:	f7fe fb62 	bl	80079ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800930a:	480d      	ldr	r0, [pc, #52]	; (8009340 <prvInitialiseTaskLists+0x68>)
 800930c:	f7fe fb5f 	bl	80079ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009310:	480c      	ldr	r0, [pc, #48]	; (8009344 <prvInitialiseTaskLists+0x6c>)
 8009312:	f7fe fb5c 	bl	80079ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <prvInitialiseTaskLists+0x70>)
 8009318:	f7fe fb59 	bl	80079ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <prvInitialiseTaskLists+0x74>)
 800931e:	f7fe fb56 	bl	80079ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009322:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <prvInitialiseTaskLists+0x78>)
 8009324:	4a05      	ldr	r2, [pc, #20]	; (800933c <prvInitialiseTaskLists+0x64>)
 8009326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <prvInitialiseTaskLists+0x7c>)
 800932a:	4a05      	ldr	r2, [pc, #20]	; (8009340 <prvInitialiseTaskLists+0x68>)
 800932c:	601a      	str	r2, [r3, #0]
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200000b8 	.word	0x200000b8
 800933c:	20000144 	.word	0x20000144
 8009340:	20000158 	.word	0x20000158
 8009344:	20000174 	.word	0x20000174
 8009348:	20000188 	.word	0x20000188
 800934c:	200001a0 	.word	0x200001a0
 8009350:	2000016c 	.word	0x2000016c
 8009354:	20000170 	.word	0x20000170

08009358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800935e:	e019      	b.n	8009394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009360:	f000 fbe4 	bl	8009b2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009364:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <prvCheckTasksWaitingTermination+0x4c>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3304      	adds	r3, #4
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fbb6 	bl	8007ae2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <prvCheckTasksWaitingTermination+0x50>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3b01      	subs	r3, #1
 800937c:	4a0a      	ldr	r2, [pc, #40]	; (80093a8 <prvCheckTasksWaitingTermination+0x50>)
 800937e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009380:	4b0a      	ldr	r3, [pc, #40]	; (80093ac <prvCheckTasksWaitingTermination+0x54>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3b01      	subs	r3, #1
 8009386:	4a09      	ldr	r2, [pc, #36]	; (80093ac <prvCheckTasksWaitingTermination+0x54>)
 8009388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800938a:	f000 fbfd 	bl	8009b88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f80e 	bl	80093b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009394:	4b05      	ldr	r3, [pc, #20]	; (80093ac <prvCheckTasksWaitingTermination+0x54>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e1      	bne.n	8009360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000188 	.word	0x20000188
 80093a8:	200001b4 	.word	0x200001b4
 80093ac:	2000019c 	.word	0x2000019c

080093b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d108      	bne.n	80093d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fd8c 	bl	8009ee4 <vPortFree>
				vPortFree( pxTCB );
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fd89 	bl	8009ee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093d2:	e017      	b.n	8009404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d103      	bne.n	80093e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fd80 	bl	8009ee4 <vPortFree>
	}
 80093e4:	e00e      	b.n	8009404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d009      	beq.n	8009404 <prvDeleteTCB+0x54>
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	e7fe      	b.n	8009402 <prvDeleteTCB+0x52>
	}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <prvResetNextTaskUnblockTime+0x44>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <prvResetNextTaskUnblockTime+0x14>
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <prvResetNextTaskUnblockTime+0x16>
 8009420:	2300      	movs	r3, #0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009426:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <prvResetNextTaskUnblockTime+0x48>)
 8009428:	f04f 32ff 	mov.w	r2, #4294967295
 800942c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800942e:	e008      	b.n	8009442 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <prvResetNextTaskUnblockTime+0x44>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	4a05      	ldr	r2, [pc, #20]	; (8009454 <prvResetNextTaskUnblockTime+0x48>)
 8009440:	6013      	str	r3, [r2, #0]
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	2000016c 	.word	0x2000016c
 8009454:	200001d4 	.word	0x200001d4

08009458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800945e:	4b0b      	ldr	r3, [pc, #44]	; (800948c <xTaskGetSchedulerState+0x34>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009466:	2301      	movs	r3, #1
 8009468:	607b      	str	r3, [r7, #4]
 800946a:	e008      	b.n	800947e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800946c:	4b08      	ldr	r3, [pc, #32]	; (8009490 <xTaskGetSchedulerState+0x38>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009474:	2302      	movs	r3, #2
 8009476:	607b      	str	r3, [r7, #4]
 8009478:	e001      	b.n	800947e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800947a:	2300      	movs	r3, #0
 800947c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800947e:	687b      	ldr	r3, [r7, #4]
	}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	200001c0 	.word	0x200001c0
 8009490:	200001dc 	.word	0x200001dc

08009494 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d06e      	beq.n	8009588 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	4b39      	ldr	r3, [pc, #228]	; (8009594 <xTaskPriorityInherit+0x100>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d25e      	bcs.n	8009576 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	db06      	blt.n	80094ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c0:	4b34      	ldr	r3, [pc, #208]	; (8009594 <xTaskPriorityInherit+0x100>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	f1c3 0207 	rsb	r2, r3, #7
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6959      	ldr	r1, [r3, #20]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4a2e      	ldr	r2, [pc, #184]	; (8009598 <xTaskPriorityInherit+0x104>)
 80094e0:	4413      	add	r3, r2
 80094e2:	4299      	cmp	r1, r3
 80094e4:	d101      	bne.n	80094ea <xTaskPriorityInherit+0x56>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <xTaskPriorityInherit+0x58>
 80094ea:	2300      	movs	r3, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d03a      	beq.n	8009566 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	3304      	adds	r3, #4
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe faf4 	bl	8007ae2 <uxListRemove>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d115      	bne.n	800952c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	4924      	ldr	r1, [pc, #144]	; (8009598 <xTaskPriorityInherit+0x104>)
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <xTaskPriorityInherit+0x98>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	2201      	movs	r2, #1
 800951c:	fa02 f303 	lsl.w	r3, r2, r3
 8009520:	43da      	mvns	r2, r3
 8009522:	4b1e      	ldr	r3, [pc, #120]	; (800959c <xTaskPriorityInherit+0x108>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4013      	ands	r3, r2
 8009528:	4a1c      	ldr	r2, [pc, #112]	; (800959c <xTaskPriorityInherit+0x108>)
 800952a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800952c:	4b19      	ldr	r3, [pc, #100]	; (8009594 <xTaskPriorityInherit+0x100>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	2201      	movs	r2, #1
 800953c:	409a      	lsls	r2, r3
 800953e:	4b17      	ldr	r3, [pc, #92]	; (800959c <xTaskPriorityInherit+0x108>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4313      	orrs	r3, r2
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <xTaskPriorityInherit+0x108>)
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4a10      	ldr	r2, [pc, #64]	; (8009598 <xTaskPriorityInherit+0x104>)
 8009556:	441a      	add	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f7fe fa62 	bl	8007a28 <vListInsertEnd>
 8009564:	e004      	b.n	8009570 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <xTaskPriorityInherit+0x100>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	e008      	b.n	8009588 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800957a:	4b06      	ldr	r3, [pc, #24]	; (8009594 <xTaskPriorityInherit+0x100>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	429a      	cmp	r2, r3
 8009582:	d201      	bcs.n	8009588 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009588:	68fb      	ldr	r3, [r7, #12]
	}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	200000b4 	.word	0x200000b4
 8009598:	200000b8 	.word	0x200000b8
 800959c:	200001bc 	.word	0x200001bc

080095a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d06c      	beq.n	8009690 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095b6:	4b39      	ldr	r3, [pc, #228]	; (800969c <xTaskPriorityDisinherit+0xfc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d009      	beq.n	80095d4 <xTaskPriorityDisinherit+0x34>
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	e7fe      	b.n	80095d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <xTaskPriorityDisinherit+0x50>
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	60bb      	str	r3, [r7, #8]
 80095ee:	e7fe      	b.n	80095ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f4:	1e5a      	subs	r2, r3, #1
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009602:	429a      	cmp	r2, r3
 8009604:	d044      	beq.n	8009690 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800960a:	2b00      	cmp	r3, #0
 800960c:	d140      	bne.n	8009690 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	3304      	adds	r3, #4
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fa65 	bl	8007ae2 <uxListRemove>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d115      	bne.n	800964a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009622:	491f      	ldr	r1, [pc, #124]	; (80096a0 <xTaskPriorityDisinherit+0x100>)
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <xTaskPriorityDisinherit+0xaa>
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	2201      	movs	r2, #1
 800963a:	fa02 f303 	lsl.w	r3, r2, r3
 800963e:	43da      	mvns	r2, r3
 8009640:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <xTaskPriorityDisinherit+0x104>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4013      	ands	r3, r2
 8009646:	4a17      	ldr	r2, [pc, #92]	; (80096a4 <xTaskPriorityDisinherit+0x104>)
 8009648:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	f1c3 0207 	rsb	r2, r3, #7
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009662:	2201      	movs	r2, #1
 8009664:	409a      	lsls	r2, r3
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <xTaskPriorityDisinherit+0x104>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4313      	orrs	r3, r2
 800966c:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <xTaskPriorityDisinherit+0x104>)
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4a08      	ldr	r2, [pc, #32]	; (80096a0 <xTaskPriorityDisinherit+0x100>)
 800967e:	441a      	add	r2, r3
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	3304      	adds	r3, #4
 8009684:	4619      	mov	r1, r3
 8009686:	4610      	mov	r0, r2
 8009688:	f7fe f9ce 	bl	8007a28 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800968c:	2301      	movs	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009690:	697b      	ldr	r3, [r7, #20]
	}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200000b4 	.word	0x200000b4
 80096a0:	200000b8 	.word	0x200000b8
 80096a4:	200001bc 	.word	0x200001bc

080096a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8086 	beq.w	80097ce <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d109      	bne.n	80096de <vTaskPriorityDisinheritAfterTimeout+0x36>
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e7fe      	b.n	80096dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d902      	bls.n	80096ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	e002      	b.n	80096f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d067      	beq.n	80097ce <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	429a      	cmp	r2, r3
 8009706:	d162      	bne.n	80097ce <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009708:	4b33      	ldr	r3, [pc, #204]	; (80097d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	69ba      	ldr	r2, [r7, #24]
 800970e:	429a      	cmp	r2, r3
 8009710:	d109      	bne.n	8009726 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	e7fe      	b.n	8009724 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	db04      	blt.n	8009744 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f1c3 0207 	rsb	r2, r3, #7
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	6959      	ldr	r1, [r3, #20]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4a22      	ldr	r2, [pc, #136]	; (80097dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009754:	4413      	add	r3, r2
 8009756:	4299      	cmp	r1, r3
 8009758:	d101      	bne.n	800975e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800975e:	2300      	movs	r3, #0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d034      	beq.n	80097ce <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	3304      	adds	r3, #4
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe f9ba 	bl	8007ae2 <uxListRemove>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d115      	bne.n	80097a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	4918      	ldr	r1, [pc, #96]	; (80097dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10a      	bne.n	80097a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	2201      	movs	r2, #1
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	43da      	mvns	r2, r3
 8009796:	4b12      	ldr	r3, [pc, #72]	; (80097e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4013      	ands	r3, r2
 800979c:	4a10      	ldr	r2, [pc, #64]	; (80097e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800979e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	2201      	movs	r2, #1
 80097a6:	409a      	lsls	r2, r3
 80097a8:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4a07      	ldr	r2, [pc, #28]	; (80097dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80097c0:	441a      	add	r2, r3
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7fe f92d 	bl	8007a28 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097ce:	bf00      	nop
 80097d0:	3720      	adds	r7, #32
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200000b4 	.word	0x200000b4
 80097dc:	200000b8 	.word	0x200000b8
 80097e0:	200001bc 	.word	0x200001bc

080097e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <pvTaskIncrementMutexHeldCount+0x24>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097f0:	4b05      	ldr	r3, [pc, #20]	; (8009808 <pvTaskIncrementMutexHeldCount+0x24>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097f6:	3201      	adds	r2, #1
 80097f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80097fa:	4b03      	ldr	r3, [pc, #12]	; (8009808 <pvTaskIncrementMutexHeldCount+0x24>)
 80097fc:	681b      	ldr	r3, [r3, #0]
	}
 80097fe:	4618      	mov	r0, r3
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	200000b4 	.word	0x200000b4

0800980c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009816:	4b29      	ldr	r3, [pc, #164]	; (80098bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800981c:	4b28      	ldr	r3, [pc, #160]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3304      	adds	r3, #4
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f95d 	bl	8007ae2 <uxListRemove>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10b      	bne.n	8009846 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	2201      	movs	r2, #1
 8009836:	fa02 f303 	lsl.w	r3, r2, r3
 800983a:	43da      	mvns	r2, r3
 800983c:	4b21      	ldr	r3, [pc, #132]	; (80098c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4013      	ands	r3, r2
 8009842:	4a20      	ldr	r2, [pc, #128]	; (80098c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009844:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984c:	d10a      	bne.n	8009864 <prvAddCurrentTaskToDelayedList+0x58>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009854:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3304      	adds	r3, #4
 800985a:	4619      	mov	r1, r3
 800985c:	481a      	ldr	r0, [pc, #104]	; (80098c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800985e:	f7fe f8e3 	bl	8007a28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009862:	e026      	b.n	80098b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800986c:	4b14      	ldr	r3, [pc, #80]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	429a      	cmp	r2, r3
 800987a:	d209      	bcs.n	8009890 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800987c:	4b13      	ldr	r3, [pc, #76]	; (80098cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3304      	adds	r3, #4
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f7fe f8f1 	bl	8007a70 <vListInsert>
}
 800988e:	e010      	b.n	80098b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7fe f8e7 	bl	8007a70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098a2:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d202      	bcs.n	80098b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098ac:	4a09      	ldr	r2, [pc, #36]	; (80098d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	6013      	str	r3, [r2, #0]
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	200001b8 	.word	0x200001b8
 80098c0:	200000b4 	.word	0x200000b4
 80098c4:	200001bc 	.word	0x200001bc
 80098c8:	200001a0 	.word	0x200001a0
 80098cc:	20000170 	.word	0x20000170
 80098d0:	2000016c 	.word	0x2000016c
 80098d4:	200001d4 	.word	0x200001d4

080098d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3b04      	subs	r3, #4
 80098e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3b04      	subs	r3, #4
 80098f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f023 0201 	bic.w	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3b04      	subs	r3, #4
 8009906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009908:	4a0c      	ldr	r2, [pc, #48]	; (800993c <pxPortInitialiseStack+0x64>)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b14      	subs	r3, #20
 8009912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b04      	subs	r3, #4
 800991e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f06f 0202 	mvn.w	r2, #2
 8009926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3b20      	subs	r3, #32
 800992c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800992e:	68fb      	ldr	r3, [r7, #12]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	08009941 	.word	0x08009941

08009940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <prvTaskExitError+0x50>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d009      	beq.n	8009968 <prvTaskExitError+0x28>
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	e7fe      	b.n	8009966 <prvTaskExitError+0x26>
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800997a:	bf00      	nop
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0fc      	beq.n	800997c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009982:	bf00      	nop
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20000028 	.word	0x20000028
	...

080099a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <pxCurrentTCBConst2>)
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	6808      	ldr	r0, [r1, #0]
 80099a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	f380 8809 	msr	PSP, r0
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8811 	msr	BASEPRI, r0
 80099ba:	4770      	bx	lr
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst2>:
 80099c0:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <prvPortStartFirstTask+0x24>)
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	6800      	ldr	r0, [r0, #0]
 80099ce:	f380 8808 	msr	MSP, r0
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8814 	msr	CONTROL, r0
 80099da:	b662      	cpsie	i
 80099dc:	b661      	cpsie	f
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	df00      	svc	0
 80099e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ea:	bf00      	nop
 80099ec:	e000ed08 	.word	0xe000ed08

080099f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099f6:	4b44      	ldr	r3, [pc, #272]	; (8009b08 <xPortStartScheduler+0x118>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a44      	ldr	r2, [pc, #272]	; (8009b0c <xPortStartScheduler+0x11c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d109      	bne.n	8009a14 <xPortStartScheduler+0x24>
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	e7fe      	b.n	8009a12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a14:	4b3c      	ldr	r3, [pc, #240]	; (8009b08 <xPortStartScheduler+0x118>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a3d      	ldr	r2, [pc, #244]	; (8009b10 <xPortStartScheduler+0x120>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d109      	bne.n	8009a32 <xPortStartScheduler+0x42>
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	e7fe      	b.n	8009a30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a32:	4b38      	ldr	r3, [pc, #224]	; (8009b14 <xPortStartScheduler+0x124>)
 8009a34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	22ff      	movs	r2, #255	; 0xff
 8009a42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4b30      	ldr	r3, [pc, #192]	; (8009b18 <xPortStartScheduler+0x128>)
 8009a58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a5a:	4b30      	ldr	r3, [pc, #192]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009a5c:	2207      	movs	r2, #7
 8009a5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a60:	e009      	b.n	8009a76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	4a2c      	ldr	r2, [pc, #176]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009a6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	005b      	lsls	r3, r3, #1
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7e:	2b80      	cmp	r3, #128	; 0x80
 8009a80:	d0ef      	beq.n	8009a62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a82:	4b26      	ldr	r3, [pc, #152]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f1c3 0307 	rsb	r3, r3, #7
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d009      	beq.n	8009aa2 <xPortStartScheduler+0xb2>
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60bb      	str	r3, [r7, #8]
 8009aa0:	e7fe      	b.n	8009aa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	021b      	lsls	r3, r3, #8
 8009aa8:	4a1c      	ldr	r2, [pc, #112]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009aaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009aac:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ab4:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009ab6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ac0:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <xPortStartScheduler+0x130>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a16      	ldr	r2, [pc, #88]	; (8009b20 <xPortStartScheduler+0x130>)
 8009ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009aca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009acc:	4b14      	ldr	r3, [pc, #80]	; (8009b20 <xPortStartScheduler+0x130>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a13      	ldr	r2, [pc, #76]	; (8009b20 <xPortStartScheduler+0x130>)
 8009ad2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ad6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ad8:	f000 f8d6 	bl	8009c88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009adc:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <xPortStartScheduler+0x134>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ae2:	f000 f8f5 	bl	8009cd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ae6:	4b10      	ldr	r3, [pc, #64]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a0f      	ldr	r2, [pc, #60]	; (8009b28 <xPortStartScheduler+0x138>)
 8009aec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009af0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009af2:	f7ff ff69 	bl	80099c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009af6:	f7ff fa75 	bl	8008fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8009afa:	f7ff ff21 	bl	8009940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	e000ed00 	.word	0xe000ed00
 8009b0c:	410fc271 	.word	0x410fc271
 8009b10:	410fc270 	.word	0x410fc270
 8009b14:	e000e400 	.word	0xe000e400
 8009b18:	200001e0 	.word	0x200001e0
 8009b1c:	200001e4 	.word	0x200001e4
 8009b20:	e000ed20 	.word	0xe000ed20
 8009b24:	20000028 	.word	0x20000028
 8009b28:	e000ef34 	.word	0xe000ef34

08009b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <vPortEnterCritical+0x54>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	4a0d      	ldr	r2, [pc, #52]	; (8009b80 <vPortEnterCritical+0x54>)
 8009b4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b4e:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <vPortEnterCritical+0x54>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d10e      	bne.n	8009b74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b56:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <vPortEnterCritical+0x58>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <vPortEnterCritical+0x48>
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	603b      	str	r3, [r7, #0]
 8009b72:	e7fe      	b.n	8009b72 <vPortEnterCritical+0x46>
	}
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	20000028 	.word	0x20000028
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b8e:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <vPortExitCritical+0x4c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d109      	bne.n	8009baa <vPortExitCritical+0x22>
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	607b      	str	r3, [r7, #4]
 8009ba8:	e7fe      	b.n	8009ba8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <vPortExitCritical+0x4c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	4a08      	ldr	r2, [pc, #32]	; (8009bd4 <vPortExitCritical+0x4c>)
 8009bb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bb4:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <vPortExitCritical+0x4c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d104      	bne.n	8009bc6 <vPortExitCritical+0x3e>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20000028 	.word	0x20000028
	...

08009be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009be0:	f3ef 8009 	mrs	r0, PSP
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <pxCurrentTCBConst>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	f01e 0f10 	tst.w	lr, #16
 8009bf0:	bf08      	it	eq
 8009bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c04:	f380 8811 	msr	BASEPRI, r0
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f7ff f9e8 	bl	8008fe4 <vTaskSwitchContext>
 8009c14:	f04f 0000 	mov.w	r0, #0
 8009c18:	f380 8811 	msr	BASEPRI, r0
 8009c1c:	bc09      	pop	{r0, r3}
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	6808      	ldr	r0, [r1, #0]
 8009c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c26:	f01e 0f10 	tst.w	lr, #16
 8009c2a:	bf08      	it	eq
 8009c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c30:	f380 8809 	msr	PSP, r0
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w

08009c40 <pxCurrentTCBConst>:
 8009c40:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c60:	f7ff f904 	bl	8008e6c <xTaskIncrementTick>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c6a:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <xPortSysTickHandler+0x3c>)
 8009c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	2300      	movs	r3, #0
 8009c74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	; (8009cbc <vPortSetupTimerInterrupt+0x34>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c92:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <vPortSetupTimerInterrupt+0x38>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <vPortSetupTimerInterrupt+0x3c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a0a      	ldr	r2, [pc, #40]	; (8009cc8 <vPortSetupTimerInterrupt+0x40>)
 8009c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca2:	099b      	lsrs	r3, r3, #6
 8009ca4:	4a09      	ldr	r2, [pc, #36]	; (8009ccc <vPortSetupTimerInterrupt+0x44>)
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009caa:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <vPortSetupTimerInterrupt+0x34>)
 8009cac:	2207      	movs	r2, #7
 8009cae:	601a      	str	r2, [r3, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	e000e010 	.word	0xe000e010
 8009cc0:	e000e018 	.word	0xe000e018
 8009cc4:	2000002c 	.word	0x2000002c
 8009cc8:	10624dd3 	.word	0x10624dd3
 8009ccc:	e000e014 	.word	0xe000e014

08009cd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ce0 <vPortEnableVFP+0x10>
 8009cd4:	6801      	ldr	r1, [r0, #0]
 8009cd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cda:	6001      	str	r1, [r0, #0]
 8009cdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cde:	bf00      	nop
 8009ce0:	e000ed88 	.word	0xe000ed88

08009ce4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cea:	f3ef 8305 	mrs	r3, IPSR
 8009cee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b0f      	cmp	r3, #15
 8009cf4:	d913      	bls.n	8009d1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cf6:	4a16      	ldr	r2, [pc, #88]	; (8009d50 <vPortValidateInterruptPriority+0x6c>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d00:	4b14      	ldr	r3, [pc, #80]	; (8009d54 <vPortValidateInterruptPriority+0x70>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	7afa      	ldrb	r2, [r7, #11]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d209      	bcs.n	8009d1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	e7fe      	b.n	8009d1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d1e:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <vPortValidateInterruptPriority+0x74>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <vPortValidateInterruptPriority+0x78>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d909      	bls.n	8009d42 <vPortValidateInterruptPriority+0x5e>
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	e7fe      	b.n	8009d40 <vPortValidateInterruptPriority+0x5c>
	}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	e000e3f0 	.word	0xe000e3f0
 8009d54:	200001e0 	.word	0x200001e0
 8009d58:	e000ed0c 	.word	0xe000ed0c
 8009d5c:	200001e4 	.word	0x200001e4

08009d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	; 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d6c:	f7fe ffd4 	bl	8008d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d70:	4b57      	ldr	r3, [pc, #348]	; (8009ed0 <pvPortMalloc+0x170>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d78:	f000 f90c 	bl	8009f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d7c:	4b55      	ldr	r3, [pc, #340]	; (8009ed4 <pvPortMalloc+0x174>)
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4013      	ands	r3, r2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 808c 	bne.w	8009ea2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01c      	beq.n	8009dca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009d90:	2208      	movs	r2, #8
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4413      	add	r3, r2
 8009d96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d013      	beq.n	8009dca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f023 0307 	bic.w	r3, r3, #7
 8009da8:	3308      	adds	r3, #8
 8009daa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <pvPortMalloc+0x6a>
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	e7fe      	b.n	8009dc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d068      	beq.n	8009ea2 <pvPortMalloc+0x142>
 8009dd0:	4b41      	ldr	r3, [pc, #260]	; (8009ed8 <pvPortMalloc+0x178>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d863      	bhi.n	8009ea2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dda:	4b40      	ldr	r3, [pc, #256]	; (8009edc <pvPortMalloc+0x17c>)
 8009ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dde:	4b3f      	ldr	r3, [pc, #252]	; (8009edc <pvPortMalloc+0x17c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009de4:	e004      	b.n	8009df0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d903      	bls.n	8009e02 <pvPortMalloc+0xa2>
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f1      	bne.n	8009de6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e02:	4b33      	ldr	r3, [pc, #204]	; (8009ed0 <pvPortMalloc+0x170>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d04a      	beq.n	8009ea2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2208      	movs	r2, #8
 8009e12:	4413      	add	r3, r2
 8009e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	1ad2      	subs	r2, r2, r3
 8009e26:	2308      	movs	r3, #8
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d91e      	bls.n	8009e6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d009      	beq.n	8009e54 <pvPortMalloc+0xf4>
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	e7fe      	b.n	8009e52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	1ad2      	subs	r2, r2, r3
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e66:	69b8      	ldr	r0, [r7, #24]
 8009e68:	f000 f8f6 	bl	800a058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e6c:	4b1a      	ldr	r3, [pc, #104]	; (8009ed8 <pvPortMalloc+0x178>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	4a18      	ldr	r2, [pc, #96]	; (8009ed8 <pvPortMalloc+0x178>)
 8009e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e7a:	4b17      	ldr	r3, [pc, #92]	; (8009ed8 <pvPortMalloc+0x178>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	4b18      	ldr	r3, [pc, #96]	; (8009ee0 <pvPortMalloc+0x180>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d203      	bcs.n	8009e8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <pvPortMalloc+0x178>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a15      	ldr	r2, [pc, #84]	; (8009ee0 <pvPortMalloc+0x180>)
 8009e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <pvPortMalloc+0x174>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	431a      	orrs	r2, r3
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ea2:	f7fe ff47 	bl	8008d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d009      	beq.n	8009ec4 <pvPortMalloc+0x164>
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	e7fe      	b.n	8009ec2 <pvPortMalloc+0x162>
	return pvReturn;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3728      	adds	r7, #40	; 0x28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20003df0 	.word	0x20003df0
 8009ed4:	20003dfc 	.word	0x20003dfc
 8009ed8:	20003df4 	.word	0x20003df4
 8009edc:	20003de8 	.word	0x20003de8
 8009ee0:	20003df8 	.word	0x20003df8

08009ee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d046      	beq.n	8009f84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	425b      	negs	r3, r3
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4413      	add	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	4b20      	ldr	r3, [pc, #128]	; (8009f8c <vPortFree+0xa8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <vPortFree+0x42>
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	e7fe      	b.n	8009f24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <vPortFree+0x5e>
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	60bb      	str	r3, [r7, #8]
 8009f40:	e7fe      	b.n	8009f40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <vPortFree+0xa8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d019      	beq.n	8009f84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d115      	bne.n	8009f84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <vPortFree+0xa8>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	43db      	mvns	r3, r3
 8009f62:	401a      	ands	r2, r3
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f68:	f7fe fed6 	bl	8008d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <vPortFree+0xac>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4413      	add	r3, r2
 8009f76:	4a06      	ldr	r2, [pc, #24]	; (8009f90 <vPortFree+0xac>)
 8009f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f7a:	6938      	ldr	r0, [r7, #16]
 8009f7c:	f000 f86c 	bl	800a058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f80:	f7fe fed8 	bl	8008d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f84:	bf00      	nop
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20003dfc 	.word	0x20003dfc
 8009f90:	20003df4 	.word	0x20003df4

08009f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <prvHeapInit+0xac>)
 8009fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <prvHeapInit+0xac>)
 8009fc4:	4413      	add	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <prvHeapInit+0xb0>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <prvHeapInit+0xb0>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <prvHeapInit+0xb4>)
 8009ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <prvHeapInit+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <prvHeapInit+0xb4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	1ad2      	subs	r2, r2, r3
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <prvHeapInit+0xb4>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <prvHeapInit+0xb8>)
 800a022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <prvHeapInit+0xbc>)
 800a02a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvHeapInit+0xc0>)
 800a02e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	200001e8 	.word	0x200001e8
 800a044:	20003de8 	.word	0x20003de8
 800a048:	20003df0 	.word	0x20003df0
 800a04c:	20003df8 	.word	0x20003df8
 800a050:	20003df4 	.word	0x20003df4
 800a054:	20003dfc 	.word	0x20003dfc

0800a058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <prvInsertBlockIntoFreeList+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e002      	b.n	800a06c <prvInsertBlockIntoFreeList+0x14>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d8f7      	bhi.n	800a066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d108      	bne.n	800a09a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d118      	bne.n	800a0e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d00d      	beq.n	800a0d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e008      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e003      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d002      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20003de8 	.word	0x20003de8
 800a108:	20003df0 	.word	0x20003df0

0800a10c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a07      	ldr	r2, [pc, #28]	; (800a138 <vApplicationGetIdleTaskMemory+0x2c>)
 800a11c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4a06      	ldr	r2, [pc, #24]	; (800a13c <vApplicationGetIdleTaskMemory+0x30>)
 800a122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2280      	movs	r2, #128	; 0x80
 800a128:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	20003e00 	.word	0x20003e00
 800a13c:	20003e54 	.word	0x20003e54

0800a140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a140:	b5b0      	push	{r4, r5, r7, lr}
 800a142:	b0b4      	sub	sp, #208	; 0xd0
 800a144:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a146:	f7f6 fa13 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a14a:	f000 f8bd 	bl	800a2c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a14e:	f000 f9fb 	bl	800a548 <MX_GPIO_Init>
  MX_I2C1_Init();
 800a152:	f000 f93b 	bl	800a3cc <MX_I2C1_Init>
  MX_I2S3_Init();
 800a156:	f000 f967 	bl	800a428 <MX_I2S3_Init>
  MX_SPI1_Init();
 800a15a:	f000 f995 	bl	800a488 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800a15e:	f000 f9c9 	bl	800a4f4 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800a162:	2300      	movs	r3, #0
 800a164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800a16e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800a172:	2101      	movs	r1, #1
 800a174:	4618      	mov	r0, r3
 800a176:	f7fd f860 	bl	800723a <osSemaphoreCreate>
 800a17a:	4602      	mov	r2, r0
 800a17c:	4b47      	ldr	r3, [pc, #284]	; (800a29c <main+0x15c>)
 800a17e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  mail_b = osMailCreate(osMailQ(mail_b), NULL);
 800a180:	2100      	movs	r1, #0
 800a182:	4847      	ldr	r0, [pc, #284]	; (800a2a0 <main+0x160>)
 800a184:	f7fd faee 	bl	8007764 <osMailCreate>
 800a188:	4602      	mov	r2, r0
 800a18a:	4b46      	ldr	r3, [pc, #280]	; (800a2a4 <main+0x164>)
 800a18c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask1, StartDefaultTask1, osPriorityNormal, 0, 128);
 800a18e:	4b46      	ldr	r3, [pc, #280]	; (800a2a8 <main+0x168>)
 800a190:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800a194:	461d      	mov	r5, r3
 800a196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a19a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a19e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask1), NULL);
 800a1a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fc ffe6 	bl	800717a <osThreadCreate>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	4b3e      	ldr	r3, [pc, #248]	; (800a2ac <main+0x16c>)
 800a1b2:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 800a1b4:	4b3e      	ldr	r3, [pc, #248]	; (800a2b0 <main+0x170>)
 800a1b6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800a1ba:	461d      	mov	r5, r3
 800a1bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a1c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 800a1c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fc ffd3 	bl	800717a <osThreadCreate>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	4b35      	ldr	r3, [pc, #212]	; (800a2ac <main+0x16c>)
 800a1d8:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask3, StartDefaultTask3, osPriorityNormal, 0, 128);
 800a1da:	4b36      	ldr	r3, [pc, #216]	; (800a2b4 <main+0x174>)
 800a1dc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800a1e0:	461d      	mov	r5, r3
 800a1e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a1ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask3), NULL);
 800a1ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fc ffc0 	bl	800717a <osThreadCreate>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b2b      	ldr	r3, [pc, #172]	; (800a2ac <main+0x16c>)
 800a1fe:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask4, StartDefaultTask4, osPriorityNormal, 0, 128);
 800a200:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <main+0x178>)
 800a202:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800a206:	461d      	mov	r5, r3
 800a208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a20a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a20c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask4), NULL);
 800a214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a218:	2100      	movs	r1, #0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fc ffad 	bl	800717a <osThreadCreate>
 800a220:	4602      	mov	r2, r0
 800a222:	4b22      	ldr	r3, [pc, #136]	; (800a2ac <main+0x16c>)
 800a224:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask5, StartDefaultTask5, osPriorityNormal, 0, 128);
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <main+0x17c>)
 800a228:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800a22c:	461d      	mov	r5, r3
 800a22e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask5), NULL);
 800a23a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a23e:	2100      	movs	r1, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f7fc ff9a 	bl	800717a <osThreadCreate>
 800a246:	4602      	mov	r2, r0
 800a248:	4b18      	ldr	r3, [pc, #96]	; (800a2ac <main+0x16c>)
 800a24a:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask6, StartDefaultTask6, osPriorityNormal, 0, 128);
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <main+0x180>)
 800a24e:	f107 0420 	add.w	r4, r7, #32
 800a252:	461d      	mov	r5, r3
 800a254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a25c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask6), NULL);
 800a260:	f107 0320 	add.w	r3, r7, #32
 800a264:	2100      	movs	r1, #0
 800a266:	4618      	mov	r0, r3
 800a268:	f7fc ff87 	bl	800717a <osThreadCreate>
 800a26c:	4602      	mov	r2, r0
 800a26e:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <main+0x16c>)
 800a270:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask7, StartDefaultTask7, osPriorityNormal, 0, 128);
 800a272:	4b14      	ldr	r3, [pc, #80]	; (800a2c4 <main+0x184>)
 800a274:	1d3c      	adds	r4, r7, #4
 800a276:	461d      	mov	r5, r3
 800a278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a27a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a27c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask7), NULL);
 800a284:	1d3b      	adds	r3, r7, #4
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fc ff76 	bl	800717a <osThreadCreate>
 800a28e:	4602      	mov	r2, r0
 800a290:	4b06      	ldr	r3, [pc, #24]	; (800a2ac <main+0x16c>)
 800a292:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a294:	f7fc ff6a 	bl	800716c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a298:	e7fe      	b.n	800a298 <main+0x158>
 800a29a:	bf00      	nop
 800a29c:	200040c4 	.word	0x200040c4
 800a2a0:	0800bdf4 	.word	0x0800bdf4
 800a2a4:	200040c0 	.word	0x200040c0
 800a2a8:	0800bca8 	.word	0x0800bca8
 800a2ac:	20004068 	.word	0x20004068
 800a2b0:	0800bcd4 	.word	0x0800bcd4
 800a2b4:	0800bd00 	.word	0x0800bd00
 800a2b8:	0800bd2c 	.word	0x0800bd2c
 800a2bc:	0800bd58 	.word	0x0800bd58
 800a2c0:	0800bd84 	.word	0x0800bd84
 800a2c4:	0800bdb0 	.word	0x0800bdb0

0800a2c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b098      	sub	sp, #96	; 0x60
 800a2cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a2ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2d2:	2230      	movs	r2, #48	; 0x30
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 f8ab 	bl	800b432 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a2dc:	f107 031c 	add.w	r3, r7, #28
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	609a      	str	r2, [r3, #8]
 800a2e8:	60da      	str	r2, [r3, #12]
 800a2ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a2ec:	f107 030c 	add.w	r3, r7, #12
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	605a      	str	r2, [r3, #4]
 800a2f6:	609a      	str	r2, [r3, #8]
 800a2f8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60bb      	str	r3, [r7, #8]
 800a2fe:	4b31      	ldr	r3, [pc, #196]	; (800a3c4 <SystemClock_Config+0xfc>)
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	4a30      	ldr	r2, [pc, #192]	; (800a3c4 <SystemClock_Config+0xfc>)
 800a304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a308:	6413      	str	r3, [r2, #64]	; 0x40
 800a30a:	4b2e      	ldr	r3, [pc, #184]	; (800a3c4 <SystemClock_Config+0xfc>)
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a312:	60bb      	str	r3, [r7, #8]
 800a314:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	4b2b      	ldr	r3, [pc, #172]	; (800a3c8 <SystemClock_Config+0x100>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a2a      	ldr	r2, [pc, #168]	; (800a3c8 <SystemClock_Config+0x100>)
 800a320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	4b28      	ldr	r3, [pc, #160]	; (800a3c8 <SystemClock_Config+0x100>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a332:	2301      	movs	r3, #1
 800a334:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a33a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a33c:	2302      	movs	r3, #2
 800a33e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a344:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a346:	2308      	movs	r3, #8
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a34a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a34e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a350:	2302      	movs	r3, #2
 800a352:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a354:	2307      	movs	r3, #7
 800a356:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f8 feab 	bl	80030b8 <HAL_RCC_OscConfig>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800a368:	f000 faea 	bl	800a940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a36c:	230f      	movs	r3, #15
 800a36e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a370:	2302      	movs	r3, #2
 800a372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a374:	2300      	movs	r3, #0
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a378:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a37c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a37e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a382:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a384:	f107 031c 	add.w	r3, r7, #28
 800a388:	2105      	movs	r1, #5
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7f9 f8d6 	bl	800353c <HAL_RCC_ClockConfig>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800a396:	f000 fad3 	bl	800a940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800a39a:	2301      	movs	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800a39e:	23c0      	movs	r3, #192	; 0xc0
 800a3a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3a6:	f107 030c 	add.w	r3, r7, #12
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7f9 fab4 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a3b6:	f000 fac3 	bl	800a940 <Error_Handler>
  }
}
 800a3ba:	bf00      	nop
 800a3bc:	3760      	adds	r7, #96	; 0x60
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	40023800 	.word	0x40023800
 800a3c8:	40007000 	.word	0x40007000

0800a3cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a3d0:	4b12      	ldr	r3, [pc, #72]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3d2:	4a13      	ldr	r2, [pc, #76]	; (800a420 <MX_I2C1_Init+0x54>)
 800a3d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a3d6:	4b11      	ldr	r3, [pc, #68]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3d8:	4a12      	ldr	r2, [pc, #72]	; (800a424 <MX_I2C1_Init+0x58>)
 800a3da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a3e2:	4b0e      	ldr	r3, [pc, #56]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a3f0:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a3fc:	4b07      	ldr	r3, [pc, #28]	; (800a41c <MX_I2C1_Init+0x50>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a402:	4b06      	ldr	r3, [pc, #24]	; (800a41c <MX_I2C1_Init+0x50>)
 800a404:	2200      	movs	r2, #0
 800a406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a408:	4804      	ldr	r0, [pc, #16]	; (800a41c <MX_I2C1_Init+0x50>)
 800a40a:	f7f8 f88d 	bl	8002528 <HAL_I2C_Init>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a414:	f000 fa94 	bl	800a940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a418:	bf00      	nop
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	2000406c 	.word	0x2000406c
 800a420:	40005400 	.word	0x40005400
 800a424:	000186a0 	.word	0x000186a0

0800a428 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800a42c:	4b13      	ldr	r3, [pc, #76]	; (800a47c <MX_I2S3_Init+0x54>)
 800a42e:	4a14      	ldr	r2, [pc, #80]	; (800a480 <MX_I2S3_Init+0x58>)
 800a430:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <MX_I2S3_Init+0x54>)
 800a434:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a438:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800a43a:	4b10      	ldr	r3, [pc, #64]	; (800a47c <MX_I2S3_Init+0x54>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800a440:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <MX_I2S3_Init+0x54>)
 800a442:	2200      	movs	r2, #0
 800a444:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800a446:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <MX_I2S3_Init+0x54>)
 800a448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800a44e:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <MX_I2S3_Init+0x54>)
 800a450:	4a0c      	ldr	r2, [pc, #48]	; (800a484 <MX_I2S3_Init+0x5c>)
 800a452:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800a454:	4b09      	ldr	r3, [pc, #36]	; (800a47c <MX_I2S3_Init+0x54>)
 800a456:	2200      	movs	r2, #0
 800a458:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <MX_I2S3_Init+0x54>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800a460:	4b06      	ldr	r3, [pc, #24]	; (800a47c <MX_I2S3_Init+0x54>)
 800a462:	2200      	movs	r2, #0
 800a464:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <MX_I2S3_Init+0x54>)
 800a468:	f7f8 f986 	bl	8002778 <HAL_I2S_Init>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800a472:	f000 fa65 	bl	800a940 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20004164 	.word	0x20004164
 800a480:	40003c00 	.word	0x40003c00
 800a484:	00017700 	.word	0x00017700

0800a488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a48c:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a48e:	4a18      	ldr	r2, [pc, #96]	; (800a4f0 <MX_SPI1_Init+0x68>)
 800a490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a492:	4b16      	ldr	r3, [pc, #88]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a494:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a4a0:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a4ac:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4ba:	4b0c      	ldr	r3, [pc, #48]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a4c0:	4b0a      	ldr	r3, [pc, #40]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a4d2:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4d4:	220a      	movs	r2, #10
 800a4d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a4d8:	4804      	ldr	r0, [pc, #16]	; (800a4ec <MX_SPI1_Init+0x64>)
 800a4da:	f7f9 fb5b 	bl	8003b94 <HAL_SPI_Init>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a4e4:	f000 fa2c 	bl	800a940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a4e8:	bf00      	nop
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	200040cc 	.word	0x200040cc
 800a4f0:	40013000 	.word	0x40013000

0800a4f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a4f8:	4b11      	ldr	r3, [pc, #68]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a4fa:	4a12      	ldr	r2, [pc, #72]	; (800a544 <MX_USART2_UART_Init+0x50>)
 800a4fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a4fe:	4b10      	ldr	r3, [pc, #64]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a506:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a508:	2200      	movs	r2, #0
 800a50a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a50c:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a50e:	2200      	movs	r2, #0
 800a510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a514:	2200      	movs	r2, #0
 800a516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a51a:	220c      	movs	r2, #12
 800a51c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a51e:	4b08      	ldr	r3, [pc, #32]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a520:	2200      	movs	r2, #0
 800a522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a524:	4b06      	ldr	r3, [pc, #24]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a526:	2200      	movs	r2, #0
 800a528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a52a:	4805      	ldr	r0, [pc, #20]	; (800a540 <MX_USART2_UART_Init+0x4c>)
 800a52c:	f7f9 fb96 	bl	8003c5c <HAL_UART_Init>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a536:	f000 fa03 	bl	800a940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a53a:	bf00      	nop
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20004124 	.word	0x20004124
 800a544:	40004400 	.word	0x40004400

0800a548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08c      	sub	sp, #48	; 0x30
 800a54c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a54e:	f107 031c 	add.w	r3, r7, #28
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	605a      	str	r2, [r3, #4]
 800a558:	609a      	str	r2, [r3, #8]
 800a55a:	60da      	str	r2, [r3, #12]
 800a55c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a55e:	2300      	movs	r3, #0
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	4b71      	ldr	r3, [pc, #452]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a566:	4a70      	ldr	r2, [pc, #448]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a568:	f043 0310 	orr.w	r3, r3, #16
 800a56c:	6313      	str	r3, [r2, #48]	; 0x30
 800a56e:	4b6e      	ldr	r3, [pc, #440]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a572:	f003 0310 	and.w	r3, r3, #16
 800a576:	61bb      	str	r3, [r7, #24]
 800a578:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a57a:	2300      	movs	r3, #0
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	4b6a      	ldr	r3, [pc, #424]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	4a69      	ldr	r2, [pc, #420]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a584:	f043 0304 	orr.w	r3, r3, #4
 800a588:	6313      	str	r3, [r2, #48]	; 0x30
 800a58a:	4b67      	ldr	r3, [pc, #412]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a596:	2300      	movs	r3, #0
 800a598:	613b      	str	r3, [r7, #16]
 800a59a:	4b63      	ldr	r3, [pc, #396]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	4a62      	ldr	r2, [pc, #392]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a6:	4b60      	ldr	r3, [pc, #384]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ae:	613b      	str	r3, [r7, #16]
 800a5b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	4b5c      	ldr	r3, [pc, #368]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	4a5b      	ldr	r2, [pc, #364]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5c2:	4b59      	ldr	r3, [pc, #356]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60bb      	str	r3, [r7, #8]
 800a5d2:	4b55      	ldr	r3, [pc, #340]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d6:	4a54      	ldr	r2, [pc, #336]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5d8:	f043 0302 	orr.w	r3, r3, #2
 800a5dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a5de:	4b52      	ldr	r3, [pc, #328]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	60bb      	str	r3, [r7, #8]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	607b      	str	r3, [r7, #4]
 800a5ee:	4b4e      	ldr	r3, [pc, #312]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	4a4d      	ldr	r2, [pc, #308]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5f4:	f043 0308 	orr.w	r3, r3, #8
 800a5f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5fa:	4b4b      	ldr	r3, [pc, #300]	; (800a728 <MX_GPIO_Init+0x1e0>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	f003 0308 	and.w	r3, r3, #8
 800a602:	607b      	str	r3, [r7, #4]
 800a604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a606:	2200      	movs	r2, #0
 800a608:	2108      	movs	r1, #8
 800a60a:	4848      	ldr	r0, [pc, #288]	; (800a72c <MX_GPIO_Init+0x1e4>)
 800a60c:	f7f6 faf0 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a610:	2201      	movs	r2, #1
 800a612:	2101      	movs	r1, #1
 800a614:	4846      	ldr	r0, [pc, #280]	; (800a730 <MX_GPIO_Init+0x1e8>)
 800a616:	f7f6 faeb 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a61a:	2200      	movs	r2, #0
 800a61c:	f24f 0110 	movw	r1, #61456	; 0xf010
 800a620:	4844      	ldr	r0, [pc, #272]	; (800a734 <MX_GPIO_Init+0x1ec>)
 800a622:	f7f6 fae5 	bl	8000bf0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a626:	2308      	movs	r3, #8
 800a628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a62a:	2301      	movs	r3, #1
 800a62c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a632:	2300      	movs	r3, #0
 800a634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a636:	f107 031c 	add.w	r3, r7, #28
 800a63a:	4619      	mov	r1, r3
 800a63c:	483b      	ldr	r0, [pc, #236]	; (800a72c <MX_GPIO_Init+0x1e4>)
 800a63e:	f7f6 f93d 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a642:	2301      	movs	r3, #1
 800a644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a646:	2301      	movs	r3, #1
 800a648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a64e:	2300      	movs	r3, #0
 800a650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a652:	f107 031c 	add.w	r3, r7, #28
 800a656:	4619      	mov	r1, r3
 800a658:	4835      	ldr	r0, [pc, #212]	; (800a730 <MX_GPIO_Init+0x1e8>)
 800a65a:	f7f6 f92f 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a65e:	2308      	movs	r3, #8
 800a660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a662:	2302      	movs	r3, #2
 800a664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a666:	2300      	movs	r3, #0
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a66a:	2300      	movs	r3, #0
 800a66c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a66e:	2305      	movs	r3, #5
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a672:	f107 031c 	add.w	r3, r7, #28
 800a676:	4619      	mov	r1, r3
 800a678:	482d      	ldr	r0, [pc, #180]	; (800a730 <MX_GPIO_Init+0x1e8>)
 800a67a:	f7f6 f91f 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a67e:	2301      	movs	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a682:	4b2d      	ldr	r3, [pc, #180]	; (800a738 <MX_GPIO_Init+0x1f0>)
 800a684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a686:	2300      	movs	r3, #0
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a68a:	f107 031c 	add.w	r3, r7, #28
 800a68e:	4619      	mov	r1, r3
 800a690:	482a      	ldr	r0, [pc, #168]	; (800a73c <MX_GPIO_Init+0x1f4>)
 800a692:	f7f6 f913 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a696:	2304      	movs	r3, #4
 800a698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a69a:	2300      	movs	r3, #0
 800a69c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a6a2:	f107 031c 	add.w	r3, r7, #28
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4825      	ldr	r0, [pc, #148]	; (800a740 <MX_GPIO_Init+0x1f8>)
 800a6aa:	f7f6 f907 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800a6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a6c0:	2305      	movs	r3, #5
 800a6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800a6c4:	f107 031c 	add.w	r3, r7, #28
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	481d      	ldr	r0, [pc, #116]	; (800a740 <MX_GPIO_Init+0x1f8>)
 800a6cc:	f7f6 f8f6 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a6d0:	f24f 0310 	movw	r3, #61456	; 0xf010
 800a6d4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6e2:	f107 031c 	add.w	r3, r7, #28
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4812      	ldr	r0, [pc, #72]	; (800a734 <MX_GPIO_Init+0x1ec>)
 800a6ea:	f7f6 f8e7 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a6fa:	f107 031c 	add.w	r3, r7, #28
 800a6fe:	4619      	mov	r1, r3
 800a700:	480c      	ldr	r0, [pc, #48]	; (800a734 <MX_GPIO_Init+0x1ec>)
 800a702:	f7f6 f8db 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800a706:	2302      	movs	r3, #2
 800a708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a70a:	4b0b      	ldr	r3, [pc, #44]	; (800a738 <MX_GPIO_Init+0x1f0>)
 800a70c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800a712:	f107 031c 	add.w	r3, r7, #28
 800a716:	4619      	mov	r1, r3
 800a718:	4804      	ldr	r0, [pc, #16]	; (800a72c <MX_GPIO_Init+0x1e4>)
 800a71a:	f7f6 f8cf 	bl	80008bc <HAL_GPIO_Init>

}
 800a71e:	bf00      	nop
 800a720:	3730      	adds	r7, #48	; 0x30
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	40023800 	.word	0x40023800
 800a72c:	40021000 	.word	0x40021000
 800a730:	40020800 	.word	0x40020800
 800a734:	40020c00 	.word	0x40020c00
 800a738:	10120000 	.word	0x10120000
 800a73c:	40020000 	.word	0x40020000
 800a740:	40020400 	.word	0x40020400

0800a744 <StartDefaultTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask1(void const * argument)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a74c:	f000 fb00 	bl	800ad50 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800a750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a754:	4803      	ldr	r0, [pc, #12]	; (800a764 <StartDefaultTask1+0x20>)
 800a756:	f7f6 fa64 	bl	8000c22 <HAL_GPIO_TogglePin>
    osDelay(25);
 800a75a:	2019      	movs	r0, #25
 800a75c:	f7fc fd59 	bl	8007212 <osDelay>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800a760:	e7f6      	b.n	800a750 <StartDefaultTask1+0xc>
 800a762:	bf00      	nop
 800a764:	40020c00 	.word	0x40020c00

0800a768 <StartDefaultTask2>:
  }
  /* USER CODE END 5 */
}

void StartDefaultTask2(void const * argument)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a770:	f000 faee 	bl	800ad50 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800a774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a778:	4803      	ldr	r0, [pc, #12]	; (800a788 <StartDefaultTask2+0x20>)
 800a77a:	f7f6 fa52 	bl	8000c22 <HAL_GPIO_TogglePin>
    osDelay(20);
 800a77e:	2014      	movs	r0, #20
 800a780:	f7fc fd47 	bl	8007212 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800a784:	e7f6      	b.n	800a774 <StartDefaultTask2+0xc>
 800a786:	bf00      	nop
 800a788:	40020c00 	.word	0x40020c00

0800a78c <StartDefaultTask3>:
  }
  /* USER CODE END 5 */
}

void StartDefaultTask3(void const * argument)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a794:	f000 fadc 	bl	800ad50 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800a798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a79c:	4803      	ldr	r0, [pc, #12]	; (800a7ac <StartDefaultTask3+0x20>)
 800a79e:	f7f6 fa40 	bl	8000c22 <HAL_GPIO_TogglePin>
    osDelay(64);
 800a7a2:	2040      	movs	r0, #64	; 0x40
 800a7a4:	f7fc fd35 	bl	8007212 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800a7a8:	e7f6      	b.n	800a798 <StartDefaultTask3+0xc>
 800a7aa:	bf00      	nop
 800a7ac:	40020c00 	.word	0x40020c00

0800a7b0 <StartDefaultTask4>:
  }
  /* USER CODE END 5 */
}

void StartDefaultTask4(void const * argument)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a7b8:	f000 faca 	bl	800ad50 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800a7bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a7c0:	4803      	ldr	r0, [pc, #12]	; (800a7d0 <StartDefaultTask4+0x20>)
 800a7c2:	f7f6 fa2e 	bl	8000c22 <HAL_GPIO_TogglePin>
    osDelay(32);
 800a7c6:	2020      	movs	r0, #32
 800a7c8:	f7fc fd23 	bl	8007212 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800a7cc:	e7f6      	b.n	800a7bc <StartDefaultTask4+0xc>
 800a7ce:	bf00      	nop
 800a7d0:	40020c00 	.word	0x40020c00

0800a7d4 <StartDefaultTask5>:
}



void StartDefaultTask5(void const * argument)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]


	char buf[20] = "HELLO\r\n";
 800a7dc:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <StartDefaultTask5+0x78>)
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a7ea:	f107 0310 	add.w	r3, r7, #16
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	605a      	str	r2, [r3, #4]
 800a7f4:	609a      	str	r2, [r3, #8]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a7f6:	f000 faab 	bl	800ad50 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  mail_t *mail = (mail_t *) osMailAlloc(mail_b, osWaitForever);
 800a7fa:	4b15      	ldr	r3, [pc, #84]	; (800a850 <StartDefaultTask5+0x7c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f04f 31ff 	mov.w	r1, #4294967295
 800a802:	4618      	mov	r0, r3
 800a804:	f7fd f806 	bl	8007814 <osMailAlloc>
 800a808:	61f8      	str	r0, [r7, #28]
	  if (mail != NULL) {
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d018      	beq.n	800a842 <StartDefaultTask5+0x6e>
		  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 800a810:	4b10      	ldr	r3, [pc, #64]	; (800a854 <StartDefaultTask5+0x80>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f04f 31ff 	mov.w	r1, #4294967295
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fc fd41 	bl	80072a0 <osSemaphoreWait>
		  sprintf(mail->msg, buf);
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	f107 0208 	add.w	r2, r7, #8
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fec4 	bl	800b5b4 <siprintf>
		  osMailPut(mail_b, mail);
 800a82c:	4b08      	ldr	r3, [pc, #32]	; (800a850 <StartDefaultTask5+0x7c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	69f9      	ldr	r1, [r7, #28]
 800a832:	4618      	mov	r0, r3
 800a834:	f7fd f804 	bl	8007840 <osMailPut>
		  osSemaphoreRelease(myBinarySem01Handle);
 800a838:	4b06      	ldr	r3, [pc, #24]	; (800a854 <StartDefaultTask5+0x80>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fc fd7d 	bl	800733c <osSemaphoreRelease>
	  }
	  //osThreadYield();
	  osDelay(100);
 800a842:	2064      	movs	r0, #100	; 0x64
 800a844:	f7fc fce5 	bl	8007212 <osDelay>
  {
 800a848:	e7d7      	b.n	800a7fa <StartDefaultTask5+0x26>
 800a84a:	bf00      	nop
 800a84c:	0800bdcc 	.word	0x0800bdcc
 800a850:	200040c0 	.word	0x200040c0
 800a854:	200040c4 	.word	0x200040c4

0800a858 <StartDefaultTask6>:
  }
  /* USER CODE END 5 */
}

void StartDefaultTask6(void const * argument)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]

	char buf[20] = "WORLD\r\n";
 800a860:	4a1b      	ldr	r2, [pc, #108]	; (800a8d0 <StartDefaultTask6+0x78>)
 800a862:	f107 0308 	add.w	r3, r7, #8
 800a866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a86a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a86e:	f107 0310 	add.w	r3, r7, #16
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	605a      	str	r2, [r3, #4]
 800a878:	609a      	str	r2, [r3, #8]


  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a87a:	f000 fa69 	bl	800ad50 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  mail_t *mail = (mail_t *) osMailAlloc(mail_b, osWaitForever);
 800a87e:	4b15      	ldr	r3, [pc, #84]	; (800a8d4 <StartDefaultTask6+0x7c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f04f 31ff 	mov.w	r1, #4294967295
 800a886:	4618      	mov	r0, r3
 800a888:	f7fc ffc4 	bl	8007814 <osMailAlloc>
 800a88c:	61f8      	str	r0, [r7, #28]
	  if (mail != NULL) {
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d018      	beq.n	800a8c6 <StartDefaultTask6+0x6e>
		  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 800a894:	4b10      	ldr	r3, [pc, #64]	; (800a8d8 <StartDefaultTask6+0x80>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f04f 31ff 	mov.w	r1, #4294967295
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fc fcff 	bl	80072a0 <osSemaphoreWait>
		  sprintf(mail->msg,buf);
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	f107 0208 	add.w	r2, r7, #8
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fe82 	bl	800b5b4 <siprintf>
		  osMailPut(mail_b, mail);
 800a8b0:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <StartDefaultTask6+0x7c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69f9      	ldr	r1, [r7, #28]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fc ffc2 	bl	8007840 <osMailPut>
		  osSemaphoreRelease(myBinarySem01Handle);
 800a8bc:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <StartDefaultTask6+0x80>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fc fd3b 	bl	800733c <osSemaphoreRelease>
	  }
	  //osThreadYield();
	  osDelay(100);
 800a8c6:	2064      	movs	r0, #100	; 0x64
 800a8c8:	f7fc fca3 	bl	8007212 <osDelay>
  {
 800a8cc:	e7d7      	b.n	800a87e <StartDefaultTask6+0x26>
 800a8ce:	bf00      	nop
 800a8d0:	0800bde0 	.word	0x0800bde0
 800a8d4:	200040c0 	.word	0x200040c0
 800a8d8:	200040c4 	.word	0x200040c4

0800a8dc <StartDefaultTask7>:
  /* USER CODE END 5 */
}


void StartDefaultTask7(void const * argument)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08c      	sub	sp, #48	; 0x30
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
    char res[20];
    

                 
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a8e4:	f000 fa34 	bl	800ad50 <MX_USB_HOST_Init>
  for(;;)
  {

	  //mail_b = osMailCreate(osMailQ(mail_b), NULL);

	  osEvent evt = osMailGet(mail_b, osWaitForever);
 800a8e8:	4b13      	ldr	r3, [pc, #76]	; (800a938 <StartDefaultTask7+0x5c>)
 800a8ea:	6819      	ldr	r1, [r3, #0]
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fc ffe1 	bl	80078bc <osMailGet>
	  if (evt.status == osEventMail) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	d116      	bne.n	800a92e <StartDefaultTask7+0x52>
		  mail_t *msg = (mail_t *) evt.value.p;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
		  sprintf(res, msg->msg);
 800a904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a906:	f107 0318 	add.w	r3, r7, #24
 800a90a:	4611      	mov	r1, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fe51 	bl	800b5b4 <siprintf>
		  HAL_UART_Transmit(&huart2, res, sizeof(res), 1000);
 800a912:	f107 0118 	add.w	r1, r7, #24
 800a916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a91a:	2214      	movs	r2, #20
 800a91c:	4807      	ldr	r0, [pc, #28]	; (800a93c <StartDefaultTask7+0x60>)
 800a91e:	f7f9 f9ea 	bl	8003cf6 <HAL_UART_Transmit>

		  osMailFree(mail_b, msg);
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <StartDefaultTask7+0x5c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fd f83b 	bl	80079a4 <osMailFree>

	  }
	 // osThreadYield();
	  osDelay(100);
 800a92e:	2064      	movs	r0, #100	; 0x64
 800a930:	f7fc fc6f 	bl	8007212 <osDelay>
  {
 800a934:	e7d8      	b.n	800a8e8 <StartDefaultTask7+0xc>
 800a936:	bf00      	nop
 800a938:	200040c0 	.word	0x200040c0
 800a93c:	20004124 	.word	0x20004124

0800a940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a944:	bf00      	nop
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
	...

0800a950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a956:	2300      	movs	r3, #0
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <HAL_MspInit+0x54>)
 800a95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95e:	4a11      	ldr	r2, [pc, #68]	; (800a9a4 <HAL_MspInit+0x54>)
 800a960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a964:	6453      	str	r3, [r2, #68]	; 0x44
 800a966:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <HAL_MspInit+0x54>)
 800a968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a96e:	607b      	str	r3, [r7, #4]
 800a970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a972:	2300      	movs	r3, #0
 800a974:	603b      	str	r3, [r7, #0]
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <HAL_MspInit+0x54>)
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	4a0a      	ldr	r2, [pc, #40]	; (800a9a4 <HAL_MspInit+0x54>)
 800a97c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a980:	6413      	str	r3, [r2, #64]	; 0x40
 800a982:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <HAL_MspInit+0x54>)
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a98a:	603b      	str	r3, [r7, #0]
 800a98c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a98e:	2200      	movs	r2, #0
 800a990:	210f      	movs	r1, #15
 800a992:	f06f 0001 	mvn.w	r0, #1
 800a996:	f7f5 ff5a 	bl	800084e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40023800 	.word	0x40023800

0800a9a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	; 0x28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9b0:	f107 0314 	add.w	r3, r7, #20
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	605a      	str	r2, [r3, #4]
 800a9ba:	609a      	str	r2, [r3, #8]
 800a9bc:	60da      	str	r2, [r3, #12]
 800a9be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a19      	ldr	r2, [pc, #100]	; (800aa2c <HAL_I2C_MspInit+0x84>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d12c      	bne.n	800aa24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	613b      	str	r3, [r7, #16]
 800a9ce:	4b18      	ldr	r3, [pc, #96]	; (800aa30 <HAL_I2C_MspInit+0x88>)
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	4a17      	ldr	r2, [pc, #92]	; (800aa30 <HAL_I2C_MspInit+0x88>)
 800a9d4:	f043 0302 	orr.w	r3, r3, #2
 800a9d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a9da:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <HAL_I2C_MspInit+0x88>)
 800a9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800a9e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a9ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a9ec:	2312      	movs	r3, #18
 800a9ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	4619      	mov	r1, r3
 800aa02:	480c      	ldr	r0, [pc, #48]	; (800aa34 <HAL_I2C_MspInit+0x8c>)
 800aa04:	f7f5 ff5a 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <HAL_I2C_MspInit+0x88>)
 800aa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa10:	4a07      	ldr	r2, [pc, #28]	; (800aa30 <HAL_I2C_MspInit+0x88>)
 800aa12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa16:	6413      	str	r3, [r2, #64]	; 0x40
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <HAL_I2C_MspInit+0x88>)
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800aa24:	bf00      	nop
 800aa26:	3728      	adds	r7, #40	; 0x28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	40005400 	.word	0x40005400
 800aa30:	40023800 	.word	0x40023800
 800aa34:	40020400 	.word	0x40020400

0800aa38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	; 0x28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa40:	f107 0314 	add.w	r3, r7, #20
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	605a      	str	r2, [r3, #4]
 800aa4a:	609a      	str	r2, [r3, #8]
 800aa4c:	60da      	str	r2, [r3, #12]
 800aa4e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a28      	ldr	r2, [pc, #160]	; (800aaf8 <HAL_I2S_MspInit+0xc0>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d14a      	bne.n	800aaf0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	613b      	str	r3, [r7, #16]
 800aa5e:	4b27      	ldr	r3, [pc, #156]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa62:	4a26      	ldr	r2, [pc, #152]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa68:	6413      	str	r3, [r2, #64]	; 0x40
 800aa6a:	4b24      	ldr	r3, [pc, #144]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa72:	613b      	str	r3, [r7, #16]
 800aa74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	4b20      	ldr	r3, [pc, #128]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	4a1f      	ldr	r2, [pc, #124]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	6313      	str	r3, [r2, #48]	; 0x30
 800aa86:	4b1d      	ldr	r3, [pc, #116]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa92:	2300      	movs	r3, #0
 800aa94:	60bb      	str	r3, [r7, #8]
 800aa96:	4b19      	ldr	r3, [pc, #100]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9a:	4a18      	ldr	r2, [pc, #96]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aa9c:	f043 0304 	orr.w	r3, r3, #4
 800aaa0:	6313      	str	r3, [r2, #48]	; 0x30
 800aaa2:	4b16      	ldr	r3, [pc, #88]	; (800aafc <HAL_I2S_MspInit+0xc4>)
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	60bb      	str	r3, [r7, #8]
 800aaac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800aaae:	2310      	movs	r3, #16
 800aab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab2:	2302      	movs	r3, #2
 800aab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaba:	2300      	movs	r3, #0
 800aabc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800aabe:	2306      	movs	r3, #6
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	4619      	mov	r1, r3
 800aac8:	480d      	ldr	r0, [pc, #52]	; (800ab00 <HAL_I2S_MspInit+0xc8>)
 800aaca:	f7f5 fef7 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800aace:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800aad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aad4:	2302      	movs	r3, #2
 800aad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aadc:	2300      	movs	r3, #0
 800aade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800aae0:	2306      	movs	r3, #6
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aae4:	f107 0314 	add.w	r3, r7, #20
 800aae8:	4619      	mov	r1, r3
 800aaea:	4806      	ldr	r0, [pc, #24]	; (800ab04 <HAL_I2S_MspInit+0xcc>)
 800aaec:	f7f5 fee6 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800aaf0:	bf00      	nop
 800aaf2:	3728      	adds	r7, #40	; 0x28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	40003c00 	.word	0x40003c00
 800aafc:	40023800 	.word	0x40023800
 800ab00:	40020000 	.word	0x40020000
 800ab04:	40020800 	.word	0x40020800

0800ab08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab10:	f107 0314 	add.w	r3, r7, #20
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	605a      	str	r2, [r3, #4]
 800ab1a:	609a      	str	r2, [r3, #8]
 800ab1c:	60da      	str	r2, [r3, #12]
 800ab1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a19      	ldr	r2, [pc, #100]	; (800ab8c <HAL_SPI_MspInit+0x84>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d12b      	bne.n	800ab82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	613b      	str	r3, [r7, #16]
 800ab2e:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <HAL_SPI_MspInit+0x88>)
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	4a17      	ldr	r2, [pc, #92]	; (800ab90 <HAL_SPI_MspInit+0x88>)
 800ab34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab38:	6453      	str	r3, [r2, #68]	; 0x44
 800ab3a:	4b15      	ldr	r3, [pc, #84]	; (800ab90 <HAL_SPI_MspInit+0x88>)
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab42:	613b      	str	r3, [r7, #16]
 800ab44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab46:	2300      	movs	r3, #0
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <HAL_SPI_MspInit+0x88>)
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	4a10      	ldr	r2, [pc, #64]	; (800ab90 <HAL_SPI_MspInit+0x88>)
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	6313      	str	r3, [r2, #48]	; 0x30
 800ab56:	4b0e      	ldr	r3, [pc, #56]	; (800ab90 <HAL_SPI_MspInit+0x88>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800ab62:	23e0      	movs	r3, #224	; 0xe0
 800ab64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab66:	2302      	movs	r3, #2
 800ab68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ab72:	2305      	movs	r3, #5
 800ab74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab76:	f107 0314 	add.w	r3, r7, #20
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4805      	ldr	r0, [pc, #20]	; (800ab94 <HAL_SPI_MspInit+0x8c>)
 800ab7e:	f7f5 fe9d 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ab82:	bf00      	nop
 800ab84:	3728      	adds	r7, #40	; 0x28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	40013000 	.word	0x40013000
 800ab90:	40023800 	.word	0x40023800
 800ab94:	40020000 	.word	0x40020000

0800ab98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aba0:	f107 0314 	add.w	r3, r7, #20
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	609a      	str	r2, [r3, #8]
 800abac:	60da      	str	r2, [r3, #12]
 800abae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a19      	ldr	r2, [pc, #100]	; (800ac1c <HAL_UART_MspInit+0x84>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d12b      	bne.n	800ac12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800abba:	2300      	movs	r3, #0
 800abbc:	613b      	str	r3, [r7, #16]
 800abbe:	4b18      	ldr	r3, [pc, #96]	; (800ac20 <HAL_UART_MspInit+0x88>)
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	4a17      	ldr	r2, [pc, #92]	; (800ac20 <HAL_UART_MspInit+0x88>)
 800abc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abc8:	6413      	str	r3, [r2, #64]	; 0x40
 800abca:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <HAL_UART_MspInit+0x88>)
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abd6:	2300      	movs	r3, #0
 800abd8:	60fb      	str	r3, [r7, #12]
 800abda:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <HAL_UART_MspInit+0x88>)
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	4a10      	ldr	r2, [pc, #64]	; (800ac20 <HAL_UART_MspInit+0x88>)
 800abe0:	f043 0301 	orr.w	r3, r3, #1
 800abe4:	6313      	str	r3, [r2, #48]	; 0x30
 800abe6:	4b0e      	ldr	r3, [pc, #56]	; (800ac20 <HAL_UART_MspInit+0x88>)
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800abf2:	230c      	movs	r3, #12
 800abf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf6:	2302      	movs	r3, #2
 800abf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800abfa:	2301      	movs	r3, #1
 800abfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abfe:	2303      	movs	r3, #3
 800ac00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ac02:	2307      	movs	r3, #7
 800ac04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac06:	f107 0314 	add.w	r3, r7, #20
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4805      	ldr	r0, [pc, #20]	; (800ac24 <HAL_UART_MspInit+0x8c>)
 800ac0e:	f7f5 fe55 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ac12:	bf00      	nop
 800ac14:	3728      	adds	r7, #40	; 0x28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40004400 	.word	0x40004400
 800ac20:	40023800 	.word	0x40023800
 800ac24:	40020000 	.word	0x40020000

0800ac28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ac2c:	bf00      	nop
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac36:	b480      	push	{r7}
 800ac38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac3a:	e7fe      	b.n	800ac3a <HardFault_Handler+0x4>

0800ac3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ac40:	e7fe      	b.n	800ac40 <MemManage_Handler+0x4>

0800ac42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac42:	b480      	push	{r7}
 800ac44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ac46:	e7fe      	b.n	800ac46 <BusFault_Handler+0x4>

0800ac48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac4c:	e7fe      	b.n	800ac4c <UsageFault_Handler+0x4>

0800ac4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac52:	bf00      	nop
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ac60:	f7f5 fcd8 	bl	8000614 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ac64:	f7fe fbf8 	bl	8009458 <xTaskGetSchedulerState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d001      	beq.n	800ac72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ac6e:	f7fe ffeb 	bl	8009c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ac72:	bf00      	nop
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800ac7c:	4802      	ldr	r0, [pc, #8]	; (800ac88 <OTG_FS_IRQHandler+0x10>)
 800ac7e:	f7f6 fa71 	bl	8001164 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ac82:	bf00      	nop
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20004584 	.word	0x20004584

0800ac8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ac94:	4b11      	ldr	r3, [pc, #68]	; (800acdc <_sbrk+0x50>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <_sbrk+0x16>
		heap_end = &end;
 800ac9c:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <_sbrk+0x50>)
 800ac9e:	4a10      	ldr	r2, [pc, #64]	; (800ace0 <_sbrk+0x54>)
 800aca0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <_sbrk+0x50>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <_sbrk+0x50>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	466a      	mov	r2, sp
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d907      	bls.n	800acc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800acb6:	f000 fb77 	bl	800b3a8 <__errno>
 800acba:	4602      	mov	r2, r0
 800acbc:	230c      	movs	r3, #12
 800acbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800acc0:	f04f 33ff 	mov.w	r3, #4294967295
 800acc4:	e006      	b.n	800acd4 <_sbrk+0x48>
	}

	heap_end += incr;
 800acc6:	4b05      	ldr	r3, [pc, #20]	; (800acdc <_sbrk+0x50>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	4a03      	ldr	r2, [pc, #12]	; (800acdc <_sbrk+0x50>)
 800acd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800acd2:	68fb      	ldr	r3, [r7, #12]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20004054 	.word	0x20004054
 800ace0:	20004850 	.word	0x20004850

0800ace4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ace8:	4b16      	ldr	r3, [pc, #88]	; (800ad44 <SystemInit+0x60>)
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acee:	4a15      	ldr	r2, [pc, #84]	; (800ad44 <SystemInit+0x60>)
 800acf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800acf8:	4b13      	ldr	r3, [pc, #76]	; (800ad48 <SystemInit+0x64>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a12      	ldr	r2, [pc, #72]	; (800ad48 <SystemInit+0x64>)
 800acfe:	f043 0301 	orr.w	r3, r3, #1
 800ad02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ad04:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <SystemInit+0x64>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <SystemInit+0x64>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	; (800ad48 <SystemInit+0x64>)
 800ad10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ad14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <SystemInit+0x64>)
 800ad1c:	4a0b      	ldr	r2, [pc, #44]	; (800ad4c <SystemInit+0x68>)
 800ad1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <SystemInit+0x64>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a08      	ldr	r2, [pc, #32]	; (800ad48 <SystemInit+0x64>)
 800ad26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ad2c:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <SystemInit+0x64>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ad32:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <SystemInit+0x60>)
 800ad34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad38:	609a      	str	r2, [r3, #8]
#endif
}
 800ad3a:	bf00      	nop
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	e000ed00 	.word	0xe000ed00
 800ad48:	40023800 	.word	0x40023800
 800ad4c:	24003010 	.word	0x24003010

0800ad50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ad54:	2201      	movs	r2, #1
 800ad56:	490e      	ldr	r1, [pc, #56]	; (800ad90 <MX_USB_HOST_Init+0x40>)
 800ad58:	480e      	ldr	r0, [pc, #56]	; (800ad94 <MX_USB_HOST_Init+0x44>)
 800ad5a:	f7fa fdbb 	bl	80058d4 <USBH_Init>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ad64:	f7ff fdec 	bl	800a940 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ad68:	490b      	ldr	r1, [pc, #44]	; (800ad98 <MX_USB_HOST_Init+0x48>)
 800ad6a:	480a      	ldr	r0, [pc, #40]	; (800ad94 <MX_USB_HOST_Init+0x44>)
 800ad6c:	f7fa fe4d 	bl	8005a0a <USBH_RegisterClass>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad76:	f7ff fde3 	bl	800a940 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ad7a:	4806      	ldr	r0, [pc, #24]	; (800ad94 <MX_USB_HOST_Init+0x44>)
 800ad7c:	f7fa fed2 	bl	8005b24 <USBH_Start>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad86:	f7ff fddb 	bl	800a940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad8a:	bf00      	nop
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	0800ad9d 	.word	0x0800ad9d
 800ad94:	200041ac 	.word	0x200041ac
 800ad98:	20000008 	.word	0x20000008

0800ad9c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	3b01      	subs	r3, #1
 800adac:	2b04      	cmp	r3, #4
 800adae:	d819      	bhi.n	800ade4 <USBH_UserProcess+0x48>
 800adb0:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <USBH_UserProcess+0x1c>)
 800adb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb6:	bf00      	nop
 800adb8:	0800ade5 	.word	0x0800ade5
 800adbc:	0800add5 	.word	0x0800add5
 800adc0:	0800ade5 	.word	0x0800ade5
 800adc4:	0800addd 	.word	0x0800addd
 800adc8:	0800adcd 	.word	0x0800adcd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <USBH_UserProcess+0x58>)
 800adce:	2203      	movs	r2, #3
 800add0:	701a      	strb	r2, [r3, #0]
  break;
 800add2:	e008      	b.n	800ade6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800add4:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <USBH_UserProcess+0x58>)
 800add6:	2202      	movs	r2, #2
 800add8:	701a      	strb	r2, [r3, #0]
  break;
 800adda:	e004      	b.n	800ade6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <USBH_UserProcess+0x58>)
 800adde:	2201      	movs	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
  break;
 800ade2:	e000      	b.n	800ade6 <USBH_UserProcess+0x4a>

  default:
  break;
 800ade4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20004058 	.word	0x20004058

0800adf8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08a      	sub	sp, #40	; 0x28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae00:	f107 0314 	add.w	r3, r7, #20
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	605a      	str	r2, [r3, #4]
 800ae0a:	609a      	str	r2, [r3, #8]
 800ae0c:	60da      	str	r2, [r3, #12]
 800ae0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae18:	d147      	bne.n	800aeaa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	613b      	str	r3, [r7, #16]
 800ae1e:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	4a24      	ldr	r2, [pc, #144]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae24:	f043 0301 	orr.w	r3, r3, #1
 800ae28:	6313      	str	r3, [r2, #48]	; 0x30
 800ae2a:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	613b      	str	r3, [r7, #16]
 800ae34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ae36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ae44:	f107 0314 	add.w	r3, r7, #20
 800ae48:	4619      	mov	r1, r3
 800ae4a:	481b      	ldr	r0, [pc, #108]	; (800aeb8 <HAL_HCD_MspInit+0xc0>)
 800ae4c:	f7f5 fd36 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ae50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ae54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae56:	2302      	movs	r3, #2
 800ae58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae62:	230a      	movs	r3, #10
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4812      	ldr	r0, [pc, #72]	; (800aeb8 <HAL_HCD_MspInit+0xc0>)
 800ae6e:	f7f5 fd25 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae72:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae76:	4a0f      	ldr	r2, [pc, #60]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae7c:	6353      	str	r3, [r2, #52]	; 0x34
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae86:	4a0b      	ldr	r2, [pc, #44]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae8c:	6453      	str	r3, [r2, #68]	; 0x44
 800ae8e:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <HAL_HCD_MspInit+0xbc>)
 800ae90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2105      	movs	r1, #5
 800ae9e:	2043      	movs	r0, #67	; 0x43
 800aea0:	f7f5 fcd5 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aea4:	2043      	movs	r0, #67	; 0x43
 800aea6:	f7f5 fcee 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aeaa:	bf00      	nop
 800aeac:	3728      	adds	r7, #40	; 0x28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	40023800 	.word	0x40023800
 800aeb8:	40020000 	.word	0x40020000

0800aebc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fb f97d 	bl	80061ca <USBH_LL_IncTimer>
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fb f9c2 	bl	8006270 <USBH_LL_Connect>
}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af02:	4618      	mov	r0, r3
 800af04:	f7fb f9e8 	bl	80062d8 <USBH_LL_Disconnect>
}
 800af08:	bf00      	nop
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
 800af1c:	4613      	mov	r3, r2
 800af1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af26:	4618      	mov	r0, r3
 800af28:	f7fb fa26 	bl	8006378 <USBH_LL_NotifyURBChange>
#endif
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af42:	4618      	mov	r0, r3
 800af44:	f7fb f96b 	bl	800621e <USBH_LL_PortEnabled>
} 
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fb f96b 	bl	800623a <USBH_LL_PortDisabled>
} 
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d12a      	bne.n	800afd4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800af7e:	4a18      	ldr	r2, [pc, #96]	; (800afe0 <USBH_LL_Init+0x74>)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a15      	ldr	r2, [pc, #84]	; (800afe0 <USBH_LL_Init+0x74>)
 800af8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af8e:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <USBH_LL_Init+0x74>)
 800af90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <USBH_LL_Init+0x74>)
 800af98:	2208      	movs	r2, #8
 800af9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800af9c:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <USBH_LL_Init+0x74>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800afa2:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <USBH_LL_Init+0x74>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800afa8:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <USBH_LL_Init+0x74>)
 800afaa:	2202      	movs	r2, #2
 800afac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800afae:	4b0c      	ldr	r3, [pc, #48]	; (800afe0 <USBH_LL_Init+0x74>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800afb4:	480a      	ldr	r0, [pc, #40]	; (800afe0 <USBH_LL_Init+0x74>)
 800afb6:	f7f5 fe4f 	bl	8000c58 <HAL_HCD_Init>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800afc0:	f7ff fcbe 	bl	800a940 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800afc4:	4806      	ldr	r0, [pc, #24]	; (800afe0 <USBH_LL_Init+0x74>)
 800afc6:	f7f6 fa4b 	bl	8001460 <HAL_HCD_GetCurrentFrame>
 800afca:	4603      	mov	r3, r0
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7fb f8ec 	bl	80061ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20004584 	.word	0x20004584

0800afe4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800affa:	4618      	mov	r0, r3
 800affc:	f7f6 f9b8 	bl	8001370 <HAL_HCD_Start>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f95c 	bl	800b2c4 <USBH_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b030:	4618      	mov	r0, r3
 800b032:	f7f6 f9c0 	bl	80013b6 <HAL_HCD_Stop>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 f941 	bl	800b2c4 <USBH_Get_USB_Status>
 800b042:	4603      	mov	r3, r0
 800b044:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b046:	7bbb      	ldrb	r3, [r7, #14]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b062:	4618      	mov	r0, r3
 800b064:	f7f6 fa0a 	bl	800147c <HAL_HCD_GetCurrentSpeed>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d007      	beq.n	800b07e <USBH_LL_GetSpeed+0x2e>
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d302      	bcc.n	800b078 <USBH_LL_GetSpeed+0x28>
 800b072:	2b02      	cmp	r3, #2
 800b074:	d006      	beq.n	800b084 <USBH_LL_GetSpeed+0x34>
 800b076:	e008      	b.n	800b08a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
    break;
 800b07c:	e008      	b.n	800b090 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b07e:	2301      	movs	r3, #1
 800b080:	73fb      	strb	r3, [r7, #15]
    break;
 800b082:	e005      	b.n	800b090 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b084:	2302      	movs	r3, #2
 800b086:	73fb      	strb	r3, [r7, #15]
    break;
 800b088:	e002      	b.n	800b090 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b08a:	2301      	movs	r3, #1
 800b08c:	73fb      	strb	r3, [r7, #15]
    break;
 800b08e:	bf00      	nop
  }
  return  speed;
 800b090:	7bfb      	ldrb	r3, [r7, #15]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f6 f99d 	bl	80013f0 <HAL_HCD_ResetPort>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f901 	bl	800b2c4 <USBH_Get_USB_Status>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f6 f9a5 	bl	8001436 <HAL_HCD_HC_GetXferCount>
 800b0ec:	4603      	mov	r3, r0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0f6:	b590      	push	{r4, r7, lr}
 800b0f8:	b089      	sub	sp, #36	; 0x24
 800b0fa:	af04      	add	r7, sp, #16
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	4608      	mov	r0, r1
 800b100:	4611      	mov	r1, r2
 800b102:	461a      	mov	r2, r3
 800b104:	4603      	mov	r3, r0
 800b106:	70fb      	strb	r3, [r7, #3]
 800b108:	460b      	mov	r3, r1
 800b10a:	70bb      	strb	r3, [r7, #2]
 800b10c:	4613      	mov	r3, r2
 800b10e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b11e:	787c      	ldrb	r4, [r7, #1]
 800b120:	78ba      	ldrb	r2, [r7, #2]
 800b122:	78f9      	ldrb	r1, [r7, #3]
 800b124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b126:	9302      	str	r3, [sp, #8]
 800b128:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	4623      	mov	r3, r4
 800b136:	f7f5 fdf1 	bl	8000d1c <HAL_HCD_HC_Init>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 f8bf 	bl	800b2c4 <USBH_Get_USB_Status>
 800b146:	4603      	mov	r3, r0
 800b148:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}

0800b154 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f7f5 fe6a 	bl	8000e4c <HAL_HCD_HC_Halt>
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f8a0 	bl	800b2c4 <USBH_Get_USB_Status>
 800b184:	4603      	mov	r3, r0
 800b186:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b188:	7bbb      	ldrb	r3, [r7, #14]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b192:	b590      	push	{r4, r7, lr}
 800b194:	b089      	sub	sp, #36	; 0x24
 800b196:	af04      	add	r7, sp, #16
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	4608      	mov	r0, r1
 800b19c:	4611      	mov	r1, r2
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	70fb      	strb	r3, [r7, #3]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70bb      	strb	r3, [r7, #2]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b1ba:	787c      	ldrb	r4, [r7, #1]
 800b1bc:	78ba      	ldrb	r2, [r7, #2]
 800b1be:	78f9      	ldrb	r1, [r7, #3]
 800b1c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b1c4:	9303      	str	r3, [sp, #12]
 800b1c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1c8:	9302      	str	r3, [sp, #8]
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	f7f5 fe5d 	bl	8000e94 <HAL_HCD_HC_SubmitRequest>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f86f 	bl	800b2c4 <USBH_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd90      	pop	{r4, r7, pc}

0800b1f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	4611      	mov	r1, r2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f6 f8fe 	bl	800140c <HAL_HCD_HC_GetURBState>
 800b210:	4603      	mov	r3, r0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d103      	bne.n	800b238 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	4618      	mov	r0, r3
 800b234:	f000 f872 	bl	800b31c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b238:	20c8      	movs	r0, #200	; 0xc8
 800b23a:	f7f5 fa0b 	bl	8000654 <HAL_Delay>
  return USBH_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
 800b254:	4613      	mov	r3, r2
 800b256:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b25e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b260:	78fa      	ldrb	r2, [r7, #3]
 800b262:	68f9      	ldr	r1, [r7, #12]
 800b264:	4613      	mov	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	440b      	add	r3, r1
 800b26e:	333b      	adds	r3, #59	; 0x3b
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b276:	78fa      	ldrb	r2, [r7, #3]
 800b278:	68f9      	ldr	r1, [r7, #12]
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	00db      	lsls	r3, r3, #3
 800b282:	440b      	add	r3, r1
 800b284:	3350      	adds	r3, #80	; 0x50
 800b286:	78ba      	ldrb	r2, [r7, #2]
 800b288:	701a      	strb	r2, [r3, #0]
 800b28a:	e009      	b.n	800b2a0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b28c:	78fa      	ldrb	r2, [r7, #3]
 800b28e:	68f9      	ldr	r1, [r7, #12]
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	440b      	add	r3, r1
 800b29a:	3351      	adds	r3, #81	; 0x51
 800b29c:	78ba      	ldrb	r2, [r7, #2]
 800b29e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7f5 f9cc 	bl	8000654 <HAL_Delay>
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d817      	bhi.n	800b308 <USBH_Get_USB_Status+0x44>
 800b2d8:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <USBH_Get_USB_Status+0x1c>)
 800b2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2de:	bf00      	nop
 800b2e0:	0800b2f1 	.word	0x0800b2f1
 800b2e4:	0800b2f7 	.word	0x0800b2f7
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b303 	.word	0x0800b303
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f4:	e00b      	b.n	800b30e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fa:	e008      	b.n	800b30e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b300:	e005      	b.n	800b30e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b302:	2302      	movs	r3, #2
 800b304:	73fb      	strb	r3, [r7, #15]
    break;
 800b306:	e002      	b.n	800b30e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b308:	2302      	movs	r3, #2
 800b30a:	73fb      	strb	r3, [r7, #15]
    break;
 800b30c:	bf00      	nop
  }
  return usb_status;
 800b30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b330:	2301      	movs	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
 800b334:	e001      	b.n	800b33a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	461a      	mov	r2, r3
 800b33e:	2101      	movs	r1, #1
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <MX_DriverVbusFS+0x34>)
 800b342:	f7f5 fc55 	bl	8000bf0 <HAL_GPIO_WritePin>
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	40020800 	.word	0x40020800

0800b354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b38c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b358:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b35a:	e003      	b.n	800b364 <LoopCopyDataInit>

0800b35c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b35c:	4b0c      	ldr	r3, [pc, #48]	; (800b390 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b35e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b360:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b362:	3104      	adds	r1, #4

0800b364 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b364:	480b      	ldr	r0, [pc, #44]	; (800b394 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b366:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b368:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b36a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b36c:	d3f6      	bcc.n	800b35c <CopyDataInit>
  ldr  r2, =_sbss
 800b36e:	4a0b      	ldr	r2, [pc, #44]	; (800b39c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b370:	e002      	b.n	800b378 <LoopFillZerobss>

0800b372 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b372:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b374:	f842 3b04 	str.w	r3, [r2], #4

0800b378 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b378:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b37a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b37c:	d3f9      	bcc.n	800b372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b37e:	f7ff fcb1 	bl	800ace4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b382:	f000 f817 	bl	800b3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b386:	f7fe fedb 	bl	800a140 <main>
  bx  lr    
 800b38a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b38c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b390:	0800be5c 	.word	0x0800be5c
  ldr  r0, =_sdata
 800b394:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b398:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800b39c:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800b3a0:	2000484c 	.word	0x2000484c

0800b3a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3a4:	e7fe      	b.n	800b3a4 <ADC_IRQHandler>
	...

0800b3a8 <__errno>:
 800b3a8:	4b01      	ldr	r3, [pc, #4]	; (800b3b0 <__errno+0x8>)
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20000030 	.word	0x20000030

0800b3b4 <__libc_init_array>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	4e0d      	ldr	r6, [pc, #52]	; (800b3ec <__libc_init_array+0x38>)
 800b3b8:	4c0d      	ldr	r4, [pc, #52]	; (800b3f0 <__libc_init_array+0x3c>)
 800b3ba:	1ba4      	subs	r4, r4, r6
 800b3bc:	10a4      	asrs	r4, r4, #2
 800b3be:	2500      	movs	r5, #0
 800b3c0:	42a5      	cmp	r5, r4
 800b3c2:	d109      	bne.n	800b3d8 <__libc_init_array+0x24>
 800b3c4:	4e0b      	ldr	r6, [pc, #44]	; (800b3f4 <__libc_init_array+0x40>)
 800b3c6:	4c0c      	ldr	r4, [pc, #48]	; (800b3f8 <__libc_init_array+0x44>)
 800b3c8:	f000 fc38 	bl	800bc3c <_init>
 800b3cc:	1ba4      	subs	r4, r4, r6
 800b3ce:	10a4      	asrs	r4, r4, #2
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	42a5      	cmp	r5, r4
 800b3d4:	d105      	bne.n	800b3e2 <__libc_init_array+0x2e>
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3dc:	4798      	blx	r3
 800b3de:	3501      	adds	r5, #1
 800b3e0:	e7ee      	b.n	800b3c0 <__libc_init_array+0xc>
 800b3e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3e6:	4798      	blx	r3
 800b3e8:	3501      	adds	r5, #1
 800b3ea:	e7f2      	b.n	800b3d2 <__libc_init_array+0x1e>
 800b3ec:	0800be54 	.word	0x0800be54
 800b3f0:	0800be54 	.word	0x0800be54
 800b3f4:	0800be54 	.word	0x0800be54
 800b3f8:	0800be58 	.word	0x0800be58

0800b3fc <malloc>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	; (800b408 <malloc+0xc>)
 800b3fe:	4601      	mov	r1, r0
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f000 b86d 	b.w	800b4e0 <_malloc_r>
 800b406:	bf00      	nop
 800b408:	20000030 	.word	0x20000030

0800b40c <free>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <free+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f000 b817 	b.w	800b444 <_free_r>
 800b416:	bf00      	nop
 800b418:	20000030 	.word	0x20000030

0800b41c <memcpy>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	1e43      	subs	r3, r0, #1
 800b420:	440a      	add	r2, r1
 800b422:	4291      	cmp	r1, r2
 800b424:	d100      	bne.n	800b428 <memcpy+0xc>
 800b426:	bd10      	pop	{r4, pc}
 800b428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b42c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b430:	e7f7      	b.n	800b422 <memcpy+0x6>

0800b432 <memset>:
 800b432:	4402      	add	r2, r0
 800b434:	4603      	mov	r3, r0
 800b436:	4293      	cmp	r3, r2
 800b438:	d100      	bne.n	800b43c <memset+0xa>
 800b43a:	4770      	bx	lr
 800b43c:	f803 1b01 	strb.w	r1, [r3], #1
 800b440:	e7f9      	b.n	800b436 <memset+0x4>
	...

0800b444 <_free_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	4605      	mov	r5, r0
 800b448:	2900      	cmp	r1, #0
 800b44a:	d045      	beq.n	800b4d8 <_free_r+0x94>
 800b44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b450:	1f0c      	subs	r4, r1, #4
 800b452:	2b00      	cmp	r3, #0
 800b454:	bfb8      	it	lt
 800b456:	18e4      	addlt	r4, r4, r3
 800b458:	f000 f8cc 	bl	800b5f4 <__malloc_lock>
 800b45c:	4a1f      	ldr	r2, [pc, #124]	; (800b4dc <_free_r+0x98>)
 800b45e:	6813      	ldr	r3, [r2, #0]
 800b460:	4610      	mov	r0, r2
 800b462:	b933      	cbnz	r3, 800b472 <_free_r+0x2e>
 800b464:	6063      	str	r3, [r4, #4]
 800b466:	6014      	str	r4, [r2, #0]
 800b468:	4628      	mov	r0, r5
 800b46a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46e:	f000 b8c2 	b.w	800b5f6 <__malloc_unlock>
 800b472:	42a3      	cmp	r3, r4
 800b474:	d90c      	bls.n	800b490 <_free_r+0x4c>
 800b476:	6821      	ldr	r1, [r4, #0]
 800b478:	1862      	adds	r2, r4, r1
 800b47a:	4293      	cmp	r3, r2
 800b47c:	bf04      	itt	eq
 800b47e:	681a      	ldreq	r2, [r3, #0]
 800b480:	685b      	ldreq	r3, [r3, #4]
 800b482:	6063      	str	r3, [r4, #4]
 800b484:	bf04      	itt	eq
 800b486:	1852      	addeq	r2, r2, r1
 800b488:	6022      	streq	r2, [r4, #0]
 800b48a:	6004      	str	r4, [r0, #0]
 800b48c:	e7ec      	b.n	800b468 <_free_r+0x24>
 800b48e:	4613      	mov	r3, r2
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	b10a      	cbz	r2, 800b498 <_free_r+0x54>
 800b494:	42a2      	cmp	r2, r4
 800b496:	d9fa      	bls.n	800b48e <_free_r+0x4a>
 800b498:	6819      	ldr	r1, [r3, #0]
 800b49a:	1858      	adds	r0, r3, r1
 800b49c:	42a0      	cmp	r0, r4
 800b49e:	d10b      	bne.n	800b4b8 <_free_r+0x74>
 800b4a0:	6820      	ldr	r0, [r4, #0]
 800b4a2:	4401      	add	r1, r0
 800b4a4:	1858      	adds	r0, r3, r1
 800b4a6:	4282      	cmp	r2, r0
 800b4a8:	6019      	str	r1, [r3, #0]
 800b4aa:	d1dd      	bne.n	800b468 <_free_r+0x24>
 800b4ac:	6810      	ldr	r0, [r2, #0]
 800b4ae:	6852      	ldr	r2, [r2, #4]
 800b4b0:	605a      	str	r2, [r3, #4]
 800b4b2:	4401      	add	r1, r0
 800b4b4:	6019      	str	r1, [r3, #0]
 800b4b6:	e7d7      	b.n	800b468 <_free_r+0x24>
 800b4b8:	d902      	bls.n	800b4c0 <_free_r+0x7c>
 800b4ba:	230c      	movs	r3, #12
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	e7d3      	b.n	800b468 <_free_r+0x24>
 800b4c0:	6820      	ldr	r0, [r4, #0]
 800b4c2:	1821      	adds	r1, r4, r0
 800b4c4:	428a      	cmp	r2, r1
 800b4c6:	bf04      	itt	eq
 800b4c8:	6811      	ldreq	r1, [r2, #0]
 800b4ca:	6852      	ldreq	r2, [r2, #4]
 800b4cc:	6062      	str	r2, [r4, #4]
 800b4ce:	bf04      	itt	eq
 800b4d0:	1809      	addeq	r1, r1, r0
 800b4d2:	6021      	streq	r1, [r4, #0]
 800b4d4:	605c      	str	r4, [r3, #4]
 800b4d6:	e7c7      	b.n	800b468 <_free_r+0x24>
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
 800b4da:	bf00      	nop
 800b4dc:	2000405c 	.word	0x2000405c

0800b4e0 <_malloc_r>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	1ccd      	adds	r5, r1, #3
 800b4e4:	f025 0503 	bic.w	r5, r5, #3
 800b4e8:	3508      	adds	r5, #8
 800b4ea:	2d0c      	cmp	r5, #12
 800b4ec:	bf38      	it	cc
 800b4ee:	250c      	movcc	r5, #12
 800b4f0:	2d00      	cmp	r5, #0
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	db01      	blt.n	800b4fa <_malloc_r+0x1a>
 800b4f6:	42a9      	cmp	r1, r5
 800b4f8:	d903      	bls.n	800b502 <_malloc_r+0x22>
 800b4fa:	230c      	movs	r3, #12
 800b4fc:	6033      	str	r3, [r6, #0]
 800b4fe:	2000      	movs	r0, #0
 800b500:	bd70      	pop	{r4, r5, r6, pc}
 800b502:	f000 f877 	bl	800b5f4 <__malloc_lock>
 800b506:	4a21      	ldr	r2, [pc, #132]	; (800b58c <_malloc_r+0xac>)
 800b508:	6814      	ldr	r4, [r2, #0]
 800b50a:	4621      	mov	r1, r4
 800b50c:	b991      	cbnz	r1, 800b534 <_malloc_r+0x54>
 800b50e:	4c20      	ldr	r4, [pc, #128]	; (800b590 <_malloc_r+0xb0>)
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	b91b      	cbnz	r3, 800b51c <_malloc_r+0x3c>
 800b514:	4630      	mov	r0, r6
 800b516:	f000 f83d 	bl	800b594 <_sbrk_r>
 800b51a:	6020      	str	r0, [r4, #0]
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f000 f838 	bl	800b594 <_sbrk_r>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d124      	bne.n	800b572 <_malloc_r+0x92>
 800b528:	230c      	movs	r3, #12
 800b52a:	6033      	str	r3, [r6, #0]
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 f862 	bl	800b5f6 <__malloc_unlock>
 800b532:	e7e4      	b.n	800b4fe <_malloc_r+0x1e>
 800b534:	680b      	ldr	r3, [r1, #0]
 800b536:	1b5b      	subs	r3, r3, r5
 800b538:	d418      	bmi.n	800b56c <_malloc_r+0x8c>
 800b53a:	2b0b      	cmp	r3, #11
 800b53c:	d90f      	bls.n	800b55e <_malloc_r+0x7e>
 800b53e:	600b      	str	r3, [r1, #0]
 800b540:	50cd      	str	r5, [r1, r3]
 800b542:	18cc      	adds	r4, r1, r3
 800b544:	4630      	mov	r0, r6
 800b546:	f000 f856 	bl	800b5f6 <__malloc_unlock>
 800b54a:	f104 000b 	add.w	r0, r4, #11
 800b54e:	1d23      	adds	r3, r4, #4
 800b550:	f020 0007 	bic.w	r0, r0, #7
 800b554:	1ac3      	subs	r3, r0, r3
 800b556:	d0d3      	beq.n	800b500 <_malloc_r+0x20>
 800b558:	425a      	negs	r2, r3
 800b55a:	50e2      	str	r2, [r4, r3]
 800b55c:	e7d0      	b.n	800b500 <_malloc_r+0x20>
 800b55e:	428c      	cmp	r4, r1
 800b560:	684b      	ldr	r3, [r1, #4]
 800b562:	bf16      	itet	ne
 800b564:	6063      	strne	r3, [r4, #4]
 800b566:	6013      	streq	r3, [r2, #0]
 800b568:	460c      	movne	r4, r1
 800b56a:	e7eb      	b.n	800b544 <_malloc_r+0x64>
 800b56c:	460c      	mov	r4, r1
 800b56e:	6849      	ldr	r1, [r1, #4]
 800b570:	e7cc      	b.n	800b50c <_malloc_r+0x2c>
 800b572:	1cc4      	adds	r4, r0, #3
 800b574:	f024 0403 	bic.w	r4, r4, #3
 800b578:	42a0      	cmp	r0, r4
 800b57a:	d005      	beq.n	800b588 <_malloc_r+0xa8>
 800b57c:	1a21      	subs	r1, r4, r0
 800b57e:	4630      	mov	r0, r6
 800b580:	f000 f808 	bl	800b594 <_sbrk_r>
 800b584:	3001      	adds	r0, #1
 800b586:	d0cf      	beq.n	800b528 <_malloc_r+0x48>
 800b588:	6025      	str	r5, [r4, #0]
 800b58a:	e7db      	b.n	800b544 <_malloc_r+0x64>
 800b58c:	2000405c 	.word	0x2000405c
 800b590:	20004060 	.word	0x20004060

0800b594 <_sbrk_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4c06      	ldr	r4, [pc, #24]	; (800b5b0 <_sbrk_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4605      	mov	r5, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	6023      	str	r3, [r4, #0]
 800b5a0:	f7ff fb74 	bl	800ac8c <_sbrk>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_sbrk_r+0x1a>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_sbrk_r+0x1a>
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	20004848 	.word	0x20004848

0800b5b4 <siprintf>:
 800b5b4:	b40e      	push	{r1, r2, r3}
 800b5b6:	b500      	push	{lr}
 800b5b8:	b09c      	sub	sp, #112	; 0x70
 800b5ba:	ab1d      	add	r3, sp, #116	; 0x74
 800b5bc:	9002      	str	r0, [sp, #8]
 800b5be:	9006      	str	r0, [sp, #24]
 800b5c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5c4:	4809      	ldr	r0, [pc, #36]	; (800b5ec <siprintf+0x38>)
 800b5c6:	9107      	str	r1, [sp, #28]
 800b5c8:	9104      	str	r1, [sp, #16]
 800b5ca:	4909      	ldr	r1, [pc, #36]	; (800b5f0 <siprintf+0x3c>)
 800b5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d0:	9105      	str	r1, [sp, #20]
 800b5d2:	6800      	ldr	r0, [r0, #0]
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	a902      	add	r1, sp, #8
 800b5d8:	f000 f868 	bl	800b6ac <_svfiprintf_r>
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	b01c      	add	sp, #112	; 0x70
 800b5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e8:	b003      	add	sp, #12
 800b5ea:	4770      	bx	lr
 800b5ec:	20000030 	.word	0x20000030
 800b5f0:	ffff0208 	.word	0xffff0208

0800b5f4 <__malloc_lock>:
 800b5f4:	4770      	bx	lr

0800b5f6 <__malloc_unlock>:
 800b5f6:	4770      	bx	lr

0800b5f8 <__ssputs_r>:
 800b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	688e      	ldr	r6, [r1, #8]
 800b5fe:	429e      	cmp	r6, r3
 800b600:	4682      	mov	sl, r0
 800b602:	460c      	mov	r4, r1
 800b604:	4690      	mov	r8, r2
 800b606:	4699      	mov	r9, r3
 800b608:	d837      	bhi.n	800b67a <__ssputs_r+0x82>
 800b60a:	898a      	ldrh	r2, [r1, #12]
 800b60c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b610:	d031      	beq.n	800b676 <__ssputs_r+0x7e>
 800b612:	6825      	ldr	r5, [r4, #0]
 800b614:	6909      	ldr	r1, [r1, #16]
 800b616:	1a6f      	subs	r7, r5, r1
 800b618:	6965      	ldr	r5, [r4, #20]
 800b61a:	2302      	movs	r3, #2
 800b61c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b620:	fb95 f5f3 	sdiv	r5, r5, r3
 800b624:	f109 0301 	add.w	r3, r9, #1
 800b628:	443b      	add	r3, r7
 800b62a:	429d      	cmp	r5, r3
 800b62c:	bf38      	it	cc
 800b62e:	461d      	movcc	r5, r3
 800b630:	0553      	lsls	r3, r2, #21
 800b632:	d530      	bpl.n	800b696 <__ssputs_r+0x9e>
 800b634:	4629      	mov	r1, r5
 800b636:	f7ff ff53 	bl	800b4e0 <_malloc_r>
 800b63a:	4606      	mov	r6, r0
 800b63c:	b950      	cbnz	r0, 800b654 <__ssputs_r+0x5c>
 800b63e:	230c      	movs	r3, #12
 800b640:	f8ca 3000 	str.w	r3, [sl]
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b654:	463a      	mov	r2, r7
 800b656:	6921      	ldr	r1, [r4, #16]
 800b658:	f7ff fee0 	bl	800b41c <memcpy>
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	6126      	str	r6, [r4, #16]
 800b66a:	6165      	str	r5, [r4, #20]
 800b66c:	443e      	add	r6, r7
 800b66e:	1bed      	subs	r5, r5, r7
 800b670:	6026      	str	r6, [r4, #0]
 800b672:	60a5      	str	r5, [r4, #8]
 800b674:	464e      	mov	r6, r9
 800b676:	454e      	cmp	r6, r9
 800b678:	d900      	bls.n	800b67c <__ssputs_r+0x84>
 800b67a:	464e      	mov	r6, r9
 800b67c:	4632      	mov	r2, r6
 800b67e:	4641      	mov	r1, r8
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	f000 fa93 	bl	800bbac <memmove>
 800b686:	68a3      	ldr	r3, [r4, #8]
 800b688:	1b9b      	subs	r3, r3, r6
 800b68a:	60a3      	str	r3, [r4, #8]
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	441e      	add	r6, r3
 800b690:	6026      	str	r6, [r4, #0]
 800b692:	2000      	movs	r0, #0
 800b694:	e7dc      	b.n	800b650 <__ssputs_r+0x58>
 800b696:	462a      	mov	r2, r5
 800b698:	f000 faa1 	bl	800bbde <_realloc_r>
 800b69c:	4606      	mov	r6, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d1e2      	bne.n	800b668 <__ssputs_r+0x70>
 800b6a2:	6921      	ldr	r1, [r4, #16]
 800b6a4:	4650      	mov	r0, sl
 800b6a6:	f7ff fecd 	bl	800b444 <_free_r>
 800b6aa:	e7c8      	b.n	800b63e <__ssputs_r+0x46>

0800b6ac <_svfiprintf_r>:
 800b6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b0:	461d      	mov	r5, r3
 800b6b2:	898b      	ldrh	r3, [r1, #12]
 800b6b4:	061f      	lsls	r7, r3, #24
 800b6b6:	b09d      	sub	sp, #116	; 0x74
 800b6b8:	4680      	mov	r8, r0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	4616      	mov	r6, r2
 800b6be:	d50f      	bpl.n	800b6e0 <_svfiprintf_r+0x34>
 800b6c0:	690b      	ldr	r3, [r1, #16]
 800b6c2:	b96b      	cbnz	r3, 800b6e0 <_svfiprintf_r+0x34>
 800b6c4:	2140      	movs	r1, #64	; 0x40
 800b6c6:	f7ff ff0b 	bl	800b4e0 <_malloc_r>
 800b6ca:	6020      	str	r0, [r4, #0]
 800b6cc:	6120      	str	r0, [r4, #16]
 800b6ce:	b928      	cbnz	r0, 800b6dc <_svfiprintf_r+0x30>
 800b6d0:	230c      	movs	r3, #12
 800b6d2:	f8c8 3000 	str.w	r3, [r8]
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	e0c8      	b.n	800b86e <_svfiprintf_r+0x1c2>
 800b6dc:	2340      	movs	r3, #64	; 0x40
 800b6de:	6163      	str	r3, [r4, #20]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e4:	2320      	movs	r3, #32
 800b6e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ea:	2330      	movs	r3, #48	; 0x30
 800b6ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6f0:	9503      	str	r5, [sp, #12]
 800b6f2:	f04f 0b01 	mov.w	fp, #1
 800b6f6:	4637      	mov	r7, r6
 800b6f8:	463d      	mov	r5, r7
 800b6fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6fe:	b10b      	cbz	r3, 800b704 <_svfiprintf_r+0x58>
 800b700:	2b25      	cmp	r3, #37	; 0x25
 800b702:	d13e      	bne.n	800b782 <_svfiprintf_r+0xd6>
 800b704:	ebb7 0a06 	subs.w	sl, r7, r6
 800b708:	d00b      	beq.n	800b722 <_svfiprintf_r+0x76>
 800b70a:	4653      	mov	r3, sl
 800b70c:	4632      	mov	r2, r6
 800b70e:	4621      	mov	r1, r4
 800b710:	4640      	mov	r0, r8
 800b712:	f7ff ff71 	bl	800b5f8 <__ssputs_r>
 800b716:	3001      	adds	r0, #1
 800b718:	f000 80a4 	beq.w	800b864 <_svfiprintf_r+0x1b8>
 800b71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71e:	4453      	add	r3, sl
 800b720:	9309      	str	r3, [sp, #36]	; 0x24
 800b722:	783b      	ldrb	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	f000 809d 	beq.w	800b864 <_svfiprintf_r+0x1b8>
 800b72a:	2300      	movs	r3, #0
 800b72c:	f04f 32ff 	mov.w	r2, #4294967295
 800b730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b734:	9304      	str	r3, [sp, #16]
 800b736:	9307      	str	r3, [sp, #28]
 800b738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b73c:	931a      	str	r3, [sp, #104]	; 0x68
 800b73e:	462f      	mov	r7, r5
 800b740:	2205      	movs	r2, #5
 800b742:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b746:	4850      	ldr	r0, [pc, #320]	; (800b888 <_svfiprintf_r+0x1dc>)
 800b748:	f7f4 fd42 	bl	80001d0 <memchr>
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	b9d0      	cbnz	r0, 800b786 <_svfiprintf_r+0xda>
 800b750:	06d9      	lsls	r1, r3, #27
 800b752:	bf44      	itt	mi
 800b754:	2220      	movmi	r2, #32
 800b756:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b75a:	071a      	lsls	r2, r3, #28
 800b75c:	bf44      	itt	mi
 800b75e:	222b      	movmi	r2, #43	; 0x2b
 800b760:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b764:	782a      	ldrb	r2, [r5, #0]
 800b766:	2a2a      	cmp	r2, #42	; 0x2a
 800b768:	d015      	beq.n	800b796 <_svfiprintf_r+0xea>
 800b76a:	9a07      	ldr	r2, [sp, #28]
 800b76c:	462f      	mov	r7, r5
 800b76e:	2000      	movs	r0, #0
 800b770:	250a      	movs	r5, #10
 800b772:	4639      	mov	r1, r7
 800b774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b778:	3b30      	subs	r3, #48	; 0x30
 800b77a:	2b09      	cmp	r3, #9
 800b77c:	d94d      	bls.n	800b81a <_svfiprintf_r+0x16e>
 800b77e:	b1b8      	cbz	r0, 800b7b0 <_svfiprintf_r+0x104>
 800b780:	e00f      	b.n	800b7a2 <_svfiprintf_r+0xf6>
 800b782:	462f      	mov	r7, r5
 800b784:	e7b8      	b.n	800b6f8 <_svfiprintf_r+0x4c>
 800b786:	4a40      	ldr	r2, [pc, #256]	; (800b888 <_svfiprintf_r+0x1dc>)
 800b788:	1a80      	subs	r0, r0, r2
 800b78a:	fa0b f000 	lsl.w	r0, fp, r0
 800b78e:	4318      	orrs	r0, r3
 800b790:	9004      	str	r0, [sp, #16]
 800b792:	463d      	mov	r5, r7
 800b794:	e7d3      	b.n	800b73e <_svfiprintf_r+0x92>
 800b796:	9a03      	ldr	r2, [sp, #12]
 800b798:	1d11      	adds	r1, r2, #4
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	9103      	str	r1, [sp, #12]
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	db01      	blt.n	800b7a6 <_svfiprintf_r+0xfa>
 800b7a2:	9207      	str	r2, [sp, #28]
 800b7a4:	e004      	b.n	800b7b0 <_svfiprintf_r+0x104>
 800b7a6:	4252      	negs	r2, r2
 800b7a8:	f043 0302 	orr.w	r3, r3, #2
 800b7ac:	9207      	str	r2, [sp, #28]
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	783b      	ldrb	r3, [r7, #0]
 800b7b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7b4:	d10c      	bne.n	800b7d0 <_svfiprintf_r+0x124>
 800b7b6:	787b      	ldrb	r3, [r7, #1]
 800b7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ba:	d133      	bne.n	800b824 <_svfiprintf_r+0x178>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	1d1a      	adds	r2, r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	9203      	str	r2, [sp, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bfb8      	it	lt
 800b7c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7cc:	3702      	adds	r7, #2
 800b7ce:	9305      	str	r3, [sp, #20]
 800b7d0:	4d2e      	ldr	r5, [pc, #184]	; (800b88c <_svfiprintf_r+0x1e0>)
 800b7d2:	7839      	ldrb	r1, [r7, #0]
 800b7d4:	2203      	movs	r2, #3
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f7f4 fcfa 	bl	80001d0 <memchr>
 800b7dc:	b138      	cbz	r0, 800b7ee <_svfiprintf_r+0x142>
 800b7de:	2340      	movs	r3, #64	; 0x40
 800b7e0:	1b40      	subs	r0, r0, r5
 800b7e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b7e6:	9b04      	ldr	r3, [sp, #16]
 800b7e8:	4303      	orrs	r3, r0
 800b7ea:	3701      	adds	r7, #1
 800b7ec:	9304      	str	r3, [sp, #16]
 800b7ee:	7839      	ldrb	r1, [r7, #0]
 800b7f0:	4827      	ldr	r0, [pc, #156]	; (800b890 <_svfiprintf_r+0x1e4>)
 800b7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7f6:	2206      	movs	r2, #6
 800b7f8:	1c7e      	adds	r6, r7, #1
 800b7fa:	f7f4 fce9 	bl	80001d0 <memchr>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d038      	beq.n	800b874 <_svfiprintf_r+0x1c8>
 800b802:	4b24      	ldr	r3, [pc, #144]	; (800b894 <_svfiprintf_r+0x1e8>)
 800b804:	bb13      	cbnz	r3, 800b84c <_svfiprintf_r+0x1a0>
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	3307      	adds	r3, #7
 800b80a:	f023 0307 	bic.w	r3, r3, #7
 800b80e:	3308      	adds	r3, #8
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b814:	444b      	add	r3, r9
 800b816:	9309      	str	r3, [sp, #36]	; 0x24
 800b818:	e76d      	b.n	800b6f6 <_svfiprintf_r+0x4a>
 800b81a:	fb05 3202 	mla	r2, r5, r2, r3
 800b81e:	2001      	movs	r0, #1
 800b820:	460f      	mov	r7, r1
 800b822:	e7a6      	b.n	800b772 <_svfiprintf_r+0xc6>
 800b824:	2300      	movs	r3, #0
 800b826:	3701      	adds	r7, #1
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	4619      	mov	r1, r3
 800b82c:	250a      	movs	r5, #10
 800b82e:	4638      	mov	r0, r7
 800b830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b834:	3a30      	subs	r2, #48	; 0x30
 800b836:	2a09      	cmp	r2, #9
 800b838:	d903      	bls.n	800b842 <_svfiprintf_r+0x196>
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d0c8      	beq.n	800b7d0 <_svfiprintf_r+0x124>
 800b83e:	9105      	str	r1, [sp, #20]
 800b840:	e7c6      	b.n	800b7d0 <_svfiprintf_r+0x124>
 800b842:	fb05 2101 	mla	r1, r5, r1, r2
 800b846:	2301      	movs	r3, #1
 800b848:	4607      	mov	r7, r0
 800b84a:	e7f0      	b.n	800b82e <_svfiprintf_r+0x182>
 800b84c:	ab03      	add	r3, sp, #12
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	4622      	mov	r2, r4
 800b852:	4b11      	ldr	r3, [pc, #68]	; (800b898 <_svfiprintf_r+0x1ec>)
 800b854:	a904      	add	r1, sp, #16
 800b856:	4640      	mov	r0, r8
 800b858:	f3af 8000 	nop.w
 800b85c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b860:	4681      	mov	r9, r0
 800b862:	d1d6      	bne.n	800b812 <_svfiprintf_r+0x166>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	065b      	lsls	r3, r3, #25
 800b868:	f53f af35 	bmi.w	800b6d6 <_svfiprintf_r+0x2a>
 800b86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b86e:	b01d      	add	sp, #116	; 0x74
 800b870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b874:	ab03      	add	r3, sp, #12
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	4622      	mov	r2, r4
 800b87a:	4b07      	ldr	r3, [pc, #28]	; (800b898 <_svfiprintf_r+0x1ec>)
 800b87c:	a904      	add	r1, sp, #16
 800b87e:	4640      	mov	r0, r8
 800b880:	f000 f882 	bl	800b988 <_printf_i>
 800b884:	e7ea      	b.n	800b85c <_svfiprintf_r+0x1b0>
 800b886:	bf00      	nop
 800b888:	0800be18 	.word	0x0800be18
 800b88c:	0800be1e 	.word	0x0800be1e
 800b890:	0800be22 	.word	0x0800be22
 800b894:	00000000 	.word	0x00000000
 800b898:	0800b5f9 	.word	0x0800b5f9

0800b89c <_printf_common>:
 800b89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a0:	4691      	mov	r9, r2
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	688a      	ldr	r2, [r1, #8]
 800b8a6:	690b      	ldr	r3, [r1, #16]
 800b8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	bfb8      	it	lt
 800b8b0:	4613      	movlt	r3, r2
 800b8b2:	f8c9 3000 	str.w	r3, [r9]
 800b8b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	460c      	mov	r4, r1
 800b8be:	b112      	cbz	r2, 800b8c6 <_printf_common+0x2a>
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	f8c9 3000 	str.w	r3, [r9]
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	0699      	lsls	r1, r3, #26
 800b8ca:	bf42      	ittt	mi
 800b8cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b8d0:	3302      	addmi	r3, #2
 800b8d2:	f8c9 3000 	strmi.w	r3, [r9]
 800b8d6:	6825      	ldr	r5, [r4, #0]
 800b8d8:	f015 0506 	ands.w	r5, r5, #6
 800b8dc:	d107      	bne.n	800b8ee <_printf_common+0x52>
 800b8de:	f104 0a19 	add.w	sl, r4, #25
 800b8e2:	68e3      	ldr	r3, [r4, #12]
 800b8e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b8e8:	1a9b      	subs	r3, r3, r2
 800b8ea:	42ab      	cmp	r3, r5
 800b8ec:	dc28      	bgt.n	800b940 <_printf_common+0xa4>
 800b8ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	3300      	adds	r3, #0
 800b8f6:	bf18      	it	ne
 800b8f8:	2301      	movne	r3, #1
 800b8fa:	0692      	lsls	r2, r2, #26
 800b8fc:	d42d      	bmi.n	800b95a <_printf_common+0xbe>
 800b8fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b902:	4639      	mov	r1, r7
 800b904:	4630      	mov	r0, r6
 800b906:	47c0      	blx	r8
 800b908:	3001      	adds	r0, #1
 800b90a:	d020      	beq.n	800b94e <_printf_common+0xb2>
 800b90c:	6823      	ldr	r3, [r4, #0]
 800b90e:	68e5      	ldr	r5, [r4, #12]
 800b910:	f8d9 2000 	ldr.w	r2, [r9]
 800b914:	f003 0306 	and.w	r3, r3, #6
 800b918:	2b04      	cmp	r3, #4
 800b91a:	bf08      	it	eq
 800b91c:	1aad      	subeq	r5, r5, r2
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	6922      	ldr	r2, [r4, #16]
 800b922:	bf0c      	ite	eq
 800b924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b928:	2500      	movne	r5, #0
 800b92a:	4293      	cmp	r3, r2
 800b92c:	bfc4      	itt	gt
 800b92e:	1a9b      	subgt	r3, r3, r2
 800b930:	18ed      	addgt	r5, r5, r3
 800b932:	f04f 0900 	mov.w	r9, #0
 800b936:	341a      	adds	r4, #26
 800b938:	454d      	cmp	r5, r9
 800b93a:	d11a      	bne.n	800b972 <_printf_common+0xd6>
 800b93c:	2000      	movs	r0, #0
 800b93e:	e008      	b.n	800b952 <_printf_common+0xb6>
 800b940:	2301      	movs	r3, #1
 800b942:	4652      	mov	r2, sl
 800b944:	4639      	mov	r1, r7
 800b946:	4630      	mov	r0, r6
 800b948:	47c0      	blx	r8
 800b94a:	3001      	adds	r0, #1
 800b94c:	d103      	bne.n	800b956 <_printf_common+0xba>
 800b94e:	f04f 30ff 	mov.w	r0, #4294967295
 800b952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b956:	3501      	adds	r5, #1
 800b958:	e7c3      	b.n	800b8e2 <_printf_common+0x46>
 800b95a:	18e1      	adds	r1, r4, r3
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	2030      	movs	r0, #48	; 0x30
 800b960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b964:	4422      	add	r2, r4
 800b966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b96a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b96e:	3302      	adds	r3, #2
 800b970:	e7c5      	b.n	800b8fe <_printf_common+0x62>
 800b972:	2301      	movs	r3, #1
 800b974:	4622      	mov	r2, r4
 800b976:	4639      	mov	r1, r7
 800b978:	4630      	mov	r0, r6
 800b97a:	47c0      	blx	r8
 800b97c:	3001      	adds	r0, #1
 800b97e:	d0e6      	beq.n	800b94e <_printf_common+0xb2>
 800b980:	f109 0901 	add.w	r9, r9, #1
 800b984:	e7d8      	b.n	800b938 <_printf_common+0x9c>
	...

0800b988 <_printf_i>:
 800b988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b98c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b990:	460c      	mov	r4, r1
 800b992:	7e09      	ldrb	r1, [r1, #24]
 800b994:	b085      	sub	sp, #20
 800b996:	296e      	cmp	r1, #110	; 0x6e
 800b998:	4617      	mov	r7, r2
 800b99a:	4606      	mov	r6, r0
 800b99c:	4698      	mov	r8, r3
 800b99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9a0:	f000 80b3 	beq.w	800bb0a <_printf_i+0x182>
 800b9a4:	d822      	bhi.n	800b9ec <_printf_i+0x64>
 800b9a6:	2963      	cmp	r1, #99	; 0x63
 800b9a8:	d036      	beq.n	800ba18 <_printf_i+0x90>
 800b9aa:	d80a      	bhi.n	800b9c2 <_printf_i+0x3a>
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	f000 80b9 	beq.w	800bb24 <_printf_i+0x19c>
 800b9b2:	2958      	cmp	r1, #88	; 0x58
 800b9b4:	f000 8083 	beq.w	800babe <_printf_i+0x136>
 800b9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b9c0:	e032      	b.n	800ba28 <_printf_i+0xa0>
 800b9c2:	2964      	cmp	r1, #100	; 0x64
 800b9c4:	d001      	beq.n	800b9ca <_printf_i+0x42>
 800b9c6:	2969      	cmp	r1, #105	; 0x69
 800b9c8:	d1f6      	bne.n	800b9b8 <_printf_i+0x30>
 800b9ca:	6820      	ldr	r0, [r4, #0]
 800b9cc:	6813      	ldr	r3, [r2, #0]
 800b9ce:	0605      	lsls	r5, r0, #24
 800b9d0:	f103 0104 	add.w	r1, r3, #4
 800b9d4:	d52a      	bpl.n	800ba2c <_printf_i+0xa4>
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da03      	bge.n	800b9e6 <_printf_i+0x5e>
 800b9de:	222d      	movs	r2, #45	; 0x2d
 800b9e0:	425b      	negs	r3, r3
 800b9e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b9e6:	486f      	ldr	r0, [pc, #444]	; (800bba4 <_printf_i+0x21c>)
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	e039      	b.n	800ba60 <_printf_i+0xd8>
 800b9ec:	2973      	cmp	r1, #115	; 0x73
 800b9ee:	f000 809d 	beq.w	800bb2c <_printf_i+0x1a4>
 800b9f2:	d808      	bhi.n	800ba06 <_printf_i+0x7e>
 800b9f4:	296f      	cmp	r1, #111	; 0x6f
 800b9f6:	d020      	beq.n	800ba3a <_printf_i+0xb2>
 800b9f8:	2970      	cmp	r1, #112	; 0x70
 800b9fa:	d1dd      	bne.n	800b9b8 <_printf_i+0x30>
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	f043 0320 	orr.w	r3, r3, #32
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	e003      	b.n	800ba0e <_printf_i+0x86>
 800ba06:	2975      	cmp	r1, #117	; 0x75
 800ba08:	d017      	beq.n	800ba3a <_printf_i+0xb2>
 800ba0a:	2978      	cmp	r1, #120	; 0x78
 800ba0c:	d1d4      	bne.n	800b9b8 <_printf_i+0x30>
 800ba0e:	2378      	movs	r3, #120	; 0x78
 800ba10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba14:	4864      	ldr	r0, [pc, #400]	; (800bba8 <_printf_i+0x220>)
 800ba16:	e055      	b.n	800bac4 <_printf_i+0x13c>
 800ba18:	6813      	ldr	r3, [r2, #0]
 800ba1a:	1d19      	adds	r1, r3, #4
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6011      	str	r1, [r2, #0]
 800ba20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e08c      	b.n	800bb46 <_printf_i+0x1be>
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6011      	str	r1, [r2, #0]
 800ba30:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba34:	bf18      	it	ne
 800ba36:	b21b      	sxthne	r3, r3
 800ba38:	e7cf      	b.n	800b9da <_printf_i+0x52>
 800ba3a:	6813      	ldr	r3, [r2, #0]
 800ba3c:	6825      	ldr	r5, [r4, #0]
 800ba3e:	1d18      	adds	r0, r3, #4
 800ba40:	6010      	str	r0, [r2, #0]
 800ba42:	0628      	lsls	r0, r5, #24
 800ba44:	d501      	bpl.n	800ba4a <_printf_i+0xc2>
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	e002      	b.n	800ba50 <_printf_i+0xc8>
 800ba4a:	0668      	lsls	r0, r5, #25
 800ba4c:	d5fb      	bpl.n	800ba46 <_printf_i+0xbe>
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	4854      	ldr	r0, [pc, #336]	; (800bba4 <_printf_i+0x21c>)
 800ba52:	296f      	cmp	r1, #111	; 0x6f
 800ba54:	bf14      	ite	ne
 800ba56:	220a      	movne	r2, #10
 800ba58:	2208      	moveq	r2, #8
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba60:	6865      	ldr	r5, [r4, #4]
 800ba62:	60a5      	str	r5, [r4, #8]
 800ba64:	2d00      	cmp	r5, #0
 800ba66:	f2c0 8095 	blt.w	800bb94 <_printf_i+0x20c>
 800ba6a:	6821      	ldr	r1, [r4, #0]
 800ba6c:	f021 0104 	bic.w	r1, r1, #4
 800ba70:	6021      	str	r1, [r4, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d13d      	bne.n	800baf2 <_printf_i+0x16a>
 800ba76:	2d00      	cmp	r5, #0
 800ba78:	f040 808e 	bne.w	800bb98 <_printf_i+0x210>
 800ba7c:	4665      	mov	r5, ip
 800ba7e:	2a08      	cmp	r2, #8
 800ba80:	d10b      	bne.n	800ba9a <_printf_i+0x112>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	07db      	lsls	r3, r3, #31
 800ba86:	d508      	bpl.n	800ba9a <_printf_i+0x112>
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	6862      	ldr	r2, [r4, #4]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	bfde      	ittt	le
 800ba90:	2330      	movle	r3, #48	; 0x30
 800ba92:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba96:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba9a:	ebac 0305 	sub.w	r3, ip, r5
 800ba9e:	6123      	str	r3, [r4, #16]
 800baa0:	f8cd 8000 	str.w	r8, [sp]
 800baa4:	463b      	mov	r3, r7
 800baa6:	aa03      	add	r2, sp, #12
 800baa8:	4621      	mov	r1, r4
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff fef6 	bl	800b89c <_printf_common>
 800bab0:	3001      	adds	r0, #1
 800bab2:	d14d      	bne.n	800bb50 <_printf_i+0x1c8>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	b005      	add	sp, #20
 800baba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800babe:	4839      	ldr	r0, [pc, #228]	; (800bba4 <_printf_i+0x21c>)
 800bac0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bac4:	6813      	ldr	r3, [r2, #0]
 800bac6:	6821      	ldr	r1, [r4, #0]
 800bac8:	1d1d      	adds	r5, r3, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6015      	str	r5, [r2, #0]
 800bace:	060a      	lsls	r2, r1, #24
 800bad0:	d50b      	bpl.n	800baea <_printf_i+0x162>
 800bad2:	07ca      	lsls	r2, r1, #31
 800bad4:	bf44      	itt	mi
 800bad6:	f041 0120 	orrmi.w	r1, r1, #32
 800bada:	6021      	strmi	r1, [r4, #0]
 800badc:	b91b      	cbnz	r3, 800bae6 <_printf_i+0x15e>
 800bade:	6822      	ldr	r2, [r4, #0]
 800bae0:	f022 0220 	bic.w	r2, r2, #32
 800bae4:	6022      	str	r2, [r4, #0]
 800bae6:	2210      	movs	r2, #16
 800bae8:	e7b7      	b.n	800ba5a <_printf_i+0xd2>
 800baea:	064d      	lsls	r5, r1, #25
 800baec:	bf48      	it	mi
 800baee:	b29b      	uxthmi	r3, r3
 800baf0:	e7ef      	b.n	800bad2 <_printf_i+0x14a>
 800baf2:	4665      	mov	r5, ip
 800baf4:	fbb3 f1f2 	udiv	r1, r3, r2
 800baf8:	fb02 3311 	mls	r3, r2, r1, r3
 800bafc:	5cc3      	ldrb	r3, [r0, r3]
 800bafe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bb02:	460b      	mov	r3, r1
 800bb04:	2900      	cmp	r1, #0
 800bb06:	d1f5      	bne.n	800baf4 <_printf_i+0x16c>
 800bb08:	e7b9      	b.n	800ba7e <_printf_i+0xf6>
 800bb0a:	6813      	ldr	r3, [r2, #0]
 800bb0c:	6825      	ldr	r5, [r4, #0]
 800bb0e:	6961      	ldr	r1, [r4, #20]
 800bb10:	1d18      	adds	r0, r3, #4
 800bb12:	6010      	str	r0, [r2, #0]
 800bb14:	0628      	lsls	r0, r5, #24
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	d501      	bpl.n	800bb1e <_printf_i+0x196>
 800bb1a:	6019      	str	r1, [r3, #0]
 800bb1c:	e002      	b.n	800bb24 <_printf_i+0x19c>
 800bb1e:	066a      	lsls	r2, r5, #25
 800bb20:	d5fb      	bpl.n	800bb1a <_printf_i+0x192>
 800bb22:	8019      	strh	r1, [r3, #0]
 800bb24:	2300      	movs	r3, #0
 800bb26:	6123      	str	r3, [r4, #16]
 800bb28:	4665      	mov	r5, ip
 800bb2a:	e7b9      	b.n	800baa0 <_printf_i+0x118>
 800bb2c:	6813      	ldr	r3, [r2, #0]
 800bb2e:	1d19      	adds	r1, r3, #4
 800bb30:	6011      	str	r1, [r2, #0]
 800bb32:	681d      	ldr	r5, [r3, #0]
 800bb34:	6862      	ldr	r2, [r4, #4]
 800bb36:	2100      	movs	r1, #0
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f7f4 fb49 	bl	80001d0 <memchr>
 800bb3e:	b108      	cbz	r0, 800bb44 <_printf_i+0x1bc>
 800bb40:	1b40      	subs	r0, r0, r5
 800bb42:	6060      	str	r0, [r4, #4]
 800bb44:	6863      	ldr	r3, [r4, #4]
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb4e:	e7a7      	b.n	800baa0 <_printf_i+0x118>
 800bb50:	6923      	ldr	r3, [r4, #16]
 800bb52:	462a      	mov	r2, r5
 800bb54:	4639      	mov	r1, r7
 800bb56:	4630      	mov	r0, r6
 800bb58:	47c0      	blx	r8
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d0aa      	beq.n	800bab4 <_printf_i+0x12c>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	079b      	lsls	r3, r3, #30
 800bb62:	d413      	bmi.n	800bb8c <_printf_i+0x204>
 800bb64:	68e0      	ldr	r0, [r4, #12]
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	4298      	cmp	r0, r3
 800bb6a:	bfb8      	it	lt
 800bb6c:	4618      	movlt	r0, r3
 800bb6e:	e7a3      	b.n	800bab8 <_printf_i+0x130>
 800bb70:	2301      	movs	r3, #1
 800bb72:	464a      	mov	r2, r9
 800bb74:	4639      	mov	r1, r7
 800bb76:	4630      	mov	r0, r6
 800bb78:	47c0      	blx	r8
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	d09a      	beq.n	800bab4 <_printf_i+0x12c>
 800bb7e:	3501      	adds	r5, #1
 800bb80:	68e3      	ldr	r3, [r4, #12]
 800bb82:	9a03      	ldr	r2, [sp, #12]
 800bb84:	1a9b      	subs	r3, r3, r2
 800bb86:	42ab      	cmp	r3, r5
 800bb88:	dcf2      	bgt.n	800bb70 <_printf_i+0x1e8>
 800bb8a:	e7eb      	b.n	800bb64 <_printf_i+0x1dc>
 800bb8c:	2500      	movs	r5, #0
 800bb8e:	f104 0919 	add.w	r9, r4, #25
 800bb92:	e7f5      	b.n	800bb80 <_printf_i+0x1f8>
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1ac      	bne.n	800baf2 <_printf_i+0x16a>
 800bb98:	7803      	ldrb	r3, [r0, #0]
 800bb9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bba2:	e76c      	b.n	800ba7e <_printf_i+0xf6>
 800bba4:	0800be29 	.word	0x0800be29
 800bba8:	0800be3a 	.word	0x0800be3a

0800bbac <memmove>:
 800bbac:	4288      	cmp	r0, r1
 800bbae:	b510      	push	{r4, lr}
 800bbb0:	eb01 0302 	add.w	r3, r1, r2
 800bbb4:	d807      	bhi.n	800bbc6 <memmove+0x1a>
 800bbb6:	1e42      	subs	r2, r0, #1
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	d00a      	beq.n	800bbd2 <memmove+0x26>
 800bbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bbc4:	e7f8      	b.n	800bbb8 <memmove+0xc>
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	d9f5      	bls.n	800bbb6 <memmove+0xa>
 800bbca:	1881      	adds	r1, r0, r2
 800bbcc:	1ad2      	subs	r2, r2, r3
 800bbce:	42d3      	cmn	r3, r2
 800bbd0:	d100      	bne.n	800bbd4 <memmove+0x28>
 800bbd2:	bd10      	pop	{r4, pc}
 800bbd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bbdc:	e7f7      	b.n	800bbce <memmove+0x22>

0800bbde <_realloc_r>:
 800bbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe0:	4607      	mov	r7, r0
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	460e      	mov	r6, r1
 800bbe6:	b921      	cbnz	r1, 800bbf2 <_realloc_r+0x14>
 800bbe8:	4611      	mov	r1, r2
 800bbea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bbee:	f7ff bc77 	b.w	800b4e0 <_malloc_r>
 800bbf2:	b922      	cbnz	r2, 800bbfe <_realloc_r+0x20>
 800bbf4:	f7ff fc26 	bl	800b444 <_free_r>
 800bbf8:	4625      	mov	r5, r4
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbfe:	f000 f814 	bl	800bc2a <_malloc_usable_size_r>
 800bc02:	42a0      	cmp	r0, r4
 800bc04:	d20f      	bcs.n	800bc26 <_realloc_r+0x48>
 800bc06:	4621      	mov	r1, r4
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff fc69 	bl	800b4e0 <_malloc_r>
 800bc0e:	4605      	mov	r5, r0
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d0f2      	beq.n	800bbfa <_realloc_r+0x1c>
 800bc14:	4631      	mov	r1, r6
 800bc16:	4622      	mov	r2, r4
 800bc18:	f7ff fc00 	bl	800b41c <memcpy>
 800bc1c:	4631      	mov	r1, r6
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f7ff fc10 	bl	800b444 <_free_r>
 800bc24:	e7e9      	b.n	800bbfa <_realloc_r+0x1c>
 800bc26:	4635      	mov	r5, r6
 800bc28:	e7e7      	b.n	800bbfa <_realloc_r+0x1c>

0800bc2a <_malloc_usable_size_r>:
 800bc2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2e:	1f18      	subs	r0, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bfbc      	itt	lt
 800bc34:	580b      	ldrlt	r3, [r1, r0]
 800bc36:	18c0      	addlt	r0, r0, r3
 800bc38:	4770      	bx	lr
	...

0800bc3c <_init>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	bf00      	nop
 800bc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc42:	bc08      	pop	{r3}
 800bc44:	469e      	mov	lr, r3
 800bc46:	4770      	bx	lr

0800bc48 <_fini>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	bf00      	nop
 800bc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4e:	bc08      	pop	{r3}
 800bc50:	469e      	mov	lr, r3
 800bc52:	4770      	bx	lr
