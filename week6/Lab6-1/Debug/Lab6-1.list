
Lab6-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a158  0800a158  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a160  0800a160  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a164  0800a164  0001a164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000476c  20000094  0800a1fc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004800  0800a1fc  00024800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209e7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004715  00000000  00000000  00040aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c8  00000000  00000000  000451c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00046888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000263fe  00000000  00000000  00047d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016396  00000000  00000000  0006e176  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2bb3  00000000  00000000  0008450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001570bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f68  00000000  00000000  0015713c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a00c 	.word	0x0800a00c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800a00c 	.word	0x0800a00c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f94d 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	200f      	movs	r0, #15
 8000500:	f000 f808 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f008 ff96 	bl	8009434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f965 	bl	8000802 <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f92d 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	20004064 	.word	0x20004064

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20004064 	.word	0x20004064

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff ffee 	bl	800059c <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_Delay+0x40>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005da:	bf00      	nop
 80005dc:	f7ff ffde 	bl	800059c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000004 	.word	0x20000004

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff29 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff3e 	bl	8000640 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff8e 	bl	80006ec <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff31 	bl	800065c <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa2 	bl	8000754 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e16b      	b.n	8000b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000838:	2201      	movs	r2, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 815a 	bne.w	8000b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x4a>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	69b9      	ldr	r1, [r7, #24]
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0203 	and.w	r2, r3, #3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00b      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	2b11      	cmp	r3, #17
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d130      	bne.n	8000964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80b4 	beq.w	8000b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b5f      	ldr	r3, [pc, #380]	; (8000b24 <HAL_GPIO_Init+0x308>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <HAL_GPIO_Init+0x308>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <HAL_GPIO_Init+0x308>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009be:	4a5a      	ldr	r2, [pc, #360]	; (8000b28 <HAL_GPIO_Init+0x30c>)
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x310>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d02b      	beq.n	8000a42 <HAL_GPIO_Init+0x226>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x314>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d025      	beq.n	8000a3e <HAL_GPIO_Init+0x222>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x318>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01f      	beq.n	8000a3a <HAL_GPIO_Init+0x21e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x31c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x21a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x320>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x216>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_GPIO_Init+0x324>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x212>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <HAL_GPIO_Init+0x328>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x20e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <HAL_GPIO_Init+0x32c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x20a>
 8000a22:	2307      	movs	r3, #7
 8000a24:	e00e      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a26:	2308      	movs	r3, #8
 8000a28:	e00c      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	e00a      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a2e:	2305      	movs	r3, #5
 8000a30:	e008      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a32:	2304      	movs	r3, #4
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a36:	2303      	movs	r3, #3
 8000a38:	e004      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a42:	2300      	movs	r3, #0
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	f002 0203 	and.w	r2, r2, #3
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a54:	4934      	ldr	r1, [pc, #208]	; (8000b28 <HAL_GPIO_Init+0x30c>)
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab0:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	f67f ae90 	bls.w	8000838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3724      	adds	r7, #36	; 0x24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40013800 	.word	0x40013800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40021400 	.word	0x40021400
 8000b44:	40021800 	.word	0x40021800
 8000b48:	40021c00 	.word	0x40021c00
 8000b4c:	40013c00 	.word	0x40013c00

08000b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b60:	787b      	ldrb	r3, [r7, #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b6c:	e003      	b.n	8000b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	619a      	str	r2, [r3, #24]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	401a      	ands	r2, r3
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d104      	bne.n	8000ba6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	041a      	lsls	r2, r3, #16
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	b08f      	sub	sp, #60	; 0x3c
 8000bbc:	af0a      	add	r7, sp, #40	; 0x28
 8000bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e054      	b.n	8000c74 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f008 fe31 	bl	800984c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2203      	movs	r2, #3
 8000bee:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f835 	bl	8003c78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	687e      	ldr	r6, [r7, #4]
 8000c16:	466d      	mov	r5, sp
 8000c18:	f106 0410 	add.w	r4, r6, #16
 8000c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c2c:	1d33      	adds	r3, r6, #4
 8000c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f002 ffaf 	bl	8003b94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f82c 	bl	8003c9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	687e      	ldr	r6, [r7, #4]
 8000c4a:	466d      	mov	r5, sp
 8000c4c:	f106 0410 	add.w	r4, r6, #16
 8000c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c60:	1d33      	adds	r3, r6, #4
 8000c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f003 f93f 	bl	8003ee8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c7c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	70bb      	strb	r3, [r7, #2]
 8000c92:	4613      	mov	r3, r2
 8000c94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <HAL_HCD_HC_Init+0x28>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e07f      	b.n	8000da4 <HAL_HCD_HC_Init+0x128>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000cac:	78fa      	ldrb	r2, [r7, #3]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	333d      	adds	r3, #61	; 0x3d
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3338      	adds	r3, #56	; 0x38
 8000cd0:	787a      	ldrb	r2, [r7, #1]
 8000cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3340      	adds	r3, #64	; 0x40
 8000ce4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ce6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3339      	adds	r3, #57	; 0x39
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cfc:	78fa      	ldrb	r2, [r7, #3]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	440b      	add	r3, r1
 8000d0a:	333f      	adds	r3, #63	; 0x3f
 8000d0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d12:	78fa      	ldrb	r2, [r7, #3]
 8000d14:	78bb      	ldrb	r3, [r7, #2]
 8000d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1a:	b2d8      	uxtb	r0, r3
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	440b      	add	r3, r1
 8000d28:	333a      	adds	r3, #58	; 0x3a
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da0a      	bge.n	8000d4c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d36:	78fa      	ldrb	r2, [r7, #3]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	333b      	adds	r3, #59	; 0x3b
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e009      	b.n	8000d60 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	333b      	adds	r3, #59	; 0x3b
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	333c      	adds	r3, #60	; 0x3c
 8000d70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d74:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	787c      	ldrb	r4, [r7, #1]
 8000d7c:	78ba      	ldrb	r2, [r7, #2]
 8000d7e:	78f9      	ldrb	r1, [r7, #3]
 8000d80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	4623      	mov	r3, r4
 8000d92:	f003 fa2b 	bl	80041ec <USB_HC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}

08000dac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <HAL_HCD_HC_Halt+0x1e>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e00f      	b.n	8000dea <HAL_HCD_HC_Halt+0x3e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fc65 	bl	80046aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	70fb      	strb	r3, [r7, #3]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70bb      	strb	r3, [r7, #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	333b      	adds	r3, #59	; 0x3b
 8000e1e:	78ba      	ldrb	r2, [r7, #2]
 8000e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	333f      	adds	r3, #63	; 0x3f
 8000e32:	787a      	ldrb	r2, [r7, #1]
 8000e34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e36:	7c3b      	ldrb	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10a      	bne.n	8000e52 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e3c:	78fa      	ldrb	r2, [r7, #3]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	3342      	adds	r3, #66	; 0x42
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e009      	b.n	8000e66 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	3342      	adds	r3, #66	; 0x42
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e66:	787b      	ldrb	r3, [r7, #1]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	f200 80d6 	bhi.w	800101a <HAL_HCD_HC_SubmitRequest+0x226>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08001005 	.word	0x08001005
 8000e7c:	08000ef1 	.word	0x08000ef1
 8000e80:	08000f7b 	.word	0x08000f7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e84:	7c3b      	ldrb	r3, [r7, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	f040 80c9 	bne.w	800101e <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e8c:	78bb      	ldrb	r3, [r7, #2]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 80c5 	bne.w	800101e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e94:	8b3b      	ldrh	r3, [r7, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3351      	adds	r3, #81	; 0x51
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000eae:	78fa      	ldrb	r2, [r7, #3]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	3351      	adds	r3, #81	; 0x51
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10a      	bne.n	8000eda <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3342      	adds	r3, #66	; 0x42
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000ed8:	e0a1      	b.n	800101e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3342      	adds	r3, #66	; 0x42
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
      break;
 8000eee:	e096      	b.n	800101e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000ef0:	78bb      	ldrb	r3, [r7, #2]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d120      	bne.n	8000f38 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	3351      	adds	r3, #81	; 0x51
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f0c:	78fa      	ldrb	r2, [r7, #3]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3342      	adds	r3, #66	; 0x42
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f20:	e07e      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3342      	adds	r3, #66	; 0x42
 8000f32:	2202      	movs	r2, #2
 8000f34:	701a      	strb	r2, [r3, #0]
      break;
 8000f36:	e073      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f38:	78fa      	ldrb	r2, [r7, #3]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3350      	adds	r3, #80	; 0x50
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10a      	bne.n	8000f64 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3342      	adds	r3, #66	; 0x42
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
      break;
 8000f62:	e05d      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f64:	78fa      	ldrb	r2, [r7, #3]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3342      	adds	r3, #66	; 0x42
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
      break;
 8000f78:	e052      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f7a:	78bb      	ldrb	r3, [r7, #2]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d120      	bne.n	8000fc2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f80:	78fa      	ldrb	r2, [r7, #3]
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3351      	adds	r3, #81	; 0x51
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10a      	bne.n	8000fac <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3342      	adds	r3, #66	; 0x42
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000faa:	e039      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3342      	adds	r3, #66	; 0x42
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
      break;
 8000fc0:	e02e      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fc2:	78fa      	ldrb	r2, [r7, #3]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3350      	adds	r3, #80	; 0x50
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10a      	bne.n	8000fee <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3342      	adds	r3, #66	; 0x42
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
      break;
 8000fec:	e018      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3342      	adds	r3, #66	; 0x42
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
      break;
 8001002:	e00d      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	3342      	adds	r3, #66	; 0x42
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
      break;
 8001018:	e002      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800101a:	bf00      	nop
 800101c:	e000      	b.n	8001020 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800101e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3344      	adds	r3, #68	; 0x44
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	8b39      	ldrh	r1, [r7, #24]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4403      	add	r3, r0
 8001044:	3348      	adds	r3, #72	; 0x48
 8001046:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	335c      	adds	r3, #92	; 0x5c
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	334c      	adds	r3, #76	; 0x4c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	3339      	adds	r3, #57	; 0x39
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	335d      	adds	r3, #93	; 0x5d
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	3338      	adds	r3, #56	; 0x38
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	18d1      	adds	r1, r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	f003 f9a4 	bl	8004400 <USB_HC_StartXfer>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop

080010c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fec1 	bl	8003e62 <USB_GetMode>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f040 80f1 	bne.w	80012ca <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fea5 	bl	8003e3c <USB_ReadInterrupts>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80e7 	beq.w	80012c8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fe9c 	bl	8003e3c <USB_ReadInterrupts>
 8001104:	4603      	mov	r3, r0
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800110e:	d104      	bne.n	800111a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fe8c 	bl	8003e3c <USB_ReadInterrupts>
 8001124:	4603      	mov	r3, r0
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800112e:	d104      	bne.n	800113a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001138:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fe7c 	bl	8003e3c <USB_ReadInterrupts>
 8001144:	4603      	mov	r3, r0
 8001146:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800114a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800114e:	d104      	bne.n	800115a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001158:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fe6c 	bl	8003e3c <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d103      	bne.n	8001176 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fe5e 	bl	8003e3c <USB_ReadInterrupts>
 8001180:	4603      	mov	r3, r0
 8001182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800118a:	d117      	bne.n	80011bc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800119a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800119e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f008 fbd1 	bl	8009948 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 ff57 	bl	8004060 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fe3b 	bl	8003e3c <USB_ReadInterrupts>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d102      	bne.n	80011d8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 f8c8 	bl	8002368 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fe2d 	bl	8003e3c <USB_ReadInterrupts>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d106      	bne.n	80011fa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f008 fb8f 	bl	8009910 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2208      	movs	r2, #8
 80011f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fe1c 	bl	8003e3c <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800120e:	d138      	bne.n	8001282 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fa37 	bl	8004688 <USB_HC_ReadInterrupt>
 800121a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e025      	b.n	800126e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d018      	beq.n	8001268 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	015a      	lsls	r2, r3, #5
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800124c:	d106      	bne.n	800125c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f8cf 	bl	80013f8 <HCD_HC_IN_IRQHandler>
 800125a:	e005      	b.n	8001268 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fc5f 	bl	8001b26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3d4      	bcc.n	8001222 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fdd8 	bl	8003e3c <USB_ReadInterrupts>
 800128c:	4603      	mov	r3, r0
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b10      	cmp	r3, #16
 8001294:	d101      	bne.n	800129a <HAL_HCD_IRQHandler+0x1d6>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_HCD_IRQHandler+0x1d8>
 800129a:	2300      	movs	r3, #0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d014      	beq.n	80012ca <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0210 	bic.w	r2, r2, #16
 80012ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 ffad 	bl	8002210 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0210 	orr.w	r2, r2, #16
 80012c4:	619a      	str	r2, [r3, #24]
 80012c6:	e000      	b.n	80012ca <HAL_HCD_IRQHandler+0x206>
      return;
 80012c8:	bf00      	nop
    }
  }
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_HCD_Start+0x16>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e013      	b.n	800130e <HAL_HCD_Start+0x3e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fcaf 	bl	8003c56 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 ff12 	bl	8004128 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <HAL_HCD_Stop+0x16>
 8001328:	2302      	movs	r3, #2
 800132a:	e00d      	b.n	8001348 <HAL_HCD_Stop+0x32>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f003 faf1 	bl	8004920 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 feb9 	bl	80040d4 <USB_ResetPort>
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001378:	78fa      	ldrb	r2, [r7, #3]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	335c      	adds	r3, #92	; 0x5c
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	334c      	adds	r3, #76	; 0x4c
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fefb 	bl	80041c8 <USB_GetCurrentFrame>
 80013d2:	4603      	mov	r3, r0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fed6 	bl	800419a <USB_GetHostSpeed>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	015a      	lsls	r2, r3, #5
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4413      	add	r3, r2
 800141a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b04      	cmp	r3, #4
 8001426:	d119      	bne.n	800145c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4413      	add	r3, r2
 8001430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001434:	461a      	mov	r2, r3
 8001436:	2304      	movs	r3, #4
 8001438:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	0151      	lsls	r1, r2, #5
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	440a      	add	r2, r1
 8001450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	60d3      	str	r3, [r2, #12]
 800145a:	e095      	b.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	015a      	lsls	r2, r3, #5
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4413      	add	r3, r2
 8001464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b20      	cmp	r3, #32
 8001470:	d109      	bne.n	8001486 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4413      	add	r3, r2
 800147a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800147e:	461a      	mov	r2, r3
 8001480:	2320      	movs	r3, #32
 8001482:	6093      	str	r3, [r2, #8]
 8001484:	e080      	b.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b08      	cmp	r3, #8
 800149a:	d134      	bne.n	8001506 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	0151      	lsls	r1, r2, #5
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	440a      	add	r2, r1
 80014b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	335d      	adds	r3, #93	; 0x5d
 80014cc:	2205      	movs	r2, #5
 80014ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014dc:	461a      	mov	r2, r3
 80014de:	2310      	movs	r3, #16
 80014e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 f8d3 	bl	80046aa <USB_HC_Halt>
 8001504:	e040      	b.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d134      	bne.n	8001588 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4413      	add	r3, r2
 8001526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	0151      	lsls	r1, r2, #5
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	440a      	add	r2, r1
 8001534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f003 f8ae 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155a:	461a      	mov	r2, r3
 800155c:	2310      	movs	r3, #16
 800155e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	335d      	adds	r3, #93	; 0x5d
 8001570:	2208      	movs	r2, #8
 8001572:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001580:	461a      	mov	r2, r3
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4413      	add	r3, r2
 8001590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159e:	d122      	bne.n	80015e6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	0151      	lsls	r1, r2, #5
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	440a      	add	r2, r1
 80015b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 f86d 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015dc:	461a      	mov	r2, r3
 80015de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015e4:	e29b      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	f040 80c1 	bne.w	8001780 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01b      	beq.n	800163e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0159      	lsls	r1, r3, #5
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	440b      	add	r3, r1
 8001620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800162a:	1ad1      	subs	r1, r2, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4403      	add	r3, r0
 800163a:	334c      	adds	r3, #76	; 0x4c
 800163c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	335d      	adds	r3, #93	; 0x5d
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3358      	adds	r3, #88	; 0x58
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4413      	add	r3, r2
 800166e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001672:	461a      	mov	r2, r3
 8001674:	2301      	movs	r3, #1
 8001676:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	333f      	adds	r3, #63	; 0x3f
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	333f      	adds	r3, #63	; 0x3f
 800169e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d121      	bne.n	80016e8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	0151      	lsls	r1, r2, #5
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	440a      	add	r2, r1
 80016ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 ffeb 	bl	80046aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e0:	461a      	mov	r2, r3
 80016e2:	2310      	movs	r3, #16
 80016e4:	6093      	str	r3, [r2, #8]
 80016e6:	e034      	b.n	8001752 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	333f      	adds	r3, #63	; 0x3f
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d129      	bne.n	8001752 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4413      	add	r3, r2
 8001706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	0151      	lsls	r1, r2, #5
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	440a      	add	r2, r1
 8001714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800171c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	335c      	adds	r3, #92	; 0x5c
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	b2d8      	uxtb	r0, r3
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	335c      	adds	r3, #92	; 0x5c
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4601      	mov	r1, r0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f008 f909 	bl	8009964 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3350      	adds	r3, #80	; 0x50
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2d8      	uxtb	r0, r3
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3350      	adds	r3, #80	; 0x50
 800177a:	4602      	mov	r2, r0
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	e1ce      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 80f1 	bne.w	800197a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	0151      	lsls	r1, r2, #5
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	440a      	add	r2, r1
 80017ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	335d      	adds	r3, #93	; 0x5d
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10a      	bne.n	80017e4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	335c      	adds	r3, #92	; 0x5c
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e0b0      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	335d      	adds	r3, #93	; 0x5d
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10a      	bne.n	8001810 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	335c      	adds	r3, #92	; 0x5c
 800180a:	2205      	movs	r2, #5
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e09a      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	335d      	adds	r3, #93	; 0x5d
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b06      	cmp	r3, #6
 8001824:	d00a      	beq.n	800183c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	335d      	adds	r3, #93	; 0x5d
 8001836:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001838:	2b08      	cmp	r3, #8
 800183a:	d156      	bne.n	80018ea <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3358      	adds	r3, #88	; 0x58
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4403      	add	r3, r0
 800185e:	3358      	adds	r3, #88	; 0x58
 8001860:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3358      	adds	r3, #88	; 0x58
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d914      	bls.n	80018a2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3358      	adds	r3, #88	; 0x58
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	335c      	adds	r3, #92	; 0x5c
 800189c:	2204      	movs	r2, #4
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e009      	b.n	80018b6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	335c      	adds	r3, #92	; 0x5c
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02d      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	335d      	adds	r3, #93	; 0x5d
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d122      	bne.n	8001946 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	335c      	adds	r3, #92	; 0x5c
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800192a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001932:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4413      	add	r3, r2
 800194e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001952:	461a      	mov	r2, r3
 8001954:	2302      	movs	r3, #2
 8001956:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	335c      	adds	r3, #92	; 0x5c
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4601      	mov	r1, r0
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f007 fff6 	bl	8009964 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001978:	e0d1      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b80      	cmp	r3, #128	; 0x80
 800198e:	d13e      	bne.n	8001a0e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	0151      	lsls	r1, r2, #5
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	440a      	add	r2, r1
 80019a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3358      	adds	r3, #88	; 0x58
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1c59      	adds	r1, r3, #1
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4403      	add	r3, r0
 80019d2:	3358      	adds	r3, #88	; 0x58
 80019d4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	335d      	adds	r3, #93	; 0x5d
 80019e6:	2206      	movs	r2, #6
 80019e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 fe58 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	461a      	mov	r2, r3
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	6093      	str	r3, [r2, #8]
}
 8001a0c:	e087      	b.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	d17c      	bne.n	8001b1e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	333f      	adds	r3, #63	; 0x3f
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d122      	bne.n	8001a80 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3358      	adds	r3, #88	; 0x58
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	0151      	lsls	r1, r2, #5
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	440a      	add	r2, r1
 8001a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fe16 	bl	80046aa <USB_HC_Halt>
 8001a7e:	e045      	b.n	8001b0c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	333f      	adds	r3, #63	; 0x3f
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00a      	beq.n	8001aac <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	333f      	adds	r3, #63	; 0x3f
 8001aa6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d12f      	bne.n	8001b0c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3358      	adds	r3, #88	; 0x58
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d121      	bne.n	8001b0c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	335d      	adds	r3, #93	; 0x5d
 8001ad8:	2203      	movs	r2, #3
 8001ada:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	0151      	lsls	r1, r2, #5
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	440a      	add	r2, r1
 8001af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fdcf 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	6093      	str	r3, [r2, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d119      	bne.n	8001b8a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	461a      	mov	r2, r3
 8001b64:	2304      	movs	r3, #4
 8001b66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	0151      	lsls	r1, r2, #5
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	440a      	add	r2, r1
 8001b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b88:	e33e      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d141      	bne.n	8001c24 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bac:	461a      	mov	r2, r3
 8001bae:	2320      	movs	r3, #32
 8001bb0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	333d      	adds	r3, #61	; 0x3d
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 831f 	bne.w	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	333d      	adds	r3, #61	; 0x3d
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	335c      	adds	r3, #92	; 0x5c
 8001bee:	2202      	movs	r2, #2
 8001bf0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	0151      	lsls	r1, r2, #5
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	440a      	add	r2, r1
 8001c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fd44 	bl	80046aa <USB_HC_Halt>
}
 8001c22:	e2f1      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d13f      	bne.n	8001cba <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	335d      	adds	r3, #93	; 0x5d
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	333d      	adds	r3, #61	; 0x3d
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3358      	adds	r3, #88	; 0x58
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	0151      	lsls	r1, r2, #5
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	440a      	add	r2, r1
 8001c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fd02 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	6093      	str	r3, [r2, #8]
}
 8001cb8:	e2a6      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd0:	d122      	bne.n	8001d18 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	0151      	lsls	r1, r2, #5
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fcd4 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d14:	6093      	str	r3, [r2, #8]
}
 8001d16:	e277      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d135      	bne.n	8001d9a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3358      	adds	r3, #88	; 0x58
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	0151      	lsls	r1, r2, #5
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	440a      	add	r2, r1
 8001d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fc9c 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2301      	movs	r3, #1
 8001d82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	335d      	adds	r3, #93	; 0x5d
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
}
 8001d98:	e236      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d12b      	bne.n	8001e08 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	0151      	lsls	r1, r2, #5
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	440a      	add	r2, r1
 8001dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 fc5c 	bl	80046aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	335d      	adds	r3, #93	; 0x5d
 8001e02:	2205      	movs	r2, #5
 8001e04:	701a      	strb	r2, [r3, #0]
}
 8001e06:	e1ff      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d155      	bne.n	8001eca <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3358      	adds	r3, #88	; 0x58
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	335d      	adds	r3, #93	; 0x5d
 8001e42:	2203      	movs	r2, #3
 8001e44:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	333d      	adds	r3, #61	; 0x3d
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d114      	bne.n	8001e86 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	333c      	adds	r3, #60	; 0x3c
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	333d      	adds	r3, #61	; 0x3d
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	0151      	lsls	r1, r2, #5
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	440a      	add	r2, r1
 8001e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fbfa 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	6093      	str	r3, [r2, #8]
}
 8001ec8:	e19e      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d12b      	bne.n	8001f38 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	0151      	lsls	r1, r2, #5
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fbcd 	bl	80046aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	335d      	adds	r3, #93	; 0x5d
 8001f20:	2206      	movs	r2, #6
 8001f22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	461a      	mov	r2, r3
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	6093      	str	r3, [r2, #8]
}
 8001f36:	e167      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d135      	bne.n	8001fbc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	0151      	lsls	r1, r2, #5
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	440a      	add	r2, r1
 8001f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fb95 	bl	80046aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2310      	movs	r3, #16
 8001f90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	335d      	adds	r3, #93	; 0x5d
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	701a      	strb	r2, [r3, #0]
}
 8001fba:	e125      	b.n	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	f040 811a 	bne.w	8002208 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f023 0302 	bic.w	r3, r3, #2
 8001ff2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	335d      	adds	r3, #93	; 0x5d
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d137      	bne.n	800207a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	335c      	adds	r3, #92	; 0x5c
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	333f      	adds	r3, #63	; 0x3f
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d00b      	beq.n	800204c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	333f      	adds	r3, #63	; 0x3f
 8002044:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002046:	2b03      	cmp	r3, #3
 8002048:	f040 80c5 	bne.w	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3351      	adds	r3, #81	; 0x51
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3351      	adds	r3, #81	; 0x51
 8002074:	4602      	mov	r2, r0
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e0ad      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	335d      	adds	r3, #93	; 0x5d
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d10a      	bne.n	80020a6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	335c      	adds	r3, #92	; 0x5c
 80020a0:	2202      	movs	r2, #2
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	e097      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	335d      	adds	r3, #93	; 0x5d
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d10a      	bne.n	80020d2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	335c      	adds	r3, #92	; 0x5c
 80020cc:	2202      	movs	r2, #2
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e081      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	335d      	adds	r3, #93	; 0x5d
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10a      	bne.n	80020fe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335c      	adds	r3, #92	; 0x5c
 80020f8:	2205      	movs	r2, #5
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e06b      	b.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	335d      	adds	r3, #93	; 0x5d
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d00a      	beq.n	800212a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	335d      	adds	r3, #93	; 0x5d
 8002124:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002126:	2b08      	cmp	r3, #8
 8002128:	d155      	bne.n	80021d6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3358      	adds	r3, #88	; 0x58
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1c59      	adds	r1, r3, #1
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4403      	add	r3, r0
 800214c:	3358      	adds	r3, #88	; 0x58
 800214e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	3358      	adds	r3, #88	; 0x58
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d914      	bls.n	8002190 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	3358      	adds	r3, #88	; 0x58
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2204      	movs	r2, #4
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e009      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	2202      	movs	r2, #2
 80021a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	b2d8      	uxtb	r0, r3
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	335c      	adds	r3, #92	; 0x5c
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4601      	mov	r1, r0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f007 fbae 	bl	8009964 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	0c5b      	lsrs	r3, r3, #17
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002244:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d003      	beq.n	8002254 <HCD_RXQLVL_IRQHandler+0x44>
 800224c:	2b05      	cmp	r3, #5
 800224e:	f000 8082 	beq.w	8002356 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002252:	e083      	b.n	800235c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07f      	beq.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3344      	adds	r3, #68	; 0x44
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d074      	beq.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3344      	adds	r3, #68	; 0x44
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	b292      	uxth	r2, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f001 fdad 	bl	8003dea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	3344      	adds	r3, #68	; 0x44
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	18d1      	adds	r1, r2, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4403      	add	r3, r0
 80022b4:	3344      	adds	r3, #68	; 0x44
 80022b6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	334c      	adds	r3, #76	; 0x4c
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	18d1      	adds	r1, r2, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4403      	add	r3, r0
 80022dc:	334c      	adds	r3, #76	; 0x4c
 80022de:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HCD_RXQLVL_IRQHandler+0x154>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d031      	beq.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002314:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3350      	adds	r3, #80	; 0x50
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3350      	adds	r3, #80	; 0x50
 8002350:	4602      	mov	r2, r0
 8002352:	701a      	strb	r2, [r3, #0]
      break;
 8002354:	e001      	b.n	800235a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002356:	bf00      	nop
 8002358:	e000      	b.n	800235c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800235a:	bf00      	nop
  }
}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	1ff80000 	.word	0x1ff80000

08002368 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002394:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d113      	bne.n	80023c8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10a      	bne.n	80023c0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023b8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f007 fab6 	bl	800992c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d147      	bne.n	8002462 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d129      	bne.n	8002438 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d113      	bne.n	8002414 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80023f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f6:	d106      	bne.n	8002406 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 fe2e 	bl	8004060 <USB_InitFSLSPClkSel>
 8002404:	e011      	b.n	800242a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f001 fe27 	bl	8004060 <USB_InitFSLSPClkSel>
 8002412:	e00a      	b.n	800242a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002422:	461a      	mov	r2, r3
 8002424:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002428:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f007 faac 	bl	8009988 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f007 fa7b 	bl	800992c <HAL_HCD_Connect_Callback>
 8002436:	e014      	b.n	8002462 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f007 fab3 	bl	80099a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800244c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002450:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002460:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d103      	bne.n	8002474 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e10f      	b.n	80026ba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f006 ffec 	bl	800948c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024cc:	f001 f9ac 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80024d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a7b      	ldr	r2, [pc, #492]	; (80026c4 <HAL_I2C_Init+0x23c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d807      	bhi.n	80024ec <HAL_I2C_Init+0x64>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_I2C_Init+0x240>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e006      	b.n	80024fa <HAL_I2C_Init+0x72>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a77      	ldr	r2, [pc, #476]	; (80026cc <HAL_I2C_Init+0x244>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0db      	b.n	80026ba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a72      	ldr	r2, [pc, #456]	; (80026d0 <HAL_I2C_Init+0x248>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a64      	ldr	r2, [pc, #400]	; (80026c4 <HAL_I2C_Init+0x23c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d802      	bhi.n	800253c <HAL_I2C_Init+0xb4>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3301      	adds	r3, #1
 800253a:	e009      	b.n	8002550 <HAL_I2C_Init+0xc8>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	4a63      	ldr	r2, [pc, #396]	; (80026d4 <HAL_I2C_Init+0x24c>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	3301      	adds	r3, #1
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4956      	ldr	r1, [pc, #344]	; (80026c4 <HAL_I2C_Init+0x23c>)
 800256c:	428b      	cmp	r3, r1
 800256e:	d80d      	bhi.n	800258c <HAL_I2C_Init+0x104>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e59      	subs	r1, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fbb1 f3f3 	udiv	r3, r1, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	bf38      	it	cc
 8002588:	2304      	movcc	r3, #4
 800258a:	e04f      	b.n	800262c <HAL_I2C_Init+0x1a4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_I2C_Init+0x130>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e012      	b.n	80025de <HAL_I2C_Init+0x156>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x15e>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e022      	b.n	800262c <HAL_I2C_Init+0x1a4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <HAL_I2C_Init+0x184>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e58      	subs	r0, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260a:	e00f      	b.n	800262c <HAL_I2C_Init+0x1a4>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	6809      	ldr	r1, [r1, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800265a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6911      	ldr	r1, [r2, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	000186a0 	.word	0x000186a0
 80026c8:	001e847f 	.word	0x001e847f
 80026cc:	003d08ff 	.word	0x003d08ff
 80026d0:	431bde83 	.word	0x431bde83
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e128      	b.n	800293c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a90      	ldr	r2, [pc, #576]	; (8002944 <HAL_I2S_Init+0x26c>)
 8002702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f006 ff09 	bl	800951c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002720:	f023 030f 	bic.w	r3, r3, #15
 8002724:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d060      	beq.n	80027f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800273e:	2310      	movs	r3, #16
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e001      	b.n	8002748 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b20      	cmp	r3, #32
 800274e:	d802      	bhi.n	8002756 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002756:	2001      	movs	r0, #1
 8002758:	f001 f95c 	bl	8003a14 <HAL_RCCEx_GetPeriphCLKFreq>
 800275c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002766:	d125      	bne.n	80027b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	fbb2 f2f3 	udiv	r2, r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	3305      	adds	r3, #5
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e01f      	b.n	80027d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	3305      	adds	r3, #5
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e00e      	b.n	80027d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	3305      	adds	r3, #5
 80027d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <HAL_I2S_Init+0x270>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	08db      	lsrs	r3, r3, #3
 80027dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e003      	b.n	8002800 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d902      	bls.n	800280c <HAL_I2S_Init+0x134>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2bff      	cmp	r3, #255	; 0xff
 800280a:	d907      	bls.n	800281c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f043 0210 	orr.w	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e08f      	b.n	800293c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	ea42 0103 	orr.w	r1, r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	430a      	orrs	r2, r1
 800282e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800283a:	f023 030f 	bic.w	r3, r3, #15
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6851      	ldr	r1, [r2, #4]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6892      	ldr	r2, [r2, #8]
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68d2      	ldr	r2, [r2, #12]
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6992      	ldr	r2, [r2, #24]
 8002852:	430a      	orrs	r2, r1
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d161      	bne.n	800292c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a38      	ldr	r2, [pc, #224]	; (800294c <HAL_I2S_Init+0x274>)
 800286c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a37      	ldr	r2, [pc, #220]	; (8002950 <HAL_I2S_Init+0x278>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_I2S_Init+0x1a4>
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_I2S_Init+0x27c>)
 800287a:	e001      	b.n	8002880 <HAL_I2S_Init+0x1a8>
 800287c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4932      	ldr	r1, [pc, #200]	; (8002950 <HAL_I2S_Init+0x278>)
 8002888:	428a      	cmp	r2, r1
 800288a:	d101      	bne.n	8002890 <HAL_I2S_Init+0x1b8>
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <HAL_I2S_Init+0x27c>)
 800288e:	e001      	b.n	8002894 <HAL_I2S_Init+0x1bc>
 8002890:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002894:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002898:	f023 030f 	bic.w	r3, r3, #15
 800289c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x1d4>
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x1d8>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b0:	2202      	movs	r2, #2
 80028b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_I2S_Init+0x278>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_I2S_Init+0x1ea>
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_I2S_Init+0x27c>)
 80028c0:	e001      	b.n	80028c6 <HAL_I2S_Init+0x1ee>
 80028c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d2:	d003      	beq.n	80028dc <HAL_I2S_Init+0x204>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80028dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e001      	b.n	80028e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	b299      	uxth	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028fe:	4303      	orrs	r3, r0
 8002900:	b29b      	uxth	r3, r3
 8002902:	430b      	orrs	r3, r1
 8002904:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002906:	4313      	orrs	r3, r2
 8002908:	b29a      	uxth	r2, r3
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	4313      	orrs	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002914:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <HAL_I2S_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_I2S_Init+0x24c>
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_I2S_Init+0x27c>)
 8002922:	e001      	b.n	8002928 <HAL_I2S_Init+0x250>
 8002924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002928:	897a      	ldrh	r2, [r7, #10]
 800292a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	08002a4f 	.word	0x08002a4f
 8002948:	cccccccd 	.word	0xcccccccd
 800294c:	08002b65 	.word	0x08002b65
 8002950:	40003800 	.word	0x40003800
 8002954:	40003400 	.word	0x40003400

08002958 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffb8 	bl	8002958 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	b292      	uxth	r2, r2
 8002a04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	1c9a      	adds	r2, r3, #2
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10e      	bne.n	8002a46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff93 	bl	800296c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d13a      	bne.n	8002ae0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d109      	bne.n	8002a88 <I2S_IRQHandler+0x3a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d102      	bne.n	8002a88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb4 	bl	80029f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d126      	bne.n	8002ae0 <I2S_IRQHandler+0x92>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d11f      	bne.n	8002ae0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff50 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d136      	bne.n	8002b5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d109      	bne.n	8002b0a <I2S_IRQHandler+0xbc>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d102      	bne.n	8002b0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff45 	bl	8002994 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d122      	bne.n	8002b5a <I2S_IRQHandler+0x10c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d11b      	bne.n	8002b5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff13 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4aa2      	ldr	r2, [pc, #648]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b7e:	4ba2      	ldr	r3, [pc, #648]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b80:	e001      	b.n	8002b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a9b      	ldr	r2, [pc, #620]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b9c:	4b9a      	ldr	r3, [pc, #616]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b9e:	e001      	b.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d004      	beq.n	8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8099 	bne.w	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f925 	bl	8002e20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9c8 	bl	8002f80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d13a      	bne.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d035      	beq.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7e      	ldr	r2, [pc, #504]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c0e:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c10:	e001      	b.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4979      	ldr	r1, [pc, #484]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c1e:	428b      	cmp	r3, r1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c24:	e001      	b.n	8002c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fe88 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	f040 80be 	bne.w	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80b8 	beq.w	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a59      	ldr	r2, [pc, #356]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ca4:	e001      	b.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4954      	ldr	r1, [pc, #336]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cb2:	428b      	cmp	r3, r1
 8002cb4:	d101      	bne.n	8002cba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cb6:	4b54      	ldr	r3, [pc, #336]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cb8:	e001      	b.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe4a 	bl	8002980 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cec:	e084      	b.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8be 	bl	8002e84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f8fd 	bl	8002f1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d12f      	bne.n	8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02a      	beq.n	8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d52:	e001      	b.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4929      	ldr	r1, [pc, #164]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d60:	428b      	cmp	r3, r1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d66:	e001      	b.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fdfa 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d131      	bne.n	8002dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02c      	beq.n	8002dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dac:	e001      	b.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4912      	ldr	r1, [pc, #72]	; (8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dba:	428b      	cmp	r3, r1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dc0:	e001      	b.n	8002dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dda:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fdc5 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002df6:	e000      	b.n	8002dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002df8:	bf00      	nop
}
 8002dfa:	bf00      	nop
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40003800 	.word	0x40003800
 8002e08:	40003400 	.word	0x40003400

08002e0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	1c99      	adds	r1, r3, #2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6251      	str	r1, [r2, #36]	; 0x24
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d113      	bne.n	8002e7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffc9 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c99      	adds	r1, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6251      	str	r1, [r2, #36]	; 0x24
 8002e96:	8819      	ldrh	r1, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <I2SEx_TxISR_I2SExt+0x90>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <I2SEx_TxISR_I2SExt+0x22>
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ea4:	e001      	b.n	8002eaa <I2SEx_TxISR_I2SExt+0x26>
 8002ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eaa:	460a      	mov	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d121      	bne.n	8002f0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <I2SEx_TxISR_I2SExt+0x90>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <I2SEx_TxISR_I2SExt+0x50>
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ed2:	e001      	b.n	8002ed8 <I2SEx_TxISR_I2SExt+0x54>
 8002ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	490d      	ldr	r1, [pc, #52]	; (8002f14 <I2SEx_TxISR_I2SExt+0x90>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d101      	bne.n	8002ee8 <I2SEx_TxISR_I2SExt+0x64>
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ee6:	e001      	b.n	8002eec <I2SEx_TxISR_I2SExt+0x68>
 8002ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff81 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40003800 	.word	0x40003800
 8002f18:	40003400 	.word	0x40003400

08002f1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68d8      	ldr	r0, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	1c99      	adds	r1, r3, #2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f34:	b282      	uxth	r2, r0
 8002f36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d113      	bne.n	8002f78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4a 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <I2SEx_RxISR_I2SExt+0x90>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <I2SEx_RxISR_I2SExt+0x16>
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <I2SEx_RxISR_I2SExt+0x94>)
 8002f94:	e001      	b.n	8002f9a <I2SEx_RxISR_I2SExt+0x1a>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	1c99      	adds	r1, r3, #2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fa6:	b282      	uxth	r2, r0
 8002fa8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d121      	bne.n	8003006 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <I2SEx_RxISR_I2SExt+0x90>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <I2SEx_RxISR_I2SExt+0x50>
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <I2SEx_RxISR_I2SExt+0x94>)
 8002fce:	e001      	b.n	8002fd4 <I2SEx_RxISR_I2SExt+0x54>
 8002fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	490d      	ldr	r1, [pc, #52]	; (8003010 <I2SEx_RxISR_I2SExt+0x90>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d101      	bne.n	8002fe4 <I2SEx_RxISR_I2SExt+0x64>
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <I2SEx_RxISR_I2SExt+0x94>)
 8002fe2:	e001      	b.n	8002fe8 <I2SEx_RxISR_I2SExt+0x68>
 8002fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff03 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40003800 	.word	0x40003800
 8003014:	40003400 	.word	0x40003400

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e22d      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003036:	4ba3      	ldr	r3, [pc, #652]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4ba0      	ldr	r3, [pc, #640]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b9d      	ldr	r3, [pc, #628]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b99      	ldr	r3, [pc, #612]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e208      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a90      	ldr	r2, [pc, #576]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a8a      	ldr	r2, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a83      	ldr	r2, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a80      	ldr	r2, [pc, #512]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fa64 	bl	800059c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd fa60 	bl	800059c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1cd      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd fa50 	bl	800059c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fd fa4c 	bl	800059c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1b9      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e18d      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4952      	ldr	r1, [pc, #328]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_RCC_OscConfig+0x2b0>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fd fa05 	bl	800059c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fd fa01 	bl	800059c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e16e      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4940      	ldr	r1, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0x2b0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd f9e4 	bl	800059c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd f9e0 	bl	800059c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e14d      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d030      	beq.n	8003264 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_OscConfig+0x2b4>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd f9c4 	bl	800059c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd f9c0 	bl	800059c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e12d      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e015      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x2b4>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fd f9ad 	bl	800059c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003246:	f7fd f9a9 	bl	800059c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e116      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a0 	beq.w	80033b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d121      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fd f96f 	bl	800059c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e011      	b.n	80032e6 <HAL_RCC_OscConfig+0x2ce>
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
 80032d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d4:	f7fd f962 	bl	800059c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0cf      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x2f0>
 80032fa:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a65      	ldr	r2, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	e01c      	b.n	8003342 <HAL_RCC_OscConfig+0x32a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x312>
 8003310:	4b60      	ldr	r3, [pc, #384]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a5f      	ldr	r2, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e00b      	b.n	8003342 <HAL_RCC_OscConfig+0x32a>
 800332a:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a59      	ldr	r2, [pc, #356]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	4b57      	ldr	r3, [pc, #348]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a56      	ldr	r2, [pc, #344]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d015      	beq.n	8003376 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fd f927 	bl	800059c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fd f923 	bl	800059c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e08e      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ee      	beq.n	8003352 <HAL_RCC_OscConfig+0x33a>
 8003374:	e014      	b.n	80033a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fd f911 	bl	800059c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fd f90d 	bl	800059c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e078      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ee      	bne.n	800337e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a3a      	ldr	r2, [pc, #232]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d064      	beq.n	8003484 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d05c      	beq.n	8003480 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d141      	bne.n	8003452 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b32      	ldr	r3, [pc, #200]	; (8003498 <HAL_RCC_OscConfig+0x480>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fd f8e2 	bl	800059c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fd f8de 	bl	800059c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e04b      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	491d      	ldr	r1, [pc, #116]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_RCC_OscConfig+0x480>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fd f8b7 	bl	800059c <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7fd f8b3 	bl	800059c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e020      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x41a>
 8003450:	e018      	b.n	8003484 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_OscConfig+0x480>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fd f8a0 	bl	800059c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fd f89c 	bl	800059c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e009      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCC_OscConfig+0x47c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x448>
 800347e:	e001      	b.n	8003484 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40007000 	.word	0x40007000
 8003494:	40023800 	.word	0x40023800
 8003498:	42470060 	.word	0x42470060

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0ca      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b67      	ldr	r3, [pc, #412]	; (8003650 <HAL_RCC_ClockConfig+0x1b4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b64      	ldr	r3, [pc, #400]	; (8003650 <HAL_RCC_ClockConfig+0x1b4>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCC_ClockConfig+0x1b4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b6      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b52      	ldr	r3, [pc, #328]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494c      	ldr	r1, [pc, #304]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07d      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06d      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e065      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4933      	ldr	r1, [pc, #204]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fd f806 	bl	800059c <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fd f802 	bl	800059c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04d      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCC_ClockConfig+0x1b4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b21      	ldr	r3, [pc, #132]	; (8003650 <HAL_RCC_ClockConfig+0x1b4>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <HAL_RCC_ClockConfig+0x1b4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e030      	b.n	8003646 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4915      	ldr	r1, [pc, #84]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490d      	ldr	r1, [pc, #52]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f81d 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	fa21 f303 	lsr.w	r3, r1, r3
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800363e:	200f      	movs	r0, #15
 8003640:	f7fc ff68 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023c00 	.word	0x40023c00
 8003654:	40023800 	.word	0x40023800
 8003658:	0800a140 	.word	0x0800a140
 800365c:	2000002c 	.word	0x2000002c

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	2300      	movs	r3, #0
 8003670:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b04      	cmp	r3, #4
 8003680:	d007      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x32>
 8003682:	2b08      	cmp	r3, #8
 8003684:	d008      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x38>
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 80b4 	bne.w	80037f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800368e:	60bb      	str	r3, [r7, #8]
       break;
 8003690:	e0b3      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003692:	4b5e      	ldr	r3, [pc, #376]	; (800380c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003694:	60bb      	str	r3, [r7, #8]
      break;
 8003696:	e0b0      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036a2:	4b58      	ldr	r3, [pc, #352]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d04a      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ae:	4b55      	ldr	r3, [pc, #340]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	f04f 0400 	mov.w	r4, #0
 80036b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	ea03 0501 	and.w	r5, r3, r1
 80036c4:	ea04 0602 	and.w	r6, r4, r2
 80036c8:	4629      	mov	r1, r5
 80036ca:	4632      	mov	r2, r6
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f04f 0400 	mov.w	r4, #0
 80036d4:	0154      	lsls	r4, r2, #5
 80036d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036da:	014b      	lsls	r3, r1, #5
 80036dc:	4619      	mov	r1, r3
 80036de:	4622      	mov	r2, r4
 80036e0:	1b49      	subs	r1, r1, r5
 80036e2:	eb62 0206 	sbc.w	r2, r2, r6
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f04f 0400 	mov.w	r4, #0
 80036ee:	0194      	lsls	r4, r2, #6
 80036f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036f4:	018b      	lsls	r3, r1, #6
 80036f6:	1a5b      	subs	r3, r3, r1
 80036f8:	eb64 0402 	sbc.w	r4, r4, r2
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	00e2      	lsls	r2, r4, #3
 8003706:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800370a:	00d9      	lsls	r1, r3, #3
 800370c:	460b      	mov	r3, r1
 800370e:	4614      	mov	r4, r2
 8003710:	195b      	adds	r3, r3, r5
 8003712:	eb44 0406 	adc.w	r4, r4, r6
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	0262      	lsls	r2, r4, #9
 8003720:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003724:	0259      	lsls	r1, r3, #9
 8003726:	460b      	mov	r3, r1
 8003728:	4614      	mov	r4, r2
 800372a:	4618      	mov	r0, r3
 800372c:	4621      	mov	r1, r4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f04f 0400 	mov.w	r4, #0
 8003734:	461a      	mov	r2, r3
 8003736:	4623      	mov	r3, r4
 8003738:	f7fc fd4a 	bl	80001d0 <__aeabi_uldivmod>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e049      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	f04f 0400 	mov.w	r4, #0
 800374e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	ea03 0501 	and.w	r5, r3, r1
 800375a:	ea04 0602 	and.w	r6, r4, r2
 800375e:	4629      	mov	r1, r5
 8003760:	4632      	mov	r2, r6
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	f04f 0400 	mov.w	r4, #0
 800376a:	0154      	lsls	r4, r2, #5
 800376c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003770:	014b      	lsls	r3, r1, #5
 8003772:	4619      	mov	r1, r3
 8003774:	4622      	mov	r2, r4
 8003776:	1b49      	subs	r1, r1, r5
 8003778:	eb62 0206 	sbc.w	r2, r2, r6
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	0194      	lsls	r4, r2, #6
 8003786:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800378a:	018b      	lsls	r3, r1, #6
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	eb64 0402 	sbc.w	r4, r4, r2
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	00e2      	lsls	r2, r4, #3
 800379c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037a0:	00d9      	lsls	r1, r3, #3
 80037a2:	460b      	mov	r3, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	195b      	adds	r3, r3, r5
 80037a8:	eb44 0406 	adc.w	r4, r4, r6
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	02a2      	lsls	r2, r4, #10
 80037b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ba:	0299      	lsls	r1, r3, #10
 80037bc:	460b      	mov	r3, r1
 80037be:	4614      	mov	r4, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	4621      	mov	r1, r4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	461a      	mov	r2, r3
 80037cc:	4623      	mov	r3, r4
 80037ce:	f7fc fcff 	bl	80001d0 <__aeabi_uldivmod>
 80037d2:	4603      	mov	r3, r0
 80037d4:	460c      	mov	r4, r1
 80037d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	60bb      	str	r3, [r7, #8]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037f6:	60bb      	str	r3, [r7, #8]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	68bb      	ldr	r3, [r7, #8]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	007a1200 	.word	0x007a1200

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000002c 	.word	0x2000002c

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4601      	mov	r1, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	0800a150 	.word	0x0800a150

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003874:	2b00      	cmp	r3, #0
 8003876:	d035      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003878:	4b62      	ldr	r3, [pc, #392]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800387e:	f7fc fe8d 	bl	800059c <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003886:	f7fc fe89 	bl	800059c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e0b0      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	019a      	lsls	r2, r3, #6
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	071b      	lsls	r3, r3, #28
 80038b0:	4955      	ldr	r1, [pc, #340]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038b8:	4b52      	ldr	r3, [pc, #328]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038be:	f7fc fe6d 	bl	800059c <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038c6:	f7fc fe69 	bl	800059c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e090      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8083 	beq.w	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a43      	ldr	r2, [pc, #268]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800390e:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800391a:	f7fc fe3f 	bl	800059c <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fc fe3b 	bl	800059c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e062      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003948:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	429a      	cmp	r2, r3
 800395c:	d028      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003968:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800396e:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003974:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800397a:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d114      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003986:	f7fc fe09 	bl	800059c <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fc fe05 	bl	800059c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e02a      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ee      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039bc:	d10d      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	490d      	ldr	r1, [pc, #52]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
 80039d8:	e005      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039e4:	6093      	str	r3, [r2, #8]
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	4905      	ldr	r1, [pc, #20]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	42470068 	.word	0x42470068
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	42470e40 	.word	0x42470e40

08003a14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d13d      	bne.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a3a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d12f      	bne.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a46:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a48:	617b      	str	r3, [r7, #20]
          break;
 8003a4a:	e02f      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a58:	d108      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e007      	b.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a96:	0f1b      	lsrs	r3, r3, #28
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	617b      	str	r3, [r7, #20]
          break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
          break;
 8003aaa:	bf00      	nop
        }
      }
      break;
 8003aac:	bf00      	nop
    }
  }
  return frequency;
 8003aae:	697b      	ldr	r3, [r7, #20]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	00bb8000 	.word	0x00bb8000
 8003ac4:	007a1200 	.word	0x007a1200
 8003ac8:	00f42400 	.word	0x00f42400

08003acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e056      	b.n	8003b8c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f005 fd77 	bl	80095ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 0104 	and.w	r1, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b94:	b084      	sub	sp, #16
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	f107 001c 	add.w	r0, r7, #28
 8003ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d122      	bne.n	8003bf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f94a 	bl	8003e80 <USB_CoreReset>
 8003bec:	4603      	mov	r3, r0
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e01a      	b.n	8003c28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f93e 	bl	8003e80 <USB_CoreReset>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
 8003c1a:	e005      	b.n	8003c28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10b      	bne.n	8003c46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f043 0206 	orr.w	r2, r3, #6
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c52:	b004      	add	sp, #16
 8003c54:	4770      	bx	lr

08003c56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 0201 	bic.w	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	e00b      	b.n	8003cde <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
 8003cd8:	e001      	b.n	8003cde <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e003      	b.n	8003ce6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003cde:	2032      	movs	r0, #50	; 0x32
 8003ce0:	f7fc fc68 	bl	80005b4 <HAL_Delay>

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <USB_FlushTxFifo+0x48>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e006      	b.n	8003d2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d0f0      	beq.n	8003d0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	00030d40 	.word	0x00030d40

08003d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <USB_FlushRxFifo+0x40>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d0f0      	beq.n	8003d4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	00030d40 	.word	0x00030d40

08003d80 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	460b      	mov	r3, r1
 8003d90:	71fb      	strb	r3, [r7, #7]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11a      	bne.n	8003ddc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003da6:	88bb      	ldrh	r3, [r7, #4]
 8003da8:	3303      	adds	r3, #3
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e00f      	b.n	8003dd4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	031a      	lsls	r2, r3, #12
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d3eb      	bcc.n	8003db4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3724      	adds	r7, #36	; 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b089      	sub	sp, #36	; 0x24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	3303      	adds	r3, #3
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e00b      	b.n	8003e26 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	3301      	adds	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3ef      	bcc.n	8003e0e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3724      	adds	r7, #36	; 0x24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e54:	68fb      	ldr	r3, [r7, #12]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <USB_CoreReset+0x64>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e01b      	b.n	8003ed6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	daf2      	bge.n	8003e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <USB_CoreReset+0x64>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d0f0      	beq.n	8003eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	00030d40 	.word	0x00030d40

08003ee8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ee8:	b084      	sub	sp, #16
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	f107 001c 	add.w	r0, r7, #28
 8003ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f04:	461a      	mov	r2, r3
 8003f06:	2300      	movs	r3, #0
 8003f08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d018      	beq.n	8003f6c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d10a      	bne.n	8003f56 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e014      	b.n	8003f80 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e009      	b.n	8003f80 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f7a:	f023 0304 	bic.w	r3, r3, #4
 8003f7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003f80:	2110      	movs	r1, #16
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff feb4 	bl	8003cf0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fed7 	bl	8003d3c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e015      	b.n	8003fc0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3e5      	bcc.n	8003f94 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003fc8:	2101      	movs	r1, #1
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8ac 	bl	8004128 <USB_DriveVbus>

  HAL_Delay(200U);
 8003fd0:	20c8      	movs	r0, #200	; 0xc8
 8003fd2:	f7fc faef 	bl	80005b4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a14      	ldr	r2, [pc, #80]	; (800404c <USB_HostInit+0x164>)
 8003ffc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <USB_HostInit+0x168>)
 8004002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004006:	e009      	b.n	800401c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a10      	ldr	r2, [pc, #64]	; (8004054 <USB_HostInit+0x16c>)
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a10      	ldr	r2, [pc, #64]	; (8004058 <USB_HostInit+0x170>)
 8004018:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f043 0210 	orr.w	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <USB_HostInit+0x174>)
 8004034:	4313      	orrs	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004046:	b004      	add	sp, #16
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	01000200 	.word	0x01000200
 8004050:	00e00300 	.word	0x00e00300
 8004054:	00600080 	.word	0x00600080
 8004058:	004000e0 	.word	0x004000e0
 800405c:	a3200008 	.word	0xa3200008

08004060 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a8:	461a      	mov	r2, r3
 80040aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80040ae:	6053      	str	r3, [r2, #4]
 80040b0:	e009      	b.n	80040c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d106      	bne.n	80040c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040be:	461a      	mov	r2, r3
 80040c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80040c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004104:	2064      	movs	r0, #100	; 0x64
 8004106:	f7fc fa55 	bl	80005b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004112:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004118:	200a      	movs	r0, #10
 800411a:	f7fc fa4b 	bl	80005b4 <HAL_Delay>

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800414c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <USB_DriveVbus+0x44>
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d106      	bne.n	800416c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800416a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d109      	bne.n	800418c <USB_DriveVbus+0x64>
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	0c5b      	lsrs	r3, r3, #17
 80041b8:	f003 0303 	and.w	r3, r3, #3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	b29b      	uxth	r3, r3
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	70fb      	strb	r3, [r7, #3]
 80041fe:	460b      	mov	r3, r1
 8004200:	70bb      	strb	r3, [r7, #2]
 8004202:	4613      	mov	r3, r2
 8004204:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 33ff 	mov.w	r3, #4294967295
 8004220:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004226:	2b03      	cmp	r3, #3
 8004228:	d87e      	bhi.n	8004328 <USB_HC_Init+0x13c>
 800422a:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <USB_HC_Init+0x44>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	080042eb 	.word	0x080042eb
 8004238:	08004241 	.word	0x08004241
 800423c:	080042ad 	.word	0x080042ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	461a      	mov	r2, r3
 800424e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004252:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004254:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da10      	bge.n	800427e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	440a      	add	r2, r1
 8004272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800427c:	e057      	b.n	800432e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d051      	beq.n	800432e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042a8:	60d3      	str	r3, [r2, #12]
      break;
 80042aa:	e040      	b.n	800432e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80042be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80042c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da34      	bge.n	8004332 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80042e8:	e023      	b.n	8004332 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f6:	461a      	mov	r2, r3
 80042f8:	f240 2325 	movw	r3, #549	; 0x225
 80042fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80042fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004302:	2b00      	cmp	r3, #0
 8004304:	da17      	bge.n	8004336 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	440a      	add	r2, r1
 800431c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004320:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004324:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004326:	e006      	b.n	8004336 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	75fb      	strb	r3, [r7, #23]
      break;
 800432c:	e004      	b.n	8004338 <USB_HC_Init+0x14c>
      break;
 800432e:	bf00      	nop
 8004330:	e002      	b.n	8004338 <USB_HC_Init+0x14c>
      break;
 8004332:	bf00      	nop
 8004334:	e000      	b.n	8004338 <USB_HC_Init+0x14c>
      break;
 8004336:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004362:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da03      	bge.n	8004372 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800436a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e001      	b.n	8004376 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d103      	bne.n	8004386 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800437e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e001      	b.n	800438a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800438a:	787b      	ldrb	r3, [r7, #1]
 800438c:	059b      	lsls	r3, r3, #22
 800438e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004392:	78bb      	ldrb	r3, [r7, #2]
 8004394:	02db      	lsls	r3, r3, #11
 8004396:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800439a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800439c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043a0:	049b      	lsls	r3, r3, #18
 80043a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80043a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80043ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	440b      	add	r3, r1
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043c6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80043c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d10f      	bne.n	80043f0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d028      	beq.n	800447c <USB_HC_StartXfer+0x7c>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	791b      	ldrb	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d124      	bne.n	800447c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <USB_HC_StartXfer+0x50>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	795b      	ldrb	r3, [r3, #5]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fa2e 	bl	80048a8 <USB_DoPing>
      return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e112      	b.n	8004676 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d112      	bne.n	800447c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	440a      	add	r2, r1
 800446c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004470:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004474:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d018      	beq.n	80044b6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	8912      	ldrh	r2, [r2, #8]
 800448c:	4413      	add	r3, r2
 800448e:	3b01      	subs	r3, #1
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	8912      	ldrh	r2, [r2, #8]
 8004494:	fbb3 f3f2 	udiv	r3, r3, r2
 8004498:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800449a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800449c:	8b7b      	ldrh	r3, [r7, #26]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d90b      	bls.n	80044ba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80044a2:	8b7b      	ldrh	r3, [r7, #26]
 80044a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80044a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	8912      	ldrh	r2, [r2, #8]
 80044ac:	fb02 f203 	mul.w	r2, r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	e001      	b.n	80044ba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80044b6:	2301      	movs	r3, #1
 80044b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d006      	beq.n	80044d0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80044c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	8912      	ldrh	r2, [r2, #8]
 80044c8:	fb02 f203 	mul.w	r2, r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80044d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044da:	04d9      	lsls	r1, r3, #19
 80044dc:	4b68      	ldr	r3, [pc, #416]	; (8004680 <USB_HC_StartXfer+0x280>)
 80044de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80044e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	7a9b      	ldrb	r3, [r3, #10]
 80044e6:	075b      	lsls	r3, r3, #29
 80044e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80044ec:	69f9      	ldr	r1, [r7, #28]
 80044ee:	0148      	lsls	r0, r1, #5
 80044f0:	6a39      	ldr	r1, [r7, #32]
 80044f2:	4401      	add	r1, r0
 80044f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80044f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80044fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	68d9      	ldr	r1, [r3, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	460a      	mov	r2, r1
 8004514:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	440a      	add	r2, r1
 8004544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004548:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800454c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	7e7b      	ldrb	r3, [r7, #25]
 800455e:	075b      	lsls	r3, r3, #29
 8004560:	69f9      	ldr	r1, [r7, #28]
 8004562:	0148      	lsls	r0, r1, #5
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	4401      	add	r1, r0
 8004568:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a41      	ldr	r2, [pc, #260]	; (8004684 <USB_HC_StartXfer+0x284>)
 8004580:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <USB_HC_StartXfer+0x284>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800458a:	4a3e      	ldr	r2, [pc, #248]	; (8004684 <USB_HC_StartXfer+0x284>)
 800458c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	78db      	ldrb	r3, [r3, #3]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004596:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <USB_HC_StartXfer+0x284>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	4a39      	ldr	r2, [pc, #228]	; (8004684 <USB_HC_StartXfer+0x284>)
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e005      	b.n	80045b0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80045a4:	4b37      	ldr	r3, [pc, #220]	; (8004684 <USB_HC_StartXfer+0x284>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ac:	4a35      	ldr	r2, [pc, #212]	; (8004684 <USB_HC_StartXfer+0x284>)
 80045ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <USB_HC_StartXfer+0x284>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b8:	4a32      	ldr	r2, [pc, #200]	; (8004684 <USB_HC_StartXfer+0x284>)
 80045ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <USB_HC_StartXfer+0x284>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14e      	bne.n	8004674 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d14a      	bne.n	8004674 <USB_HC_StartXfer+0x274>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d046      	beq.n	8004674 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	79db      	ldrb	r3, [r3, #7]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d830      	bhi.n	8004650 <USB_HC_StartXfer+0x250>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <USB_HC_StartXfer+0x1f4>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004629 	.word	0x08004629
 80045fc:	08004605 	.word	0x08004605
 8004600:	08004629 	.word	0x08004629
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	3303      	adds	r3, #3
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800460e:	8afa      	ldrh	r2, [r7, #22]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	b29b      	uxth	r3, r3
 8004616:	429a      	cmp	r2, r3
 8004618:	d91c      	bls.n	8004654 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]
          }
          break;
 8004626:	e015      	b.n	8004654 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	3303      	adds	r3, #3
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004632:	8afa      	ldrh	r2, [r7, #22]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	b29b      	uxth	r3, r3
 800463e:	429a      	cmp	r2, r3
 8004640:	d90a      	bls.n	8004658 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	619a      	str	r2, [r3, #24]
          }
          break;
 800464e:	e003      	b.n	8004658 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <USB_HC_StartXfer+0x25a>
          break;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <USB_HC_StartXfer+0x25a>
          break;
 8004658:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	68d9      	ldr	r1, [r3, #12]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	785a      	ldrb	r2, [r3, #1]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	b298      	uxth	r0, r3
 8004668:	2300      	movs	r3, #0
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4603      	mov	r3, r0
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fb86 	bl	8003d80 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3728      	adds	r7, #40	; 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	1ff80000 	.word	0x1ff80000
 8004684:	200000b0 	.word	0x200000b0

08004688 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	b29b      	uxth	r3, r3
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <USB_HC_Halt+0x3a>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d16c      	bne.n	80047be <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004702:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d143      	bne.n	8004798 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	440a      	add	r2, r1
 8004726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800472a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800472e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	440a      	add	r2, r1
 8004746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800474e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	440a      	add	r2, r1
 8004766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800476a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800476e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3301      	adds	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800477c:	d81d      	bhi.n	80047ba <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004794:	d0ec      	beq.n	8004770 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004796:	e080      	b.n	800489a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80047b8:	e06f      	b.n	800489a <USB_HC_Halt+0x1f0>
          break;
 80047ba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80047bc:	e06d      	b.n	800489a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d143      	bne.n	8004876 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	440a      	add	r2, r1
 8004804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800480c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	440a      	add	r2, r1
 8004824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800482c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	440a      	add	r2, r1
 8004844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800484c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3301      	adds	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800485a:	d81d      	bhi.n	8004898 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004872:	d0ec      	beq.n	800484e <USB_HC_Halt+0x1a4>
 8004874:	e011      	b.n	800489a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	440a      	add	r2, r1
 800488c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e000      	b.n	800489a <USB_HC_Halt+0x1f0>
          break;
 8004898:	bf00      	nop
    }
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80048bc:	2301      	movs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	04da      	lsls	r2, r3, #19
 80048c4:	4b15      	ldr	r3, [pc, #84]	; (800491c <USB_DoPing+0x74>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	1ff80000 	.word	0x1ff80000

08004920 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f9a1 	bl	8003c78 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004936:	2110      	movs	r1, #16
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff f9d9 	bl	8003cf0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff f9fc 	bl	8003d3c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e01f      	b.n	800498a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004960:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004968:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004970:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	461a      	mov	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3301      	adds	r3, #1
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d9dc      	bls.n	800494a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	e034      	b.n	8004a00 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	3301      	adds	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049dc:	d80c      	bhi.n	80049f8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f4:	d0ec      	beq.n	80049d0 <USB_StopHost+0xb0>
 80049f6:	e000      	b.n	80049fa <USB_StopHost+0xda>
        break;
 80049f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b0f      	cmp	r3, #15
 8004a04:	d9c7      	bls.n	8004996 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff f91a 	bl	8003c56 <USB_EnableGlobalInt>

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b089      	sub	sp, #36	; 0x24
 8004a30:	af04      	add	r7, sp, #16
 8004a32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8004a34:	2302      	movs	r3, #2
 8004a36:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8004a38:	2301      	movs	r3, #1
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fc8c 	bl	800535c <USBH_FindInterface>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8004a48:	7bbb      	ldrb	r3, [r7, #14]
 8004a4a:	2bff      	cmp	r3, #255	; 0xff
 8004a4c:	f000 812a 	beq.w	8004ca4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fc65 	bl	8005324 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8004a60:	2050      	movs	r0, #80	; 0x50
 8004a62:	f005 f9f5 	bl	8009e50 <malloc>
 8004a66:	4603      	mov	r3, r0
 8004a68:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	211a      	movs	r1, #26
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b25b      	sxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	da15      	bge.n	8004ab8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	211a      	movs	r1, #26
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004aa2:	7bbb      	ldrb	r3, [r7, #14]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	211a      	movs	r1, #26
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 ff2f 	bl	8006922 <USBH_AllocPipe>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	7819      	ldrb	r1, [r3, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	7858      	ldrb	r0, [r3, #1]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	8952      	ldrh	r2, [r2, #10]
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	9201      	str	r2, [sp, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4623      	mov	r3, r4
 8004aee:	4602      	mov	r2, r0
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 fee7 	bl	80068c4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f005 f8cc 	bl	8009c9c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8004b04:	2300      	movs	r3, #0
 8004b06:	2200      	movs	r2, #0
 8004b08:	210a      	movs	r1, #10
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fc26 	bl	800535c <USBH_FindInterface>
 8004b10:	4603      	mov	r3, r0
 8004b12:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8004b14:	7bbb      	ldrb	r3, [r7, #14]
 8004b16:	2bff      	cmp	r3, #255	; 0xff
 8004b18:	f000 80c4 	beq.w	8004ca4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	211a      	movs	r1, #26
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da16      	bge.n	8004b62 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004b34:	7bbb      	ldrb	r3, [r7, #14]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	211a      	movs	r1, #26
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	211a      	movs	r1, #26
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004b5a:	881a      	ldrh	r2, [r3, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	835a      	strh	r2, [r3, #26]
 8004b60:	e015      	b.n	8004b8e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004b62:	7bbb      	ldrb	r3, [r7, #14]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	211a      	movs	r1, #26
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004b78:	7bbb      	ldrb	r3, [r7, #14]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	211a      	movs	r1, #26
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004b88:	881a      	ldrh	r2, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	211a      	movs	r1, #26
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b25b      	sxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da16      	bge.n	8004bd4 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	211a      	movs	r1, #26
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004bbc:	7bbb      	ldrb	r3, [r7, #14]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	211a      	movs	r1, #26
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	835a      	strh	r2, [r3, #26]
 8004bd2:	e015      	b.n	8004c00 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	211a      	movs	r1, #26
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	211a      	movs	r1, #26
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004bfa:	881a      	ldrh	r2, [r3, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	7b9b      	ldrb	r3, [r3, #14]
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f001 fe8b 	bl	8006922 <USBH_AllocPipe>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	7bdb      	ldrb	r3, [r3, #15]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 fe81 	bl	8006922 <USBH_AllocPipe>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	7b59      	ldrb	r1, [r3, #13]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	7b98      	ldrb	r0, [r3, #14]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	8b12      	ldrh	r2, [r2, #24]
 8004c40:	9202      	str	r2, [sp, #8]
 8004c42:	2202      	movs	r2, #2
 8004c44:	9201      	str	r2, [sp, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4623      	mov	r3, r4
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 fe39 	bl	80068c4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	7b19      	ldrb	r1, [r3, #12]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	7bd8      	ldrb	r0, [r3, #15]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	8b52      	ldrh	r2, [r2, #26]
 8004c6a:	9202      	str	r2, [sp, #8]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	9201      	str	r2, [sp, #4]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	4623      	mov	r3, r4
 8004c74:	4602      	mov	r2, r0
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f001 fe24 	bl	80068c4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	7b5b      	ldrb	r3, [r3, #13]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f005 f805 	bl	8009c9c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	7b1b      	ldrb	r3, [r3, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f004 fffe 	bl	8009c9c <USBH_LL_SetToggle>
      status = USBH_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd90      	pop	{r4, r7, pc}

08004cae <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 fe17 	bl	8006902 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 fe3f 	bl	800695e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	7b1b      	ldrb	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	7b1b      	ldrb	r3, [r3, #12]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 fe04 	bl	8006902 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	7b1b      	ldrb	r3, [r3, #12]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fe2c 	bl	800695e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	7b5b      	ldrb	r3, [r3, #13]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00e      	beq.n	8004d32 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	7b5b      	ldrb	r3, [r3, #13]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 fdf1 	bl	8006902 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	7b5b      	ldrb	r3, [r3, #13]
 8004d24:	4619      	mov	r1, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fe19 	bl	800695e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f005 f88a 	bl	8009e60 <free>
    phost->pActiveClass->pData = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3340      	adds	r3, #64	; 0x40
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8b2 	bl	8004ee6 <GetLineCoding>
 8004d82:	4603      	mov	r3, r0
 8004d84:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004d92:	2102      	movs	r1, #2
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
  }
  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d877      	bhi.n	8004eb8 <USBH_CDC_Process+0x114>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <USBH_CDC_Process+0x2c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004deb 	.word	0x08004deb
 8004dd8:	08004e1b 	.word	0x08004e1b
 8004ddc:	08004e8f 	.word	0x08004e8f
 8004de0:	08004e9d 	.word	0x08004e9d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]
    break;
 8004de8:	e06d      	b.n	8004ec6 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f897 	bl	8004f24 <SetLineCoding>
 8004df6:	4603      	mov	r3, r0
 8004df8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8004e08:	e058      	b.n	8004ebc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8004e0a:	7bbb      	ldrb	r3, [r7, #14]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d055      	beq.n	8004ebc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2204      	movs	r2, #4
 8004e14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8004e18:	e050      	b.n	8004ebc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	3340      	adds	r3, #64	; 0x40
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f860 	bl	8004ee6 <GetLineCoding>
 8004e26:	4603      	mov	r3, r0
 8004e28:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d126      	bne.n	8004e7e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d13b      	bne.n	8004ec0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d133      	bne.n	8004ec0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e62:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d12b      	bne.n	8004ec0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e70:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d124      	bne.n	8004ec0 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f984 	bl	8005184 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8004e7c:	e020      	b.n	8004ec0 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8004e7e:	7bbb      	ldrb	r3, [r7, #14]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d01d      	beq.n	8004ec0 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2204      	movs	r2, #4
 8004e88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8004e8c:	e018      	b.n	8004ec0 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f867 	bl	8004f62 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8f8 	bl	800508a <CDC_ProcessReception>
    break;
 8004e9a:	e014      	b.n	8004ec6 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fffa 	bl	8005e98 <USBH_ClrFeature>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8004eb6:	e005      	b.n	8004ec4 <USBH_CDC_Process+0x120>

  default:
    break;
 8004eb8:	bf00      	nop
 8004eba:	e004      	b.n	8004ec6 <USBH_CDC_Process+0x122>
    break;
 8004ebc:	bf00      	nop
 8004ebe:	e002      	b.n	8004ec6 <USBH_CDC_Process+0x122>
    break;
 8004ec0:	bf00      	nop
 8004ec2:	e000      	b.n	8004ec6 <USBH_CDC_Process+0x122>
    break;
 8004ec4:	bf00      	nop

  }

  return status;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	22a1      	movs	r2, #161	; 0xa1
 8004ef4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2221      	movs	r2, #33	; 0x21
 8004efa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2207      	movs	r2, #7
 8004f0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2207      	movs	r2, #7
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f001 f99f 	bl	8006258 <USBH_CtlReq>
 8004f1a:	4603      	mov	r3, r0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2221      	movs	r2, #33	; 0x21
 8004f32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2207      	movs	r2, #7
 8004f4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 f980 	bl	8006258 <USBH_CtlReq>
 8004f58:	4603      	mov	r3, r0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af02      	add	r7, sp, #8
 8004f68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d002      	beq.n	8004f88 <CDC_ProcessTransmission+0x26>
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d025      	beq.n	8004fd2 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8004f86:	e07c      	b.n	8005082 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	8b12      	ldrh	r2, [r2, #24]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d90c      	bls.n	8004fae <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8b1a      	ldrh	r2, [r3, #24]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	7b58      	ldrb	r0, [r3, #13]
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f001 fc49 	bl	800683e <USBH_BulkSendData>
 8004fac:	e00c      	b.n	8004fc8 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	7b58      	ldrb	r0, [r3, #13]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 fc3b 	bl	800683e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8004fd0:	e057      	b.n	8005082 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	7b5b      	ldrb	r3, [r3, #13]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f004 fe35 	bl	8009c48 <USBH_LL_GetURBState>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8004fe2:	7afb      	ldrb	r3, [r7, #11]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d136      	bne.n	8005056 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	8b12      	ldrh	r2, [r2, #24]
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d90e      	bls.n	8005012 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	8b12      	ldrh	r2, [r2, #24]
 8004ffc:	1a9a      	subs	r2, r3, r2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	8b12      	ldrh	r2, [r2, #24]
 800500a:	441a      	add	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	61da      	str	r2, [r3, #28]
 8005010:	e002      	b.n	8005018 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005028:	e006      	b.n	8005038 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f892 	bl	800515c <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2204      	movs	r2, #4
 800503c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800504c:	2200      	movs	r2, #0
 800504e:	4619      	mov	r1, r3
 8005050:	f001 fd7e 	bl	8006b50 <osMessagePut>
    break;
 8005054:	e014      	b.n	8005080 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8005056:	7afb      	ldrb	r3, [r7, #11]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d111      	bne.n	8005080 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2204      	movs	r2, #4
 8005068:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005078:	2200      	movs	r2, #0
 800507a:	4619      	mov	r1, r3
 800507c:	f001 fd68 	bl	8006b50 <osMessagePut>
    break;
 8005080:	bf00      	nop
  }
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800509c:	2300      	movs	r3, #0
 800509e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d002      	beq.n	80050b0 <CDC_ProcessReception+0x26>
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d00e      	beq.n	80050cc <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80050ae:	e051      	b.n	8005154 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	6a19      	ldr	r1, [r3, #32]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	8b5a      	ldrh	r2, [r3, #26]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	7b1b      	ldrb	r3, [r3, #12]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 fbe3 	bl	8006888 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2204      	movs	r2, #4
 80050c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80050ca:	e043      	b.n	8005154 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	7b1b      	ldrb	r3, [r3, #12]
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f004 fdb8 	bl	8009c48 <USBH_LL_GetURBState>
 80050d8:	4603      	mov	r3, r0
 80050da:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d137      	bne.n	8005152 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	7b1b      	ldrb	r3, [r3, #12]
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f004 fd1b 	bl	8009b24 <USBH_LL_GetLastXferSize>
 80050ee:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d016      	beq.n	8005128 <CDC_ProcessReception+0x9e>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	8b5b      	ldrh	r3, [r3, #26]
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4293      	cmp	r3, r2
 8005104:	d910      	bls.n	8005128 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	441a      	add	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2203      	movs	r2, #3
 8005122:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005126:	e006      	b.n	8005136 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f81d 	bl	8005170 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2204      	movs	r2, #4
 800513a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800514a:	2200      	movs	r2, #0
 800514c:	4619      	mov	r1, r3
 800514e:	f001 fcff 	bl	8006b50 <osMessagePut>
    break;
 8005152:	bf00      	nop
  }
}
 8005154:	bf00      	nop
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	b090      	sub	sp, #64	; 0x40
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80051ac:	2302      	movs	r3, #2
 80051ae:	e03d      	b.n	800522c <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	79fa      	ldrb	r2, [r7, #7]
 80051b4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f837 	bl	800523c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80051dc:	4b15      	ldr	r3, [pc, #84]	; (8005234 <USBH_Init+0x9c>)
 80051de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80051e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 80051e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 fc85 	bl	8006afe <osMessageCreate>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <USBH_Init+0xa0>)
 80051fe:	f107 0414 	add.w	r4, r7, #20
 8005202:	461d      	mov	r5, r3
 8005204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800520c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	68f9      	ldr	r1, [r7, #12]
 8005216:	4618      	mov	r0, r3
 8005218:	f001 fc11 	bl	8006a3e <osThreadCreate>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f004 fbcb 	bl	80099c0 <USBH_LL_Init>

  return USBH_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3740      	adds	r7, #64	; 0x40
 8005230:	46bd      	mov	sp, r7
 8005232:	bdb0      	pop	{r4, r5, r7, pc}
 8005234:	0800a028 	.word	0x0800a028
 8005238:	0800a044 	.word	0x0800a044

0800523c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005248:	e008      	b.n	800525c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	32e0      	adds	r2, #224	; 0xe0
 8005250:	2100      	movs	r1, #0
 8005252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b0e      	cmp	r3, #14
 8005260:	d9f3      	bls.n	800524a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e009      	b.n	800527c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005282:	d3f1      	bcc.n	8005268 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10f      	bne.n	800530c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052f2:	1c59      	adds	r1, r3, #1
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	33dc      	adds	r3, #220	; 0xdc
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	e004      	b.n	8005316 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800530c:	2302      	movs	r3, #2
 800530e:	73fb      	strb	r3, [r7, #15]
 8005310:	e001      	b.n	8005316 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005312:	2302      	movs	r3, #2
 8005314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	429a      	cmp	r2, r3
 800533e:	d204      	bcs.n	800534a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005348:	e001      	b.n	800534e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800534a:	2302      	movs	r3, #2
 800534c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	4608      	mov	r0, r1
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	4603      	mov	r3, r0
 800536c:	70fb      	strb	r3, [r7, #3]
 800536e:	460b      	mov	r3, r1
 8005370:	70bb      	strb	r3, [r7, #2]
 8005372:	4613      	mov	r3, r2
 8005374:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005384:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005386:	e025      	b.n	80053d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	221a      	movs	r2, #26
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	3308      	adds	r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	3302      	adds	r3, #2
 8005398:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	795b      	ldrb	r3, [r3, #5]
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d002      	beq.n	80053aa <USBH_FindInterface+0x4e>
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	2bff      	cmp	r3, #255	; 0xff
 80053a8:	d111      	bne.n	80053ce <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80053ae:	78ba      	ldrb	r2, [r7, #2]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d002      	beq.n	80053ba <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80053b4:	78bb      	ldrb	r3, [r7, #2]
 80053b6:	2bff      	cmp	r3, #255	; 0xff
 80053b8:	d109      	bne.n	80053ce <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80053be:	787a      	ldrb	r2, [r7, #1]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d002      	beq.n	80053ca <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80053c4:	787b      	ldrb	r3, [r7, #1]
 80053c6:	2bff      	cmp	r3, #255	; 0xff
 80053c8:	d101      	bne.n	80053ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	e006      	b.n	80053dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	3301      	adds	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d9d6      	bls.n	8005388 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80053da:	23ff      	movs	r3, #255	; 0xff
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f004 fb21 	bl	8009a38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80053f6:	2101      	movs	r1, #1
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f004 fc38 	bl	8009c6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af04      	add	r7, sp, #16
 800540e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005410:	2302      	movs	r3, #2
 8005412:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fb7e 	bl	8005b1a <USBH_IsPortEnabled>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10c      	bne.n	800543e <USBH_Process+0x36>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d002      	beq.n	800543e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2203      	movs	r2, #3
 800543c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b0b      	cmp	r3, #11
 8005446:	f200 81ab 	bhi.w	80057a0 <USBH_Process+0x398>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <USBH_Process+0x48>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005481 	.word	0x08005481
 8005454:	080054bf 	.word	0x080054bf
 8005458:	080054d3 	.word	0x080054d3
 800545c:	0800577b 	.word	0x0800577b
 8005460:	080057a1 	.word	0x080057a1
 8005464:	0800557d 	.word	0x0800557d
 8005468:	08005715 	.word	0x08005715
 800546c:	080055ad 	.word	0x080055ad
 8005470:	080055e9 	.word	0x080055e9
 8005474:	08005623 	.word	0x08005623
 8005478:	0800566b 	.word	0x0800566b
 800547c:	08005763 	.word	0x08005763
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 818b 	beq.w	80057a4 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005494:	20c8      	movs	r0, #200	; 0xc8
 8005496:	f004 fc34 	bl	8009d02 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f004 fb27 	bl	8009aee <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80054b4:	2200      	movs	r2, #0
 80054b6:	4619      	mov	r1, r3
 80054b8:	f001 fb4a 	bl	8006b50 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80054bc:	e172      	b.n	80057a4 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f040 816f 	bne.w	80057a8 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	701a      	strb	r2, [r3, #0]
    }
    break;
 80054d0:	e16a      	b.n	80057a8 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80054d2:	2064      	movs	r0, #100	; 0x64
 80054d4:	f004 fc15 	bl	8009d02 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f004 fae3 	bl	8009aa4 <USBH_LL_GetSpeed>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2205      	movs	r2, #5
 80054ec:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80054ee:	2100      	movs	r1, #0
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 fa16 	bl	8006922 <USBH_AllocPipe>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 fa0e 	bl	8006922 <USBH_AllocPipe>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7919      	ldrb	r1, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005522:	b292      	uxth	r2, r2
 8005524:	9202      	str	r2, [sp, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	9201      	str	r2, [sp, #4]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4603      	mov	r3, r0
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 f9c7 	bl	80068c4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	7959      	ldrb	r1, [r3, #5]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800554a:	b292      	uxth	r2, r2
 800554c:	9202      	str	r2, [sp, #8]
 800554e:	2200      	movs	r2, #0
 8005550:	9201      	str	r2, [sp, #4]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4603      	mov	r3, r0
 8005556:	2200      	movs	r2, #0
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 f9b3 	bl	80068c4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005572:	2200      	movs	r2, #0
 8005574:	4619      	mov	r1, r3
 8005576:	f001 faeb 	bl	8006b50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800557a:	e120      	b.n	80057be <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f923 	bl	80057c8 <USBH_HandleEnum>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 8111 	bne.w	80057ac <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005598:	2b01      	cmp	r3, #1
 800559a:	d103      	bne.n	80055a4 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2208      	movs	r2, #8
 80055a0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80055a2:	e103      	b.n	80057ac <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2207      	movs	r2, #7
 80055a8:	701a      	strb	r2, [r3, #0]
    break;
 80055aa:	e0ff      	b.n	80057ac <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80fc 	beq.w	80057b0 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80055be:	2101      	movs	r1, #1
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2208      	movs	r2, #8
 80055c8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2205      	movs	r2, #5
 80055ce:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80055de:	2200      	movs	r2, #0
 80055e0:	4619      	mov	r1, r3
 80055e2:	f001 fab5 	bl	8006b50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80055e6:	e0e3      	b.n	80057b0 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fc09 	bl	8005e0a <USBH_SetCfg>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2209      	movs	r2, #9
 8005602:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005618:	2200      	movs	r2, #0
 800561a:	4619      	mov	r1, r3
 800561c:	f001 fa98 	bl	8006b50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005620:	e0cd      	b.n	80057be <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005630:	2101      	movs	r1, #1
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fc0c 	bl	8005e50 <USBH_SetFeature>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	220a      	movs	r2, #10
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e002      	b.n	800564c <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	220a      	movs	r2, #10
 800564a:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005660:	2200      	movs	r2, #0
 8005662:	4619      	mov	r1, r3
 8005664:	f001 fa74 	bl	8006b50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005668:	e0a9      	b.n	80057be <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d040      	beq.n	80056f6 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e017      	b.n	80056b2 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	33dc      	adds	r3, #220	; 0xdc
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	791a      	ldrb	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005696:	429a      	cmp	r2, r3
 8005698:	d108      	bne.n	80056ac <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	33dc      	adds	r3, #220	; 0xdc
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	3301      	adds	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0e4      	beq.n	8005682 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2206      	movs	r2, #6
 80056d8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80056e0:	2103      	movs	r1, #3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
 80056e6:	e006      	b.n	80056f6 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	220d      	movs	r2, #13
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e002      	b.n	80056f6 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	220d      	movs	r2, #13
 80056f4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2205      	movs	r2, #5
 80056fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800570a:	2200      	movs	r2, #0
 800570c:	4619      	mov	r1, r3
 800570e:	f001 fa1f 	bl	8006b50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005712:	e054      	b.n	80057be <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	4603      	mov	r3, r0
 800572c:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d13e      	bne.n	80057b4 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	220b      	movs	r2, #11
 800573a:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800573c:	e03a      	b.n	80057b4 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	220d      	movs	r2, #13
 8005742:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2205      	movs	r2, #5
 8005748:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005758:	2200      	movs	r2, #0
 800575a:	4619      	mov	r1, r3
 800575c:	f001 f9f8 	bl	8006b50 <osMessagePut>
    break;
 8005760:	e028      	b.n	80057b4 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005768:	2b00      	cmp	r3, #0
 800576a:	d025      	beq.n	80057b8 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
    }
    break;
 8005778:	e01e      	b.n	80057b8 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fd5e 	bl	800523c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005786:	2b00      	cmp	r3, #0
 8005788:	d018      	beq.n	80057bc <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800579e:	e00d      	b.n	80057bc <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 80057a0:	bf00      	nop
 80057a2:	e00c      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057a4:	bf00      	nop
 80057a6:	e00a      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057a8:	bf00      	nop
 80057aa:	e008      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057ac:	bf00      	nop
 80057ae:	e006      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057b0:	bf00      	nop
 80057b2:	e004      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <USBH_Process+0x3b6>
    break;
 80057bc:	bf00      	nop
  }
 return USBH_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af04      	add	r7, sp, #16
 80057ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b07      	cmp	r3, #7
 80057da:	f200 8132 	bhi.w	8005a42 <USBH_HandleEnum+0x27a>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <USBH_HandleEnum+0x1c>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005805 	.word	0x08005805
 80057e8:	08005877 	.word	0x08005877
 80057ec:	0800588f 	.word	0x0800588f
 80057f0:	08005905 	.word	0x08005905
 80057f4:	0800591d 	.word	0x0800591d
 80057f8:	0800593b 	.word	0x0800593b
 80057fc:	080059a7 	.word	0x080059a7
 8005800:	080059f7 	.word	0x080059f7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005804:	2108      	movs	r1, #8
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa2f 	bl	8005c6a <USBH_Get_DevDesc>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 8119 	bne.w	8005a46 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	7919      	ldrb	r1, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005838:	b292      	uxth	r2, r2
 800583a:	9202      	str	r2, [sp, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	9201      	str	r2, [sp, #4]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4603      	mov	r3, r0
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 f83c 	bl	80068c4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	7959      	ldrb	r1, [r3, #5]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005860:	b292      	uxth	r2, r2
 8005862:	9202      	str	r2, [sp, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	9201      	str	r2, [sp, #4]
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4603      	mov	r3, r0
 800586c:	2200      	movs	r2, #0
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 f828 	bl	80068c4 <USBH_OpenPipe>

    }
    break;
 8005874:	e0e7      	b.n	8005a46 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005876:	2112      	movs	r1, #18
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f9f6 	bl	8005c6a <USBH_Get_DevDesc>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 80e2 	bne.w	8005a4a <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800588c:	e0dd      	b.n	8005a4a <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800588e:	2101      	movs	r1, #1
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa96 	bl	8005dc2 <USBH_SetAddress>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	f040 80d8 	bne.w	8005a4e <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800589e:	2002      	movs	r0, #2
 80058a0:	f004 fa2f 	bl	8009d02 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2203      	movs	r2, #3
 80058b0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7919      	ldrb	r1, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80058c6:	b292      	uxth	r2, r2
 80058c8:	9202      	str	r2, [sp, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	9201      	str	r2, [sp, #4]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	4603      	mov	r3, r0
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fff5 	bl	80068c4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7959      	ldrb	r1, [r3, #5]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80058ee:	b292      	uxth	r2, r2
 80058f0:	9202      	str	r2, [sp, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	9201      	str	r2, [sp, #4]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4603      	mov	r3, r0
 80058fa:	2200      	movs	r2, #0
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 ffe1 	bl	80068c4 <USBH_OpenPipe>
    }
    break;
 8005902:	e0a4      	b.n	8005a4e <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8005904:	2109      	movs	r1, #9
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9d7 	bl	8005cba <USBH_Get_CfgDesc>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 809f 	bne.w	8005a52 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2204      	movs	r2, #4
 8005918:	705a      	strb	r2, [r3, #1]
    }
    break;
 800591a:	e09a      	b.n	8005a52 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f9c8 	bl	8005cba <USBH_Get_CfgDesc>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 8092 	bne.w	8005a56 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2205      	movs	r2, #5
 8005936:	705a      	strb	r2, [r3, #1]
    }
    break;
 8005938:	e08d      	b.n	8005a56 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01e      	beq.n	8005982 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8005950:	23ff      	movs	r3, #255	; 0xff
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9d5 	bl	8005d02 <USBH_Get_StringDesc>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d17d      	bne.n	8005a5a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2206      	movs	r2, #6
 8005962:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2205      	movs	r2, #5
 8005968:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005978:	2200      	movs	r2, #0
 800597a:	4619      	mov	r1, r3
 800597c:	f001 f8e8 	bl	8006b50 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005980:	e06b      	b.n	8005a5a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2206      	movs	r2, #6
 8005986:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2205      	movs	r2, #5
 800598c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800599c:	2200      	movs	r2, #0
 800599e:	4619      	mov	r1, r3
 80059a0:	f001 f8d6 	bl	8006b50 <osMessagePut>
    break;
 80059a4:	e059      	b.n	8005a5a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80059bc:	23ff      	movs	r3, #255	; 0xff
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f99f 	bl	8005d02 <USBH_Get_StringDesc>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d149      	bne.n	8005a5e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2207      	movs	r2, #7
 80059ce:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80059d0:	e045      	b.n	8005a5e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2207      	movs	r2, #7
 80059d6:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2205      	movs	r2, #5
 80059dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80059ec:	2200      	movs	r2, #0
 80059ee:	4619      	mov	r1, r3
 80059f0:	f001 f8ae 	bl	8006b50 <osMessagePut>
    break;
 80059f4:	e033      	b.n	8005a5e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00f      	beq.n	8005a20 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8005a0c:	23ff      	movs	r3, #255	; 0xff
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f977 	bl	8005d02 <USBH_Get_StringDesc>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d123      	bne.n	8005a62 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005a1e:	e020      	b.n	8005a62 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2205      	movs	r2, #5
 8005a28:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f001 f888 	bl	8006b50 <osMessagePut>
    break;
 8005a40:	e00f      	b.n	8005a62 <USBH_HandleEnum+0x29a>

  default:
    break;
 8005a42:	bf00      	nop
 8005a44:	e00e      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a46:	bf00      	nop
 8005a48:	e00c      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a4a:	bf00      	nop
 8005a4c:	e00a      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a4e:	bf00      	nop
 8005a50:	e008      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a52:	bf00      	nop
 8005a54:	e006      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a56:	bf00      	nop
 8005a58:	e004      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a5a:	bf00      	nop
 8005a5c:	e002      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <USBH_HandleEnum+0x29c>
    break;
 8005a62:	bf00      	nop
  }
  return Status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop

08005a70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f804 	bl	8005ab2 <USBH_HandleSof>
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b0b      	cmp	r3, #11
 8005ac2:	d10a      	bne.n	8005ada <USBH_HandleSof+0x28>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
  }
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005af2:	bf00      	nop
}
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005b0e:	bf00      	nop
}
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10f      	bne.n	8005b66 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00e      	beq.n	8005b76 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b5e:	2104      	movs	r1, #4
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
 8005b64:	e007      	b.n	8005b76 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d102      	bne.n	8005b76 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f000 ffdf 	bl	8006b50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f003 ff62 	bl	8009a6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fed4 	bl	800695e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	795b      	ldrb	r3, [r3, #5]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fece 	bl	800695e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005bda:	2105      	movs	r1, #5
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f003 ff29 	bl	8009a38 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2203      	movs	r2, #3
 8005bea:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c00:	2200      	movs	r2, #0
 8005c02:	4619      	mov	r1, r3
 8005c04:	f000 ffa4 	bl	8006b50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 ffd1 	bl	8006bd0 <osMessageGet>
    if(event.status == osEventMessage)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d1f2      	bne.n	8005c1a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff fbe7 	bl	8005408 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8005c3a:	e7ee      	b.n	8005c1a <USBH_Process_OS+0x8>

08005c3c <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f000 ff78 	bl	8006b50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af02      	add	r7, sp, #8
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f864 	bl	8005d58 <USBH_GetDescriptor>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	b292      	uxth	r2, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f000 f918 	bl	8005ee0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af02      	add	r7, sp, #8
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	331c      	adds	r3, #28
 8005cca:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8005ccc:	887b      	ldrh	r3, [r7, #2]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f83d 	bl	8005d58 <USBH_GetDescriptor>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	72fb      	strb	r3, [r7, #11]
 8005ce2:	7afb      	ldrb	r3, [r7, #11]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d107      	bne.n	8005cf8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f964 	bl	8005fc0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af02      	add	r7, sp, #8
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	460b      	mov	r3, r1
 8005d10:	72fb      	strb	r3, [r7, #11]
 8005d12:	4613      	mov	r3, r2
 8005d14:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005d1e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8005d26:	893b      	ldrh	r3, [r7, #8]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f812 	bl	8005d58 <USBH_GetDescriptor>
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d107      	bne.n	8005d4e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d44:	893a      	ldrh	r2, [r7, #8]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fa37 	bl	80061bc <USBH_ParseStringDesc>
  }
  return status;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	72fb      	strb	r3, [r7, #11]
 8005d66:	4613      	mov	r3, r2
 8005d68:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	789b      	ldrb	r3, [r3, #2]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d11c      	bne.n	8005dac <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2206      	movs	r2, #6
 8005d82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	893a      	ldrh	r2, [r7, #8]
 8005d88:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d94:	d104      	bne.n	8005da0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f240 4209 	movw	r2, #1033	; 0x409
 8005d9c:	829a      	strh	r2, [r3, #20]
 8005d9e:	e002      	b.n	8005da6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8b3a      	ldrh	r2, [r7, #24]
 8005daa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8005dac:	8b3b      	ldrh	r3, [r7, #24]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fa50 	bl	8006258 <USBH_CtlReq>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	789b      	ldrb	r3, [r3, #2]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10f      	bne.n	8005df6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2205      	movs	r2, #5
 8005de0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005df6:	2200      	movs	r2, #0
 8005df8:	2100      	movs	r1, #0
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa2c 	bl	8006258 <USBH_CtlReq>
 8005e00:	4603      	mov	r3, r0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	789b      	ldrb	r3, [r3, #2]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d10e      	bne.n	8005e3c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2209      	movs	r2, #9
 8005e28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	887a      	ldrh	r2, [r7, #2]
 8005e2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2100      	movs	r1, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fa09 	bl	8006258 <USBH_CtlReq>
 8005e46:	4603      	mov	r3, r0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	789b      	ldrb	r3, [r3, #2]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10f      	bne.n	8005e84 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005e84:	2200      	movs	r2, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f9e5 	bl	8006258 <USBH_CtlReq>
 8005e8e:	4603      	mov	r3, r0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	789b      	ldrb	r3, [r3, #2]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10f      	bne.n	8005ecc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9c1 	bl	8006258 <USBH_CtlReq>
 8005ed6:	4603      	mov	r3, r0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	785a      	ldrb	r2, [r3, #1]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	3302      	adds	r3, #2
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	3303      	adds	r3, #3
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	791a      	ldrb	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	795a      	ldrb	r2, [r3, #5]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	799a      	ldrb	r2, [r3, #6]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	79da      	ldrb	r2, [r3, #7]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d939      	bls.n	8005fb4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3308      	adds	r3, #8
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	3309      	adds	r3, #9
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	330a      	adds	r3, #10
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	330b      	adds	r3, #11
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4313      	orrs	r3, r2
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	330d      	adds	r3, #13
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	7b9a      	ldrb	r2, [r3, #14]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	7bda      	ldrb	r2, [r3, #15]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	7c1a      	ldrb	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	7c5a      	ldrb	r2, [r3, #17]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	745a      	strb	r2, [r3, #17]
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	785a      	ldrb	r2, [r3, #1]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3303      	adds	r3, #3
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	b29b      	uxth	r3, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	791a      	ldrb	r2, [r3, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	795a      	ldrb	r2, [r3, #5]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	799a      	ldrb	r2, [r3, #6]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	79da      	ldrb	r2, [r3, #7]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	7a1a      	ldrb	r2, [r3, #8]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b09      	cmp	r3, #9
 800603a:	d95f      	bls.n	80060fc <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800603c:	2309      	movs	r3, #9
 800603e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006044:	e051      	b.n	80060ea <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006046:	f107 0316 	add.w	r3, r7, #22
 800604a:	4619      	mov	r1, r3
 800604c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800604e:	f000 f8e8 	bl	8006222 <USBH_GetNextDesc>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d146      	bne.n	80060ea <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800605c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006060:	221a      	movs	r2, #26
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	3308      	adds	r3, #8
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	3302      	adds	r3, #2
 800606e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006072:	69f8      	ldr	r0, [r7, #28]
 8006074:	f000 f846 	bl	8006104 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800607e:	2300      	movs	r3, #0
 8006080:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006082:	e022      	b.n	80060ca <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006084:	f107 0316 	add.w	r3, r7, #22
 8006088:	4619      	mov	r1, r3
 800608a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800608c:	f000 f8c9 	bl	8006222 <USBH_GetNextDesc>
 8006090:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d117      	bne.n	80060ca <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800609a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800609e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80060a2:	3201      	adds	r2, #1
 80060a4:	00d2      	lsls	r2, r2, #3
 80060a6:	211a      	movs	r1, #26
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	3308      	adds	r3, #8
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80060b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ba:	69b8      	ldr	r0, [r7, #24]
 80060bc:	f000 f851 	bl	8006162 <USBH_ParseEPDesc>
            ep_ix++;
 80060c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80060c4:	3301      	adds	r3, #1
 80060c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	791b      	ldrb	r3, [r3, #4]
 80060ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d204      	bcs.n	80060e0 <USBH_ParseCfgDesc+0x120>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	885a      	ldrh	r2, [r3, #2]
 80060da:	8afb      	ldrh	r3, [r7, #22]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d8d1      	bhi.n	8006084 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80060e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e4:	3301      	adds	r3, #1
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80060ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d804      	bhi.n	80060fc <USBH_ParseCfgDesc+0x13c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	885a      	ldrh	r2, [r3, #2]
 80060f6:	8afb      	ldrh	r3, [r7, #22]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d8a4      	bhi.n	8006046 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	3728      	adds	r7, #40	; 0x28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	785a      	ldrb	r2, [r3, #1]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	789a      	ldrb	r2, [r3, #2]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	78da      	ldrb	r2, [r3, #3]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	791a      	ldrb	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	795a      	ldrb	r2, [r3, #5]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	799a      	ldrb	r2, [r3, #6]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	79da      	ldrb	r2, [r3, #7]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	7a1a      	ldrb	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	721a      	strb	r2, [r3, #8]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785a      	ldrb	r2, [r3, #1]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	789a      	ldrb	r2, [r3, #2]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	78da      	ldrb	r2, [r3, #3]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	b29a      	uxth	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	3305      	adds	r3, #5
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	799a      	ldrb	r2, [r3, #6]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	719a      	strb	r2, [r3, #6]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3301      	adds	r3, #1
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d120      	bne.n	8006216 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	1e9a      	subs	r2, r3, #2
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	4293      	cmp	r3, r2
 80061de:	bf28      	it	cs
 80061e0:	4613      	movcs	r3, r2
 80061e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3302      	adds	r3, #2
 80061e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80061ea:	2300      	movs	r3, #0
 80061ec:	82fb      	strh	r3, [r7, #22]
 80061ee:	e00b      	b.n	8006208 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80061f0:	8afb      	ldrh	r3, [r7, #22]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	3301      	adds	r3, #1
 8006200:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006202:	8afb      	ldrh	r3, [r7, #22]
 8006204:	3302      	adds	r3, #2
 8006206:	82fb      	strh	r3, [r7, #22]
 8006208:	8afa      	ldrh	r2, [r7, #22]
 800620a:	8abb      	ldrh	r3, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3ef      	bcc.n	80061f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
  }
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	881a      	ldrh	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	4413      	add	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	789b      	ldrb	r3, [r3, #2]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d002      	beq.n	8006278 <USBH_CtlReq+0x20>
 8006272:	2b02      	cmp	r3, #2
 8006274:	d01d      	beq.n	80062b2 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8006276:	e042      	b.n	80062fe <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2203      	movs	r2, #3
 8006298:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062a8:	2200      	movs	r2, #0
 80062aa:	4619      	mov	r1, r3
 80062ac:	f000 fc50 	bl	8006b50 <osMessagePut>
    break;
 80062b0:	e025      	b.n	80062fe <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f828 	bl	8006308 <USBH_HandleControl>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d108      	bne.n	80062d4 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	75fb      	strb	r3, [r7, #23]
    break;
 80062d2:	e013      	b.n	80062fc <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d108      	bne.n	80062ec <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80062e6:	2303      	movs	r3, #3
 80062e8:	75fb      	strb	r3, [r7, #23]
    break;
 80062ea:	e007      	b.n	80062fc <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d104      	bne.n	80062fc <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80062f8:	2302      	movs	r3, #2
 80062fa:	75fb      	strb	r3, [r7, #23]
    break;
 80062fc:	bf00      	nop
  }
  return status;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
 800630e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006314:	2300      	movs	r3, #0
 8006316:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7e1b      	ldrb	r3, [r3, #24]
 800631c:	3b01      	subs	r3, #1
 800631e:	2b0a      	cmp	r3, #10
 8006320:	f200 821f 	bhi.w	8006762 <USBH_HandleControl+0x45a>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <USBH_HandleControl+0x24>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006359 	.word	0x08006359
 8006330:	08006373 	.word	0x08006373
 8006334:	08006415 	.word	0x08006415
 8006338:	0800643b 	.word	0x0800643b
 800633c:	080064c7 	.word	0x080064c7
 8006340:	080064f3 	.word	0x080064f3
 8006344:	080065b5 	.word	0x080065b5
 8006348:	080065d7 	.word	0x080065d7
 800634c:	08006669 	.word	0x08006669
 8006350:	08006691 	.word	0x08006691
 8006354:	08006723 	.word	0x08006723
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f103 0110 	add.w	r1, r3, #16
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	795b      	ldrb	r3, [r3, #5]
 8006362:	461a      	mov	r2, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fa0d 	bl	8006784 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	761a      	strb	r2, [r3, #24]
    break;
 8006370:	e202      	b.n	8006778 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	795b      	ldrb	r3, [r3, #5]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f003 fc65 	bl	8009c48 <USBH_LL_GetURBState>
 800637e:	4603      	mov	r3, r0
 8006380:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d12c      	bne.n	80063e2 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1b      	ldrb	r3, [r3, #16]
 800638c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006390:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8adb      	ldrh	r3, [r3, #22]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800639a:	7b7b      	ldrb	r3, [r7, #13]
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d103      	bne.n	80063a8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2203      	movs	r2, #3
 80063a4:	761a      	strb	r2, [r3, #24]
 80063a6:	e00d      	b.n	80063c4 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2205      	movs	r2, #5
 80063ac:	761a      	strb	r2, [r3, #24]
 80063ae:	e009      	b.n	80063c4 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80063b0:	7b7b      	ldrb	r3, [r7, #13]
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d103      	bne.n	80063be <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2209      	movs	r2, #9
 80063ba:	761a      	strb	r2, [r3, #24]
 80063bc:	e002      	b.n	80063c4 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2207      	movs	r2, #7
 80063c2:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2203      	movs	r2, #3
 80063c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063d8:	2200      	movs	r2, #0
 80063da:	4619      	mov	r1, r3
 80063dc:	f000 fbb8 	bl	8006b50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80063e0:	e1c1      	b.n	8006766 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d003      	beq.n	80063f0 <USBH_HandleControl+0xe8>
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	f040 81bb 	bne.w	8006766 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	220b      	movs	r2, #11
 80063f4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2203      	movs	r2, #3
 80063fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800640a:	2200      	movs	r2, #0
 800640c:	4619      	mov	r1, r3
 800640e:	f000 fb9f 	bl	8006b50 <osMessagePut>
    break;
 8006412:	e1a8      	b.n	8006766 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6899      	ldr	r1, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	899a      	ldrh	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	791b      	ldrb	r3, [r3, #4]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9e8 	bl	8006802 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	761a      	strb	r2, [r3, #24]
    break;
 8006438:	e19e      	b.n	8006778 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	791b      	ldrb	r3, [r3, #4]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f003 fc01 	bl	8009c48 <USBH_LL_GetURBState>
 8006446:	4603      	mov	r3, r0
 8006448:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d110      	bne.n	8006472 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2209      	movs	r2, #9
 8006454:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2203      	movs	r2, #3
 800645a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800646a:	2200      	movs	r2, #0
 800646c:	4619      	mov	r1, r3
 800646e:	f000 fb6f 	bl	8006b50 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b05      	cmp	r3, #5
 8006476:	d110      	bne.n	800649a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006478:	2303      	movs	r3, #3
 800647a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2203      	movs	r2, #3
 8006480:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006490:	2200      	movs	r2, #0
 8006492:	4619      	mov	r1, r3
 8006494:	f000 fb5c 	bl	8006b50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006498:	e167      	b.n	800676a <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b04      	cmp	r3, #4
 800649e:	f040 8164 	bne.w	800676a <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	220b      	movs	r2, #11
 80064a6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2203      	movs	r2, #3
 80064ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064bc:	2200      	movs	r2, #0
 80064be:	4619      	mov	r1, r3
 80064c0:	f000 fb46 	bl	8006b50 <osMessagePut>
    break;
 80064c4:	e151      	b.n	800676a <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6899      	ldr	r1, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	899a      	ldrh	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7958      	ldrb	r0, [r3, #5]
 80064d2:	2301      	movs	r3, #1
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4603      	mov	r3, r0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f96d 	bl	80067b8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2206      	movs	r2, #6
 80064ee:	761a      	strb	r2, [r3, #24]
    break;
 80064f0:	e142      	b.n	8006778 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f003 fba5 	bl	8009c48 <USBH_LL_GetURBState>
 80064fe:	4603      	mov	r3, r0
 8006500:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d111      	bne.n	800652c <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2207      	movs	r2, #7
 800650c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2203      	movs	r2, #3
 8006512:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006522:	2200      	movs	r2, #0
 8006524:	4619      	mov	r1, r3
 8006526:	f000 fb13 	bl	8006b50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800652a:	e120      	b.n	800676e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	2b05      	cmp	r3, #5
 8006530:	d113      	bne.n	800655a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	220c      	movs	r2, #12
 8006536:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006538:	2303      	movs	r3, #3
 800653a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2203      	movs	r2, #3
 8006540:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006550:	2200      	movs	r2, #0
 8006552:	4619      	mov	r1, r3
 8006554:	f000 fafc 	bl	8006b50 <osMessagePut>
    break;
 8006558:	e109      	b.n	800676e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d111      	bne.n	8006584 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2205      	movs	r2, #5
 8006564:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2203      	movs	r2, #3
 800656a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800657a:	2200      	movs	r2, #0
 800657c:	4619      	mov	r1, r3
 800657e:	f000 fae7 	bl	8006b50 <osMessagePut>
    break;
 8006582:	e0f4      	b.n	800676e <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b04      	cmp	r3, #4
 8006588:	f040 80f1 	bne.w	800676e <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	220b      	movs	r2, #11
 8006590:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006592:	2302      	movs	r3, #2
 8006594:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2203      	movs	r2, #3
 800659a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065aa:	2200      	movs	r2, #0
 80065ac:	4619      	mov	r1, r3
 80065ae:	f000 facf 	bl	8006b50 <osMessagePut>
    break;
 80065b2:	e0dc      	b.n	800676e <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	791b      	ldrb	r3, [r3, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2100      	movs	r1, #0
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f920 	bl	8006802 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2208      	movs	r2, #8
 80065d2:	761a      	strb	r2, [r3, #24]

    break;
 80065d4:	e0d0      	b.n	8006778 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	791b      	ldrb	r3, [r3, #4]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f003 fb33 	bl	8009c48 <USBH_LL_GetURBState>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d113      	bne.n	8006614 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	220d      	movs	r2, #13
 80065f0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2203      	movs	r2, #3
 80065fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800660a:	2200      	movs	r2, #0
 800660c:	4619      	mov	r1, r3
 800660e:	f000 fa9f 	bl	8006b50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006612:	e0ae      	b.n	8006772 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b04      	cmp	r3, #4
 8006618:	d111      	bne.n	800663e <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	220b      	movs	r2, #11
 800661e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2203      	movs	r2, #3
 8006624:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006634:	2200      	movs	r2, #0
 8006636:	4619      	mov	r1, r3
 8006638:	f000 fa8a 	bl	8006b50 <osMessagePut>
    break;
 800663c:	e099      	b.n	8006772 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b05      	cmp	r3, #5
 8006642:	f040 8096 	bne.w	8006772 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8006646:	2303      	movs	r3, #3
 8006648:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2203      	movs	r2, #3
 800664e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800665e:	2200      	movs	r2, #0
 8006660:	4619      	mov	r1, r3
 8006662:	f000 fa75 	bl	8006b50 <osMessagePut>
    break;
 8006666:	e084      	b.n	8006772 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	795a      	ldrb	r2, [r3, #5]
 800666c:	2301      	movs	r3, #1
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f89e 	bl	80067b8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	220a      	movs	r2, #10
 800668c:	761a      	strb	r2, [r3, #24]
    break;
 800668e:	e073      	b.n	8006778 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	795b      	ldrb	r3, [r3, #5]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f003 fad6 	bl	8009c48 <USBH_LL_GetURBState>
 800669c:	4603      	mov	r3, r0
 800669e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d113      	bne.n	80066ce <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	220d      	movs	r2, #13
 80066ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2203      	movs	r2, #3
 80066b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066c4:	2200      	movs	r2, #0
 80066c6:	4619      	mov	r1, r3
 80066c8:	f000 fa42 	bl	8006b50 <osMessagePut>
#endif
#endif
      }

    }
    break;
 80066cc:	e053      	b.n	8006776 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d111      	bne.n	80066f8 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2209      	movs	r2, #9
 80066d8:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2203      	movs	r2, #3
 80066de:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066ee:	2200      	movs	r2, #0
 80066f0:	4619      	mov	r1, r3
 80066f2:	f000 fa2d 	bl	8006b50 <osMessagePut>
    break;
 80066f6:	e03e      	b.n	8006776 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d13b      	bne.n	8006776 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	220b      	movs	r2, #11
 8006702:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2203      	movs	r2, #3
 8006708:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006718:	2200      	movs	r2, #0
 800671a:	4619      	mov	r1, r3
 800671c:	f000 fa18 	bl	8006b50 <osMessagePut>
    break;
 8006720:	e029      	b.n	8006776 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7e5b      	ldrb	r3, [r3, #25]
 8006726:	3301      	adds	r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	765a      	strb	r2, [r3, #25]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7e5b      	ldrb	r3, [r3, #25]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d809      	bhi.n	800674a <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f003 f999 	bl	8009a6e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006748:	e016      	b.n	8006778 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006750:	2106      	movs	r1, #6
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800675c:	2302      	movs	r3, #2
 800675e:	73fb      	strb	r3, [r7, #15]
    break;
 8006760:	e00a      	b.n	8006778 <USBH_HandleControl+0x470>

  default:
    break;
 8006762:	bf00      	nop
 8006764:	e008      	b.n	8006778 <USBH_HandleControl+0x470>
    break;
 8006766:	bf00      	nop
 8006768:	e006      	b.n	8006778 <USBH_HandleControl+0x470>
    break;
 800676a:	bf00      	nop
 800676c:	e004      	b.n	8006778 <USBH_HandleControl+0x470>
    break;
 800676e:	bf00      	nop
 8006770:	e002      	b.n	8006778 <USBH_HandleControl+0x470>
    break;
 8006772:	bf00      	nop
 8006774:	e000      	b.n	8006778 <USBH_HandleControl+0x470>
    break;
 8006776:	bf00      	nop
  }
  return status;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af04      	add	r7, sp, #16
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006792:	79f9      	ldrb	r1, [r7, #7]
 8006794:	2300      	movs	r3, #0
 8006796:	9303      	str	r3, [sp, #12]
 8006798:	2308      	movs	r3, #8
 800679a:	9302      	str	r3, [sp, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	2300      	movs	r3, #0
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2300      	movs	r3, #0
 80067a6:	2200      	movs	r2, #0
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f003 fa1c 	bl	8009be6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af04      	add	r7, sp, #16
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	460b      	mov	r3, r1
 80067c8:	80fb      	strh	r3, [r7, #6]
 80067ca:	4613      	mov	r3, r2
 80067cc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80067dc:	7979      	ldrb	r1, [r7, #5]
 80067de:	7e3b      	ldrb	r3, [r7, #24]
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	9302      	str	r3, [sp, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	2301      	movs	r3, #1
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2300      	movs	r3, #0
 80067f0:	2200      	movs	r2, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f003 f9f7 	bl	8009be6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af04      	add	r7, sp, #16
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	4611      	mov	r1, r2
 800680e:	461a      	mov	r2, r3
 8006810:	460b      	mov	r3, r1
 8006812:	80fb      	strh	r3, [r7, #6]
 8006814:	4613      	mov	r3, r2
 8006816:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006818:	7979      	ldrb	r1, [r7, #5]
 800681a:	2300      	movs	r3, #0
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	2301      	movs	r3, #1
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	2300      	movs	r3, #0
 800682c:	2201      	movs	r2, #1
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f003 f9d9 	bl	8009be6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006834:	2300      	movs	r3, #0

}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b088      	sub	sp, #32
 8006842:	af04      	add	r7, sp, #16
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	4611      	mov	r1, r2
 800684a:	461a      	mov	r2, r3
 800684c:	460b      	mov	r3, r1
 800684e:	80fb      	strh	r3, [r7, #6]
 8006850:	4613      	mov	r3, r2
 8006852:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006862:	7979      	ldrb	r1, [r7, #5]
 8006864:	7e3b      	ldrb	r3, [r7, #24]
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	9302      	str	r3, [sp, #8]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	2301      	movs	r3, #1
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	2302      	movs	r3, #2
 8006876:	2200      	movs	r2, #0
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f003 f9b4 	bl	8009be6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af04      	add	r7, sp, #16
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4611      	mov	r1, r2
 8006894:	461a      	mov	r2, r3
 8006896:	460b      	mov	r3, r1
 8006898:	80fb      	strh	r3, [r7, #6]
 800689a:	4613      	mov	r3, r2
 800689c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800689e:	7979      	ldrb	r1, [r7, #5]
 80068a0:	2300      	movs	r3, #0
 80068a2:	9303      	str	r3, [sp, #12]
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	9302      	str	r3, [sp, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	2301      	movs	r3, #1
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	2302      	movs	r3, #2
 80068b2:	2201      	movs	r2, #1
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f003 f996 	bl	8009be6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	4608      	mov	r0, r1
 80068ce:	4611      	mov	r1, r2
 80068d0:	461a      	mov	r2, r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	70fb      	strb	r3, [r7, #3]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70bb      	strb	r3, [r7, #2]
 80068da:	4613      	mov	r3, r2
 80068dc:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80068de:	7878      	ldrb	r0, [r7, #1]
 80068e0:	78ba      	ldrb	r2, [r7, #2]
 80068e2:	78f9      	ldrb	r1, [r7, #3]
 80068e4:	8b3b      	ldrh	r3, [r7, #24]
 80068e6:	9302      	str	r3, [sp, #8]
 80068e8:	7d3b      	ldrb	r3, [r7, #20]
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	7c3b      	ldrb	r3, [r7, #16]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4603      	mov	r3, r0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f003 f929 	bl	8009b4a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80068f8:	2300      	movs	r3, #0

}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f003 f948 	bl	8009ba8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006918:	2300      	movs	r3, #0

}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f831 	bl	8006996 <USBH_GetFreePipe>
 8006934:	4603      	mov	r3, r0
 8006936:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	89fa      	ldrh	r2, [r7, #14]
 8006946:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	32e0      	adds	r2, #224	; 0xe0
 800694e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	b2db      	uxtb	r3, r3
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	2b0a      	cmp	r3, #10
 800696e:	d80b      	bhi.n	8006988 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32e0      	adds	r2, #224	; 0xe0
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32e0      	adds	r2, #224	; 0xe0
 8006984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	e00e      	b.n	80069c6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80069a8:	7bfa      	ldrb	r2, [r7, #15]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32e0      	adds	r2, #224	; 0xe0
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	e007      	b.n	80069d0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	3301      	adds	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b0a      	cmp	r3, #10
 80069ca:	d9ed      	bls.n	80069a8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80069cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80069ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ee:	2b84      	cmp	r3, #132	; 0x84
 80069f0:	d005      	beq.n	80069fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80069f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	3303      	adds	r3, #3
 80069fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80069fe:	68fb      	ldr	r3, [r7, #12]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a12:	f3ef 8305 	mrs	r3, IPSR
 8006a16:	607b      	str	r3, [r7, #4]
  return(result);
 8006a18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf14      	ite	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	2300      	moveq	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a34:	f001 f8dc 	bl	8007bf0 <vTaskStartScheduler>
  
  return osOK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a40:	b089      	sub	sp, #36	; 0x24
 8006a42:	af04      	add	r7, sp, #16
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d020      	beq.n	8006a92 <osThreadCreate+0x54>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01c      	beq.n	8006a92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685c      	ldr	r4, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681d      	ldr	r5, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691e      	ldr	r6, [r3, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff ffb6 	bl	80069dc <makeFreeRtosPriority>
 8006a70:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	9100      	str	r1, [sp, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	4632      	mov	r2, r6
 8006a84:	4629      	mov	r1, r5
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fef7 	bl	800787a <xTaskCreateStatic>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e01c      	b.n	8006acc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685c      	ldr	r4, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a9e:	b29e      	uxth	r6, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ff98 	bl	80069dc <makeFreeRtosPriority>
 8006aac:	4602      	mov	r2, r0
 8006aae:	f107 030c 	add.w	r3, r7, #12
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	9200      	str	r2, [sp, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4629      	mov	r1, r5
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 ff35 	bl	800792c <xTaskCreate>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d001      	beq.n	8006acc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ad6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <osDelay+0x16>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	e000      	b.n	8006aee <osDelay+0x18>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 f84a 	bl	8007b88 <vTaskDelay>
  
  return osOK;
 8006af4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006afe:	b590      	push	{r4, r7, lr}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af02      	add	r7, sp, #8
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d012      	beq.n	8006b36 <osMessageCreate+0x38>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68dc      	ldr	r4, [r3, #12]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	f000 f9df 	bl	8006ef0 <xQueueGenericCreateStatic>
 8006b32:	4603      	mov	r3, r0
 8006b34:	e008      	b.n	8006b48 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4619      	mov	r1, r3
 8006b42:	f000 fa47 	bl	8006fd4 <xQueueGenericCreate>
 8006b46:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd90      	pop	{r4, r7, pc}

08006b50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <osMessagePut+0x1e>
    ticks = 1;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006b6e:	f7ff ff4d 	bl	8006a0c <inHandlerMode>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d018      	beq.n	8006baa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006b78:	f107 0210 	add.w	r2, r7, #16
 8006b7c:	f107 0108 	add.w	r1, r7, #8
 8006b80:	2300      	movs	r3, #0
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fb7c 	bl	8007280 <xQueueGenericSendFromISR>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d001      	beq.n	8006b92 <osMessagePut+0x42>
      return osErrorOS;
 8006b8e:	23ff      	movs	r3, #255	; 0xff
 8006b90:	e018      	b.n	8006bc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d014      	beq.n	8006bc2 <osMessagePut+0x72>
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <osMessagePut+0x7c>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	e00b      	b.n	8006bc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006baa:	f107 0108 	add.w	r1, r7, #8
 8006bae:	2300      	movs	r3, #0
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fa6a 	bl	800708c <xQueueGenericSend>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d001      	beq.n	8006bc2 <osMessagePut+0x72>
      return osErrorOS;
 8006bbe:	23ff      	movs	r3, #255	; 0xff
 8006bc0:	e000      	b.n	8006bc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b08b      	sub	sp, #44	; 0x2c
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006bea:	2380      	movs	r3, #128	; 0x80
 8006bec:	617b      	str	r3, [r7, #20]
    return event;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	461c      	mov	r4, r3
 8006bf2:	f107 0314 	add.w	r3, r7, #20
 8006bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006bfe:	e054      	b.n	8006caa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d103      	bne.n	8006c18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006c10:	f04f 33ff 	mov.w	r3, #4294967295
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
 8006c16:	e009      	b.n	8006c2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <osMessageGet+0x5c>
      ticks = 1;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006c2c:	f7ff feee 	bl	8006a0c <inHandlerMode>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01c      	beq.n	8006c70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006c36:	f107 0220 	add.w	r2, r7, #32
 8006c3a:	f107 0314 	add.w	r3, r7, #20
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	68b8      	ldr	r0, [r7, #8]
 8006c44:	f000 fc8c 	bl	8007560 <xQueueReceiveFromISR>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d102      	bne.n	8006c54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006c4e:	2310      	movs	r3, #16
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e001      	b.n	8006c58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01d      	beq.n	8006c9a <osMessageGet+0xca>
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <osMessageGet+0xe4>)
 8006c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	e014      	b.n	8006c9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	3304      	adds	r3, #4
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	4619      	mov	r1, r3
 8006c7a:	68b8      	ldr	r0, [r7, #8]
 8006c7c:	f000 fb94 	bl	80073a8 <xQueueReceive>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d102      	bne.n	8006c8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006c86:	2310      	movs	r3, #16
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e006      	b.n	8006c9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <osMessageGet+0xc6>
 8006c92:	2300      	movs	r3, #0
 8006c94:	e000      	b.n	8006c98 <osMessageGet+0xc8>
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	461c      	mov	r4, r3
 8006c9e:	f107 0314 	add.w	r3, r7, #20
 8006ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	372c      	adds	r7, #44	; 0x2c
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd90      	pop	{r4, r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f103 0208 	add.w	r2, r3, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f103 0208 	add.w	r2, r3, #8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f103 0208 	add.w	r2, r3, #8
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d103      	bne.n	8006d7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e00c      	b.n	8006d94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e002      	b.n	8006d88 <vListInsert+0x2e>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d2f6      	bcs.n	8006d82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6892      	ldr	r2, [r2, #8]
 8006de2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6852      	ldr	r2, [r2, #4]
 8006dec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d103      	bne.n	8006e00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	1e5a      	subs	r2, r3, #1
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d109      	bne.n	8006e48 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	e7fe      	b.n	8006e46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006e48:	f001 fd00 	bl	800884c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	68f9      	ldr	r1, [r7, #12]
 8006e56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	441a      	add	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	22ff      	movs	r2, #255	; 0xff
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	22ff      	movs	r2, #255	; 0xff
 8006e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d114      	bne.n	8006ec8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 f8e2 	bl	8008074 <xTaskRemoveFromEventList>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d012      	beq.n	8006edc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <xQueueGenericReset+0xcc>)
 8006eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	e009      	b.n	8006edc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3310      	adds	r3, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fef3 	bl	8006cb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3324      	adds	r3, #36	; 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff feee 	bl	8006cb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006edc:	f001 fce4 	bl	80088a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ee0:	2301      	movs	r3, #1
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	; 0x38
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <xQueueGenericCreateStatic+0x28>
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f16:	e7fe      	b.n	8006f16 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <xQueueGenericCreateStatic+0x42>
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <xQueueGenericCreateStatic+0x4e>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <xQueueGenericCreateStatic+0x52>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <xQueueGenericCreateStatic+0x54>
 8006f42:	2300      	movs	r3, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <xQueueGenericCreateStatic+0x6c>
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	e7fe      	b.n	8006f5a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d102      	bne.n	8006f68 <xQueueGenericCreateStatic+0x78>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <xQueueGenericCreateStatic+0x7c>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <xQueueGenericCreateStatic+0x7e>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <xQueueGenericCreateStatic+0x96>
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e7fe      	b.n	8006f84 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f86:	2348      	movs	r3, #72	; 0x48
 8006f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b48      	cmp	r3, #72	; 0x48
 8006f8e:	d009      	beq.n	8006fa4 <xQueueGenericCreateStatic+0xb4>
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	e7fe      	b.n	8006fa2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f842 	bl	800704e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3730      	adds	r7, #48	; 0x30
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <xQueueGenericCreate+0x28>
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	e7fe      	b.n	8006ffa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	e004      	b.n	8007012 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	fb02 f303 	mul.w	r3, r2, r3
 8007010:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3348      	adds	r3, #72	; 0x48
 8007016:	4618      	mov	r0, r3
 8007018:	f001 fd32 	bl	8008a80 <pvPortMalloc>
 800701c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00f      	beq.n	8007044 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	3348      	adds	r3, #72	; 0x48
 8007028:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007032:	79fa      	ldrb	r2, [r7, #7]
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f805 	bl	800704e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007044:	69bb      	ldr	r3, [r7, #24]
	}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e002      	b.n	8007070 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800707c:	2101      	movs	r1, #1
 800707e:	69b8      	ldr	r0, [r7, #24]
 8007080:	f7ff fece 	bl	8006e20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08e      	sub	sp, #56	; 0x38
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800709a:	2300      	movs	r3, #0
 800709c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <xQueueGenericSend+0x30>
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ba:	e7fe      	b.n	80070ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSend+0x3e>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <xQueueGenericSend+0x42>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <xQueueGenericSend+0x44>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d109      	bne.n	80070e8 <xQueueGenericSend+0x5c>
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
 80070e6:	e7fe      	b.n	80070e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d103      	bne.n	80070f6 <xQueueGenericSend+0x6a>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <xQueueGenericSend+0x6e>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xQueueGenericSend+0x70>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d109      	bne.n	8007114 <xQueueGenericSend+0x88>
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	623b      	str	r3, [r7, #32]
 8007112:	e7fe      	b.n	8007112 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007114:	f001 f96a 	bl	80083ec <xTaskGetSchedulerState>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <xQueueGenericSend+0x98>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <xQueueGenericSend+0x9c>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <xQueueGenericSend+0x9e>
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <xQueueGenericSend+0xb6>
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	e7fe      	b.n	8007140 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007142:	f001 fb83 	bl	800884c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <xQueueGenericSend+0xcc>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d129      	bne.n	80071ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800715e:	f000 fa7c 	bl	800765a <prvCopyDataToQueue>
 8007162:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	3324      	adds	r3, #36	; 0x24
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff7f 	bl	8008074 <xTaskRemoveFromEventList>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d013      	beq.n	80071a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800717c:	4b3f      	ldr	r3, [pc, #252]	; (800727c <xQueueGenericSend+0x1f0>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	e00a      	b.n	80071a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007194:	4b39      	ldr	r3, [pc, #228]	; (800727c <xQueueGenericSend+0x1f0>)
 8007196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071a4:	f001 fb80 	bl	80088a8 <vPortExitCritical>
				return pdPASS;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e063      	b.n	8007274 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071b2:	f001 fb79 	bl	80088a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e05c      	b.n	8007274 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 ffb7 	bl	8008138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ce:	f001 fb6b 	bl	80088a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071d2:	f000 fd6b 	bl	8007cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071d6:	f001 fb39 	bl	800884c <vPortEnterCritical>
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d103      	bne.n	80071f0 <xQueueGenericSend+0x164>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d103      	bne.n	8007206 <xQueueGenericSend+0x17a>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007206:	f001 fb4f 	bl	80088a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800720a:	1d3a      	adds	r2, r7, #4
 800720c:	f107 0314 	add.w	r3, r7, #20
 8007210:	4611      	mov	r1, r2
 8007212:	4618      	mov	r0, r3
 8007214:	f000 ffa6 	bl	8008164 <xTaskCheckForTimeOut>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d124      	bne.n	8007268 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800721e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007220:	f000 fb13 	bl	800784a <prvIsQueueFull>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d018      	beq.n	800725c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	3310      	adds	r3, #16
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fefa 	bl	800802c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800723a:	f000 fa9e 	bl	800777a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800723e:	f000 fd43 	bl	8007cc8 <xTaskResumeAll>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	f47f af7c 	bne.w	8007142 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800724a:	4b0c      	ldr	r3, [pc, #48]	; (800727c <xQueueGenericSend+0x1f0>)
 800724c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	e772      	b.n	8007142 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800725c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725e:	f000 fa8c 	bl	800777a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007262:	f000 fd31 	bl	8007cc8 <xTaskResumeAll>
 8007266:	e76c      	b.n	8007142 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800726a:	f000 fa86 	bl	800777a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800726e:	f000 fd2b 	bl	8007cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007272:	2300      	movs	r3, #0
		}
	}
}
 8007274:	4618      	mov	r0, r3
 8007276:	3738      	adds	r7, #56	; 0x38
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	2b00      	cmp	r3, #0
 8007296:	d109      	bne.n	80072ac <xQueueGenericSendFromISR+0x2c>
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	e7fe      	b.n	80072aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <xQueueGenericSendFromISR+0x3a>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <xQueueGenericSendFromISR+0x3e>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <xQueueGenericSendFromISR+0x40>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <xQueueGenericSendFromISR+0x58>
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
 80072d6:	e7fe      	b.n	80072d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d103      	bne.n	80072e6 <xQueueGenericSendFromISR+0x66>
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <xQueueGenericSendFromISR+0x6a>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <xQueueGenericSendFromISR+0x6c>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <xQueueGenericSendFromISR+0x84>
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	e7fe      	b.n	8007302 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007304:	f001 fb7e 	bl	8008a04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007308:	f3ef 8211 	mrs	r2, BASEPRI
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	61ba      	str	r2, [r7, #24]
 800731e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007320:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732c:	429a      	cmp	r2, r3
 800732e:	d302      	bcc.n	8007336 <xQueueGenericSendFromISR+0xb6>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d12c      	bne.n	8007390 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007346:	f000 f988 	bl	800765a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800734a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d112      	bne.n	800737a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d016      	beq.n	800738a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	3324      	adds	r3, #36	; 0x24
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fe87 	bl	8008074 <xTaskRemoveFromEventList>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e007      	b.n	800738a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800737a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800737e:	3301      	adds	r3, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	b25a      	sxtb	r2, r3
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800738a:	2301      	movs	r3, #1
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800738e:	e001      	b.n	8007394 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007390:	2300      	movs	r3, #0
 8007392:	637b      	str	r3, [r7, #52]	; 0x34
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3738      	adds	r7, #56	; 0x38
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <xQueueReceive+0x2e>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	623b      	str	r3, [r7, #32]
 80073d4:	e7fe      	b.n	80073d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d103      	bne.n	80073e4 <xQueueReceive+0x3c>
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <xQueueReceive+0x40>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <xQueueReceive+0x42>
 80073e8:	2300      	movs	r3, #0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <xQueueReceive+0x5a>
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	e7fe      	b.n	8007400 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007402:	f000 fff3 	bl	80083ec <xTaskGetSchedulerState>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <xQueueReceive+0x6a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <xQueueReceive+0x6e>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <xQueueReceive+0x70>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <xQueueReceive+0x88>
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	e7fe      	b.n	800742e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007430:	f001 fa0c 	bl	800884c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01f      	beq.n	8007480 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007444:	f000 f973 	bl	800772e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	1e5a      	subs	r2, r3, #1
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00f      	beq.n	8007478 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	3310      	adds	r3, #16
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fe09 	bl	8008074 <xTaskRemoveFromEventList>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007468:	4b3c      	ldr	r3, [pc, #240]	; (800755c <xQueueReceive+0x1b4>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007478:	f001 fa16 	bl	80088a8 <vPortExitCritical>
				return pdPASS;
 800747c:	2301      	movs	r3, #1
 800747e:	e069      	b.n	8007554 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007486:	f001 fa0f 	bl	80088a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800748a:	2300      	movs	r3, #0
 800748c:	e062      	b.n	8007554 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007494:	f107 0310 	add.w	r3, r7, #16
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fe4d 	bl	8008138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074a2:	f001 fa01 	bl	80088a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074a6:	f000 fc01 	bl	8007cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074aa:	f001 f9cf 	bl	800884c <vPortEnterCritical>
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ba:	d103      	bne.n	80074c4 <xQueueReceive+0x11c>
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d103      	bne.n	80074da <xQueueReceive+0x132>
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074da:	f001 f9e5 	bl	80088a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074de:	1d3a      	adds	r2, r7, #4
 80074e0:	f107 0310 	add.w	r3, r7, #16
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fe3c 	bl	8008164 <xTaskCheckForTimeOut>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d123      	bne.n	800753a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f4:	f000 f993 	bl	800781e <prvIsQueueEmpty>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d017      	beq.n	800752e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	3324      	adds	r3, #36	; 0x24
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fd90 	bl	800802c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800750c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750e:	f000 f934 	bl	800777a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007512:	f000 fbd9 	bl	8007cc8 <xTaskResumeAll>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d189      	bne.n	8007430 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <xQueueReceive+0x1b4>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	e780      	b.n	8007430 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800752e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007530:	f000 f923 	bl	800777a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007534:	f000 fbc8 	bl	8007cc8 <xTaskResumeAll>
 8007538:	e77a      	b.n	8007430 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800753a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753c:	f000 f91d 	bl	800777a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007540:	f000 fbc2 	bl	8007cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007546:	f000 f96a 	bl	800781e <prvIsQueueEmpty>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	f43f af6f 	beq.w	8007430 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007552:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007554:	4618      	mov	r0, r3
 8007556:	3730      	adds	r7, #48	; 0x30
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08e      	sub	sp, #56	; 0x38
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <xQueueReceiveFromISR+0x2a>
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	e7fe      	b.n	8007588 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <xQueueReceiveFromISR+0x38>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <xQueueReceiveFromISR+0x3c>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <xQueueReceiveFromISR+0x3e>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <xQueueReceiveFromISR+0x56>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	e7fe      	b.n	80075b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075b6:	f001 fa25 	bl	8008a04 <vPortValidateInterruptPriority>
	__asm volatile
 80075ba:	f3ef 8211 	mrs	r2, BASEPRI
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	61ba      	str	r2, [r7, #24]
 80075d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d02f      	beq.n	8007642 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f0:	f000 f89d 	bl	800772e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	1e5a      	subs	r2, r3, #1
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80075fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d112      	bne.n	800762c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	3310      	adds	r3, #16
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fd2e 	bl	8008074 <xTaskRemoveFromEventList>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e007      	b.n	800763c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800762c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007630:	3301      	adds	r3, #1
 8007632:	b2db      	uxtb	r3, r3
 8007634:	b25a      	sxtb	r2, r3
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800763c:	2301      	movs	r3, #1
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
 8007640:	e001      	b.n	8007646 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007642:	2300      	movs	r3, #0
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007652:	4618      	mov	r0, r3
 8007654:	3738      	adds	r7, #56	; 0x38
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10d      	bne.n	8007694 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d14d      	bne.n	800771c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fecf 	bl	8008428 <xTaskPriorityDisinherit>
 800768a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	605a      	str	r2, [r3, #4]
 8007692:	e043      	b.n	800771c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d119      	bne.n	80076ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6898      	ldr	r0, [r3, #8]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	461a      	mov	r2, r3
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	f002 fbe3 	bl	8009e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d32b      	bcc.n	800771c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	609a      	str	r2, [r3, #8]
 80076cc:	e026      	b.n	800771c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68d8      	ldr	r0, [r3, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	461a      	mov	r2, r3
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	f002 fbc9 	bl	8009e70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	425b      	negs	r3, r3
 80076e8:	441a      	add	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d207      	bcs.n	800770a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	425b      	negs	r3, r3
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d105      	bne.n	800771c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	3b01      	subs	r3, #1
 800771a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007724:	697b      	ldr	r3, [r7, #20]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d018      	beq.n	8007772 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	441a      	add	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	429a      	cmp	r2, r3
 8007758:	d303      	bcc.n	8007762 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68d9      	ldr	r1, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	461a      	mov	r2, r3
 800776c:	6838      	ldr	r0, [r7, #0]
 800776e:	f002 fb7f 	bl	8009e70 <memcpy>
	}
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007782:	f001 f863 	bl	800884c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800778c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800778e:	e011      	b.n	80077b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d012      	beq.n	80077be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fc69 	bl	8008074 <xTaskRemoveFromEventList>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077a8:	f000 fd3c 	bl	8008224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dce9      	bgt.n	8007790 <prvUnlockQueue+0x16>
 80077bc:	e000      	b.n	80077c0 <prvUnlockQueue+0x46>
					break;
 80077be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	22ff      	movs	r2, #255	; 0xff
 80077c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077c8:	f001 f86e 	bl	80088a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077cc:	f001 f83e 	bl	800884c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077d8:	e011      	b.n	80077fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d012      	beq.n	8007808 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3310      	adds	r3, #16
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fc44 	bl	8008074 <xTaskRemoveFromEventList>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077f2:	f000 fd17 	bl	8008224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	dce9      	bgt.n	80077da <prvUnlockQueue+0x60>
 8007806:	e000      	b.n	800780a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007808:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007812:	f001 f849 	bl	80088a8 <vPortExitCritical>
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007826:	f001 f811 	bl	800884c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e001      	b.n	800783c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800783c:	f001 f834 	bl	80088a8 <vPortExitCritical>

	return xReturn;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007852:	f000 fffb 	bl	800884c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	429a      	cmp	r2, r3
 8007860:	d102      	bne.n	8007868 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007862:	2301      	movs	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e001      	b.n	800786c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800786c:	f001 f81c 	bl	80088a8 <vPortExitCritical>

	return xReturn;
 8007870:	68fb      	ldr	r3, [r7, #12]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800787a:	b580      	push	{r7, lr}
 800787c:	b08e      	sub	sp, #56	; 0x38
 800787e:	af04      	add	r7, sp, #16
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <xTaskCreateStatic+0x28>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	623b      	str	r3, [r7, #32]
 80078a0:	e7fe      	b.n	80078a0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <xTaskCreateStatic+0x42>
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	61fb      	str	r3, [r7, #28]
 80078ba:	e7fe      	b.n	80078ba <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078bc:	2354      	movs	r3, #84	; 0x54
 80078be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b54      	cmp	r3, #84	; 0x54
 80078c4:	d009      	beq.n	80078da <xTaskCreateStatic+0x60>
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	e7fe      	b.n	80078d8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01e      	beq.n	800791e <xTaskCreateStatic+0xa4>
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01b      	beq.n	800791e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078f8:	2300      	movs	r3, #0
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f850 	bl	80079b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007918:	f000 f8cc 	bl	8007ab4 <prvAddNewTaskToReadyList>
 800791c:	e001      	b.n	8007922 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007922:	697b      	ldr	r3, [r7, #20]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	; 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	; 0x30
 8007930:	af04      	add	r7, sp, #16
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793c:	88fb      	ldrh	r3, [r7, #6]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 f89d 	bl	8008a80 <pvPortMalloc>
 8007946:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800794e:	2054      	movs	r0, #84	; 0x54
 8007950:	f001 f896 	bl	8008a80 <pvPortMalloc>
 8007954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
 8007962:	e005      	b.n	8007970 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007964:	6978      	ldr	r0, [r7, #20]
 8007966:	f001 f94d 	bl	8008c04 <vPortFree>
 800796a:	e001      	b.n	8007970 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	2300      	movs	r3, #0
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	9302      	str	r3, [sp, #8]
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f80e 	bl	80079b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800799a:	69f8      	ldr	r0, [r7, #28]
 800799c:	f000 f88a 	bl	8007ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079a0:	2301      	movs	r3, #1
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	e002      	b.n	80079ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ac:	69bb      	ldr	r3, [r7, #24]
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b088      	sub	sp, #32
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079ce:	3b01      	subs	r3, #1
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f023 0307 	bic.w	r3, r3, #7
 80079dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <prvInitialiseNewTask+0x46>
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e7fe      	b.n	80079fa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e012      	b.n	8007a28 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	3334      	adds	r3, #52	; 0x34
 8007a12:	460a      	mov	r2, r1
 8007a14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d006      	beq.n	8007a30 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3301      	adds	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d9e9      	bls.n	8007a02 <prvInitialiseNewTask+0x4c>
 8007a2e:	e000      	b.n	8007a32 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007a30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	2b06      	cmp	r3, #6
 8007a3e:	d901      	bls.n	8007a44 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a40:	2306      	movs	r3, #6
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff f94c 	bl	8006cf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	3318      	adds	r3, #24
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f947 	bl	8006cf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	f1c3 0207 	rsb	r2, r3, #7
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2200      	movs	r2, #0
 8007a84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	68f9      	ldr	r1, [r7, #12]
 8007a92:	69b8      	ldr	r0, [r7, #24]
 8007a94:	f000 fdb2 	bl	80085fc <pxPortInitialiseStack>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aaa:	bf00      	nop
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007abc:	f000 fec6 	bl	800884c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ad2:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ad8:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d110      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae0:	f000 fbc4 	bl	800826c <prvInitialiseTaskLists>
 8007ae4:	e00d      	b.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <prvAddNewTaskToReadyList+0xc0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d802      	bhi.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007afc:	4a1c      	ldr	r2, [pc, #112]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b02:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <prvAddNewTaskToReadyList+0xc4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <prvAddNewTaskToReadyList+0xc4>)
 8007b0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	2201      	movs	r2, #1
 8007b12:	409a      	lsls	r2, r3
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <prvAddNewTaskToReadyList+0xc8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <prvAddNewTaskToReadyList+0xc8>)
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <prvAddNewTaskToReadyList+0xcc>)
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7ff f8ec 	bl	8006d12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b3a:	f000 feb5 	bl	80088a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <prvAddNewTaskToReadyList+0xc0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d207      	bcs.n	8007b64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <prvAddNewTaskToReadyList+0xd0>)
 8007b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	200001b4 	.word	0x200001b4
 8007b70:	200000b4 	.word	0x200000b4
 8007b74:	200001c0 	.word	0x200001c0
 8007b78:	200001d0 	.word	0x200001d0
 8007b7c:	200001bc 	.word	0x200001bc
 8007b80:	200000b8 	.word	0x200000b8
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d016      	beq.n	8007bc8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <vTaskDelay+0x60>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <vTaskDelay+0x2e>
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	e7fe      	b.n	8007bb4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007bb6:	f000 f879 	bl	8007cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bba:	2100      	movs	r1, #0
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fcb7 	bl	8008530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bc2:	f000 f881 	bl	8007cc8 <xTaskResumeAll>
 8007bc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d107      	bne.n	8007bde <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <vTaskDelay+0x64>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bde:	bf00      	nop
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	200001dc 	.word	0x200001dc
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bfe:	463a      	mov	r2, r7
 8007c00:	1d39      	adds	r1, r7, #4
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f910 	bl	8008e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	460a      	mov	r2, r1
 8007c1e:	491d      	ldr	r1, [pc, #116]	; (8007c94 <vTaskStartScheduler+0xa4>)
 8007c20:	481d      	ldr	r0, [pc, #116]	; (8007c98 <vTaskStartScheduler+0xa8>)
 8007c22:	f7ff fe2a 	bl	800787a <xTaskCreateStatic>
 8007c26:	4602      	mov	r2, r0
 8007c28:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <vTaskStartScheduler+0xac>)
 8007c2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <vTaskStartScheduler+0xac>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e001      	b.n	8007c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d115      	bne.n	8007c70 <vTaskStartScheduler+0x80>
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c56:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <vTaskStartScheduler+0xb0>)
 8007c58:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c5e:	4b11      	ldr	r3, [pc, #68]	; (8007ca4 <vTaskStartScheduler+0xb4>)
 8007c60:	2201      	movs	r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007c64:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <vTaskStartScheduler+0xb8>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c6a:	f000 fd51 	bl	8008710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c6e:	e00d      	b.n	8007c8c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d109      	bne.n	8007c8c <vTaskStartScheduler+0x9c>
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e7fe      	b.n	8007c8a <vTaskStartScheduler+0x9a>
}
 8007c8c:	bf00      	nop
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	0800a060 	.word	0x0800a060
 8007c98:	0800823d 	.word	0x0800823d
 8007c9c:	200001d8 	.word	0x200001d8
 8007ca0:	200001d4 	.word	0x200001d4
 8007ca4:	200001c0 	.word	0x200001c0
 8007ca8:	200001b8 	.word	0x200001b8

08007cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <vTaskSuspendAll+0x18>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a03      	ldr	r2, [pc, #12]	; (8007cc4 <vTaskSuspendAll+0x18>)
 8007cb8:	6013      	str	r3, [r2, #0]
}
 8007cba:	bf00      	nop
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	200001dc 	.word	0x200001dc

08007cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cd6:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <xTaskResumeAll+0x114>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <xTaskResumeAll+0x2a>
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	e7fe      	b.n	8007cf0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cf2:	f000 fdab 	bl	800884c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <xTaskResumeAll+0x114>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4a37      	ldr	r2, [pc, #220]	; (8007ddc <xTaskResumeAll+0x114>)
 8007cfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d00:	4b36      	ldr	r3, [pc, #216]	; (8007ddc <xTaskResumeAll+0x114>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d161      	bne.n	8007dcc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d08:	4b35      	ldr	r3, [pc, #212]	; (8007de0 <xTaskResumeAll+0x118>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d05d      	beq.n	8007dcc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d10:	e02e      	b.n	8007d70 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d12:	4b34      	ldr	r3, [pc, #208]	; (8007de4 <xTaskResumeAll+0x11c>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff f854 	bl	8006dcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff f84f 	bl	8006dcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	2201      	movs	r2, #1
 8007d34:	409a      	lsls	r2, r3
 8007d36:	4b2c      	ldr	r3, [pc, #176]	; (8007de8 <xTaskResumeAll+0x120>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <xTaskResumeAll+0x120>)
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4a27      	ldr	r2, [pc, #156]	; (8007dec <xTaskResumeAll+0x124>)
 8007d4e:	441a      	add	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe ffdb 	bl	8006d12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4b23      	ldr	r3, [pc, #140]	; (8007df0 <xTaskResumeAll+0x128>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007d6a:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <xTaskResumeAll+0x12c>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d70:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <xTaskResumeAll+0x11c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1cc      	bne.n	8007d12 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d7e:	f000 fb0f 	bl	80083a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d82:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <xTaskResumeAll+0x130>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d8e:	f000 f837 	bl	8007e00 <xTaskIncrementTick>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007d98:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <xTaskResumeAll+0x12c>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1f1      	bne.n	8007d8e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <xTaskResumeAll+0x130>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007db0:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <xTaskResumeAll+0x12c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d009      	beq.n	8007dcc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007db8:	2301      	movs	r3, #1
 8007dba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <xTaskResumeAll+0x134>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dcc:	f000 fd6c 	bl	80088a8 <vPortExitCritical>

	return xAlreadyYielded;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200001dc 	.word	0x200001dc
 8007de0:	200001b4 	.word	0x200001b4
 8007de4:	20000174 	.word	0x20000174
 8007de8:	200001bc 	.word	0x200001bc
 8007dec:	200000b8 	.word	0x200000b8
 8007df0:	200000b4 	.word	0x200000b4
 8007df4:	200001c8 	.word	0x200001c8
 8007df8:	200001c4 	.word	0x200001c4
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0a:	4b50      	ldr	r3, [pc, #320]	; (8007f4c <xTaskIncrementTick+0x14c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f040 808c 	bne.w	8007f2c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e14:	4b4e      	ldr	r3, [pc, #312]	; (8007f50 <xTaskIncrementTick+0x150>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e1c:	4a4c      	ldr	r2, [pc, #304]	; (8007f50 <xTaskIncrementTick+0x150>)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11f      	bne.n	8007e68 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e28:	4b4a      	ldr	r3, [pc, #296]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <xTaskIncrementTick+0x46>
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	e7fe      	b.n	8007e44 <xTaskIncrementTick+0x44>
 8007e46:	4b43      	ldr	r3, [pc, #268]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	4b42      	ldr	r3, [pc, #264]	; (8007f58 <xTaskIncrementTick+0x158>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a40      	ldr	r2, [pc, #256]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	4a40      	ldr	r2, [pc, #256]	; (8007f58 <xTaskIncrementTick+0x158>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4b40      	ldr	r3, [pc, #256]	; (8007f5c <xTaskIncrementTick+0x15c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	4a3e      	ldr	r2, [pc, #248]	; (8007f5c <xTaskIncrementTick+0x15c>)
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	f000 fa9c 	bl	80083a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e68:	4b3d      	ldr	r3, [pc, #244]	; (8007f60 <xTaskIncrementTick+0x160>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d34d      	bcc.n	8007f0e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e72:	4b38      	ldr	r3, [pc, #224]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <xTaskIncrementTick+0x80>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <xTaskIncrementTick+0x82>
 8007e80:	2300      	movs	r3, #0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e86:	4b36      	ldr	r3, [pc, #216]	; (8007f60 <xTaskIncrementTick+0x160>)
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	601a      	str	r2, [r3, #0]
					break;
 8007e8e:	e03e      	b.n	8007f0e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e90:	4b30      	ldr	r3, [pc, #192]	; (8007f54 <xTaskIncrementTick+0x154>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d203      	bcs.n	8007eb0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea8:	4a2d      	ldr	r2, [pc, #180]	; (8007f60 <xTaskIncrementTick+0x160>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6013      	str	r3, [r2, #0]
						break;
 8007eae:	e02e      	b.n	8007f0e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe ff89 	bl	8006dcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3318      	adds	r3, #24
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe ff80 	bl	8006dcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <xTaskIncrementTick+0x164>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <xTaskIncrementTick+0x164>)
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <xTaskIncrementTick+0x168>)
 8007eec:	441a      	add	r2, r3
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f7fe ff0c 	bl	8006d12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <xTaskIncrementTick+0x16c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d3b4      	bcc.n	8007e72 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0c:	e7b1      	b.n	8007e72 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <xTaskIncrementTick+0x16c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	4914      	ldr	r1, [pc, #80]	; (8007f68 <xTaskIncrementTick+0x168>)
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d907      	bls.n	8007f36 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007f26:	2301      	movs	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e004      	b.n	8007f36 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f2c:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <xTaskIncrementTick+0x170>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <xTaskIncrementTick+0x170>)
 8007f34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xTaskIncrementTick+0x174>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f42:	697b      	ldr	r3, [r7, #20]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	200001dc 	.word	0x200001dc
 8007f50:	200001b8 	.word	0x200001b8
 8007f54:	2000016c 	.word	0x2000016c
 8007f58:	20000170 	.word	0x20000170
 8007f5c:	200001cc 	.word	0x200001cc
 8007f60:	200001d4 	.word	0x200001d4
 8007f64:	200001bc 	.word	0x200001bc
 8007f68:	200000b8 	.word	0x200000b8
 8007f6c:	200000b4 	.word	0x200000b4
 8007f70:	200001c4 	.word	0x200001c4
 8007f74:	200001c8 	.word	0x200001c8

08007f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f7e:	4b26      	ldr	r3, [pc, #152]	; (8008018 <vTaskSwitchContext+0xa0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f86:	4b25      	ldr	r3, [pc, #148]	; (800801c <vTaskSwitchContext+0xa4>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f8c:	e03e      	b.n	800800c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007f8e:	4b23      	ldr	r3, [pc, #140]	; (800801c <vTaskSwitchContext+0xa4>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007f94:	4b22      	ldr	r3, [pc, #136]	; (8008020 <vTaskSwitchContext+0xa8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	fab3 f383 	clz	r3, r3
 8007fa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	f1c3 031f 	rsb	r3, r3, #31
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	491e      	ldr	r1, [pc, #120]	; (8008024 <vTaskSwitchContext+0xac>)
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	e7fe      	b.n	8007fd0 <vTaskSwitchContext+0x58>
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4a11      	ldr	r2, [pc, #68]	; (8008024 <vTaskSwitchContext+0xac>)
 8007fde:	4413      	add	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	605a      	str	r2, [r3, #4]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d104      	bne.n	8008002 <vTaskSwitchContext+0x8a>
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	4a07      	ldr	r2, [pc, #28]	; (8008028 <vTaskSwitchContext+0xb0>)
 800800a:	6013      	str	r3, [r2, #0]
}
 800800c:	bf00      	nop
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	200001dc 	.word	0x200001dc
 800801c:	200001c8 	.word	0x200001c8
 8008020:	200001bc 	.word	0x200001bc
 8008024:	200000b8 	.word	0x200000b8
 8008028:	200000b4 	.word	0x200000b4

0800802c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d109      	bne.n	8008050 <vTaskPlaceOnEventList+0x24>
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e7fe      	b.n	800804e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <vTaskPlaceOnEventList+0x44>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3318      	adds	r3, #24
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fe fe7e 	bl	8006d5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800805e:	2101      	movs	r1, #1
 8008060:	6838      	ldr	r0, [r7, #0]
 8008062:	f000 fa65 	bl	8008530 <prvAddCurrentTaskToDelayedList>
}
 8008066:	bf00      	nop
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	200000b4 	.word	0x200000b4

08008074 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <xTaskRemoveFromEventList+0x2a>
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	e7fe      	b.n	800809c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	3318      	adds	r3, #24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fe92 	bl	8006dcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080a8:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <xTaskRemoveFromEventList+0xac>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d11c      	bne.n	80080ea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fe89 	bl	8006dcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	2201      	movs	r2, #1
 80080c0:	409a      	lsls	r2, r3
 80080c2:	4b18      	ldr	r3, [pc, #96]	; (8008124 <xTaskRemoveFromEventList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	4a16      	ldr	r2, [pc, #88]	; (8008124 <xTaskRemoveFromEventList+0xb0>)
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a13      	ldr	r2, [pc, #76]	; (8008128 <xTaskRemoveFromEventList+0xb4>)
 80080da:	441a      	add	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fe fe15 	bl	8006d12 <vListInsertEnd>
 80080e8:	e005      	b.n	80080f6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3318      	adds	r3, #24
 80080ee:	4619      	mov	r1, r3
 80080f0:	480e      	ldr	r0, [pc, #56]	; (800812c <xTaskRemoveFromEventList+0xb8>)
 80080f2:	f7fe fe0e 	bl	8006d12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <xTaskRemoveFromEventList+0xbc>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	429a      	cmp	r2, r3
 8008102:	d905      	bls.n	8008110 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <xTaskRemoveFromEventList+0xc0>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	e001      	b.n	8008114 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008114:	697b      	ldr	r3, [r7, #20]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200001dc 	.word	0x200001dc
 8008124:	200001bc 	.word	0x200001bc
 8008128:	200000b8 	.word	0x200000b8
 800812c:	20000174 	.word	0x20000174
 8008130:	200000b4 	.word	0x200000b4
 8008134:	200001c8 	.word	0x200001c8

08008138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <vTaskInternalSetTimeOutState+0x24>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <vTaskInternalSetTimeOutState+0x28>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	605a      	str	r2, [r3, #4]
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	200001cc 	.word	0x200001cc
 8008160:	200001b8 	.word	0x200001b8

08008164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <xTaskCheckForTimeOut+0x24>
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	e7fe      	b.n	8008186 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <xTaskCheckForTimeOut+0x3e>
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e7fe      	b.n	80081a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80081a2:	f000 fb53 	bl	800884c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <xTaskCheckForTimeOut+0xb8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d102      	bne.n	80081c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	e023      	b.n	800820e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b15      	ldr	r3, [pc, #84]	; (8008220 <xTaskCheckForTimeOut+0xbc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d007      	beq.n	80081e2 <xTaskCheckForTimeOut+0x7e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d302      	bcc.n	80081e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	61fb      	str	r3, [r7, #28]
 80081e0:	e015      	b.n	800820e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d20b      	bcs.n	8008204 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	1ad2      	subs	r2, r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff9d 	bl	8008138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081fe:	2300      	movs	r3, #0
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	e004      	b.n	800820e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800820e:	f000 fb4b 	bl	80088a8 <vPortExitCritical>

	return xReturn;
 8008212:	69fb      	ldr	r3, [r7, #28]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	200001b8 	.word	0x200001b8
 8008220:	200001cc 	.word	0x200001cc

08008224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008228:	4b03      	ldr	r3, [pc, #12]	; (8008238 <vTaskMissedYield+0x14>)
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
}
 800822e:	bf00      	nop
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	200001c8 	.word	0x200001c8

0800823c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008244:	f000 f852 	bl	80082ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <prvIdleTask+0x28>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d9f9      	bls.n	8008244 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <prvIdleTask+0x2c>)
 8008252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008260:	e7f0      	b.n	8008244 <prvIdleTask+0x8>
 8008262:	bf00      	nop
 8008264:	200000b8 	.word	0x200000b8
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008272:	2300      	movs	r3, #0
 8008274:	607b      	str	r3, [r7, #4]
 8008276:	e00c      	b.n	8008292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <prvInitialiseTaskLists+0x60>)
 8008284:	4413      	add	r3, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fd16 	bl	8006cb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3301      	adds	r3, #1
 8008290:	607b      	str	r3, [r7, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b06      	cmp	r3, #6
 8008296:	d9ef      	bls.n	8008278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008298:	480d      	ldr	r0, [pc, #52]	; (80082d0 <prvInitialiseTaskLists+0x64>)
 800829a:	f7fe fd0d 	bl	8006cb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800829e:	480d      	ldr	r0, [pc, #52]	; (80082d4 <prvInitialiseTaskLists+0x68>)
 80082a0:	f7fe fd0a 	bl	8006cb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082a4:	480c      	ldr	r0, [pc, #48]	; (80082d8 <prvInitialiseTaskLists+0x6c>)
 80082a6:	f7fe fd07 	bl	8006cb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082aa:	480c      	ldr	r0, [pc, #48]	; (80082dc <prvInitialiseTaskLists+0x70>)
 80082ac:	f7fe fd04 	bl	8006cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082b0:	480b      	ldr	r0, [pc, #44]	; (80082e0 <prvInitialiseTaskLists+0x74>)
 80082b2:	f7fe fd01 	bl	8006cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <prvInitialiseTaskLists+0x78>)
 80082b8:	4a05      	ldr	r2, [pc, #20]	; (80082d0 <prvInitialiseTaskLists+0x64>)
 80082ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <prvInitialiseTaskLists+0x7c>)
 80082be:	4a05      	ldr	r2, [pc, #20]	; (80082d4 <prvInitialiseTaskLists+0x68>)
 80082c0:	601a      	str	r2, [r3, #0]
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	200000b8 	.word	0x200000b8
 80082d0:	20000144 	.word	0x20000144
 80082d4:	20000158 	.word	0x20000158
 80082d8:	20000174 	.word	0x20000174
 80082dc:	20000188 	.word	0x20000188
 80082e0:	200001a0 	.word	0x200001a0
 80082e4:	2000016c 	.word	0x2000016c
 80082e8:	20000170 	.word	0x20000170

080082ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082f2:	e019      	b.n	8008328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082f4:	f000 faaa 	bl	800884c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80082f8:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <prvCheckTasksWaitingTermination+0x4c>)
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe fd61 	bl	8006dcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <prvCheckTasksWaitingTermination+0x50>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3b01      	subs	r3, #1
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <prvCheckTasksWaitingTermination+0x50>)
 8008312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008314:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <prvCheckTasksWaitingTermination+0x54>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3b01      	subs	r3, #1
 800831a:	4a09      	ldr	r2, [pc, #36]	; (8008340 <prvCheckTasksWaitingTermination+0x54>)
 800831c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800831e:	f000 fac3 	bl	80088a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f80e 	bl	8008344 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <prvCheckTasksWaitingTermination+0x54>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e1      	bne.n	80082f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20000188 	.word	0x20000188
 800833c:	200001b4 	.word	0x200001b4
 8008340:	2000019c 	.word	0x2000019c

08008344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008352:	2b00      	cmp	r3, #0
 8008354:	d108      	bne.n	8008368 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fc52 	bl	8008c04 <vPortFree>
				vPortFree( pxTCB );
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fc4f 	bl	8008c04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008366:	e017      	b.n	8008398 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800836e:	2b01      	cmp	r3, #1
 8008370:	d103      	bne.n	800837a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fc46 	bl	8008c04 <vPortFree>
	}
 8008378:	e00e      	b.n	8008398 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008380:	2b02      	cmp	r3, #2
 8008382:	d009      	beq.n	8008398 <prvDeleteTCB+0x54>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e7fe      	b.n	8008396 <prvDeleteTCB+0x52>
	}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <prvResetNextTaskUnblockTime+0x44>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <prvResetNextTaskUnblockTime+0x14>
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <prvResetNextTaskUnblockTime+0x16>
 80083b4:	2300      	movs	r3, #0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <prvResetNextTaskUnblockTime+0x48>)
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083c2:	e008      	b.n	80083d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083c4:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <prvResetNextTaskUnblockTime+0x44>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	4a05      	ldr	r2, [pc, #20]	; (80083e8 <prvResetNextTaskUnblockTime+0x48>)
 80083d4:	6013      	str	r3, [r2, #0]
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	2000016c 	.word	0x2000016c
 80083e8:	200001d4 	.word	0x200001d4

080083ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <xTaskGetSchedulerState+0x34>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083fa:	2301      	movs	r3, #1
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	e008      	b.n	8008412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008400:	4b08      	ldr	r3, [pc, #32]	; (8008424 <xTaskGetSchedulerState+0x38>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008408:	2302      	movs	r3, #2
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	e001      	b.n	8008412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008412:	687b      	ldr	r3, [r7, #4]
	}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	200001c0 	.word	0x200001c0
 8008424:	200001dc 	.word	0x200001dc

08008428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d06c      	beq.n	8008518 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800843e:	4b39      	ldr	r3, [pc, #228]	; (8008524 <xTaskPriorityDisinherit+0xfc>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	429a      	cmp	r2, r3
 8008446:	d009      	beq.n	800845c <xTaskPriorityDisinherit+0x34>
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	e7fe      	b.n	800845a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <xTaskPriorityDisinherit+0x50>
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	60bb      	str	r3, [r7, #8]
 8008476:	e7fe      	b.n	8008476 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847c:	1e5a      	subs	r2, r3, #1
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848a:	429a      	cmp	r2, r3
 800848c:	d044      	beq.n	8008518 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008492:	2b00      	cmp	r3, #0
 8008494:	d140      	bne.n	8008518 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	3304      	adds	r3, #4
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fc96 	bl	8006dcc <uxListRemove>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d115      	bne.n	80084d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084aa:	491f      	ldr	r1, [pc, #124]	; (8008528 <xTaskPriorityDisinherit+0x100>)
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <xTaskPriorityDisinherit+0xaa>
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	2201      	movs	r2, #1
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	43da      	mvns	r2, r3
 80084c8:	4b18      	ldr	r3, [pc, #96]	; (800852c <xTaskPriorityDisinherit+0x104>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4013      	ands	r3, r2
 80084ce:	4a17      	ldr	r2, [pc, #92]	; (800852c <xTaskPriorityDisinherit+0x104>)
 80084d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	f1c3 0207 	rsb	r2, r3, #7
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	2201      	movs	r2, #1
 80084ec:	409a      	lsls	r2, r3
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <xTaskPriorityDisinherit+0x104>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	4a0d      	ldr	r2, [pc, #52]	; (800852c <xTaskPriorityDisinherit+0x104>)
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4a08      	ldr	r2, [pc, #32]	; (8008528 <xTaskPriorityDisinherit+0x100>)
 8008506:	441a      	add	r2, r3
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	3304      	adds	r3, #4
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7fe fbff 	bl	8006d12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008518:	697b      	ldr	r3, [r7, #20]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200000b4 	.word	0x200000b4
 8008528:	200000b8 	.word	0x200000b8
 800852c:	200001bc 	.word	0x200001bc

08008530 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800853a:	4b29      	ldr	r3, [pc, #164]	; (80085e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008540:	4b28      	ldr	r3, [pc, #160]	; (80085e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3304      	adds	r3, #4
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fc40 	bl	8006dcc <uxListRemove>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008552:	4b24      	ldr	r3, [pc, #144]	; (80085e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	2201      	movs	r2, #1
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	43da      	mvns	r2, r3
 8008560:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4013      	ands	r3, r2
 8008566:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008568:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008570:	d10a      	bne.n	8008588 <prvAddCurrentTaskToDelayedList+0x58>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008578:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	481a      	ldr	r0, [pc, #104]	; (80085ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008582:	f7fe fbc6 	bl	8006d12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008586:	e026      	b.n	80085d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008590:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	429a      	cmp	r2, r3
 800859e:	d209      	bcs.n	80085b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085a0:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f7fe fbd4 	bl	8006d5a <vListInsert>
}
 80085b2:	e010      	b.n	80085d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085b4:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fe fbca 	bl	8006d5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085c6:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d202      	bcs.n	80085d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085d0:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6013      	str	r3, [r2, #0]
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200001b8 	.word	0x200001b8
 80085e4:	200000b4 	.word	0x200000b4
 80085e8:	200001bc 	.word	0x200001bc
 80085ec:	200001a0 	.word	0x200001a0
 80085f0:	20000170 	.word	0x20000170
 80085f4:	2000016c 	.word	0x2000016c
 80085f8:	200001d4 	.word	0x200001d4

080085fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3b04      	subs	r3, #4
 800860c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3b04      	subs	r3, #4
 800861a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0201 	bic.w	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3b04      	subs	r3, #4
 800862a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800862c:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <pxPortInitialiseStack+0x64>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3b14      	subs	r3, #20
 8008636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3b04      	subs	r3, #4
 8008642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f06f 0202 	mvn.w	r2, #2
 800864a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3b20      	subs	r3, #32
 8008650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008652:	68fb      	ldr	r3, [r7, #12]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	08008665 	.word	0x08008665

08008664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <prvTaskExitError+0x50>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d009      	beq.n	800868c <prvTaskExitError+0x28>
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	e7fe      	b.n	800868a <prvTaskExitError+0x26>
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800869e:	bf00      	nop
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0fc      	beq.n	80086a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000028 	.word	0x20000028
	...

080086c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <pxCurrentTCBConst2>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	6808      	ldr	r0, [r1, #0]
 80086c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	f380 8809 	msr	PSP, r0
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8811 	msr	BASEPRI, r0
 80086da:	4770      	bx	lr
 80086dc:	f3af 8000 	nop.w

080086e0 <pxCurrentTCBConst2>:
 80086e0:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086e8:	4808      	ldr	r0, [pc, #32]	; (800870c <prvPortStartFirstTask+0x24>)
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f380 8808 	msr	MSP, r0
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8814 	msr	CONTROL, r0
 80086fa:	b662      	cpsie	i
 80086fc:	b661      	cpsie	f
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	df00      	svc	0
 8008708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800870a:	bf00      	nop
 800870c:	e000ed08 	.word	0xe000ed08

08008710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008716:	4b44      	ldr	r3, [pc, #272]	; (8008828 <xPortStartScheduler+0x118>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a44      	ldr	r2, [pc, #272]	; (800882c <xPortStartScheduler+0x11c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d109      	bne.n	8008734 <xPortStartScheduler+0x24>
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e7fe      	b.n	8008732 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008734:	4b3c      	ldr	r3, [pc, #240]	; (8008828 <xPortStartScheduler+0x118>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a3d      	ldr	r2, [pc, #244]	; (8008830 <xPortStartScheduler+0x120>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d109      	bne.n	8008752 <xPortStartScheduler+0x42>
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e7fe      	b.n	8008750 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008752:	4b38      	ldr	r3, [pc, #224]	; (8008834 <xPortStartScheduler+0x124>)
 8008754:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	22ff      	movs	r2, #255	; 0xff
 8008762:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008774:	b2da      	uxtb	r2, r3
 8008776:	4b30      	ldr	r3, [pc, #192]	; (8008838 <xPortStartScheduler+0x128>)
 8008778:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800877a:	4b30      	ldr	r3, [pc, #192]	; (800883c <xPortStartScheduler+0x12c>)
 800877c:	2207      	movs	r2, #7
 800877e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008780:	e009      	b.n	8008796 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <xPortStartScheduler+0x12c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3b01      	subs	r3, #1
 8008788:	4a2c      	ldr	r2, [pc, #176]	; (800883c <xPortStartScheduler+0x12c>)
 800878a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	b2db      	uxtb	r3, r3
 8008794:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d0ef      	beq.n	8008782 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <xPortStartScheduler+0x12c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1c3 0307 	rsb	r3, r3, #7
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d009      	beq.n	80087c2 <xPortStartScheduler+0xb2>
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	e7fe      	b.n	80087c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087c2:	4b1e      	ldr	r3, [pc, #120]	; (800883c <xPortStartScheduler+0x12c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	4a1c      	ldr	r2, [pc, #112]	; (800883c <xPortStartScheduler+0x12c>)
 80087ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087cc:	4b1b      	ldr	r3, [pc, #108]	; (800883c <xPortStartScheduler+0x12c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <xPortStartScheduler+0x12c>)
 80087d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <xPortStartScheduler+0x130>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a16      	ldr	r2, [pc, #88]	; (8008840 <xPortStartScheduler+0x130>)
 80087e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087ec:	4b14      	ldr	r3, [pc, #80]	; (8008840 <xPortStartScheduler+0x130>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a13      	ldr	r2, [pc, #76]	; (8008840 <xPortStartScheduler+0x130>)
 80087f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087f8:	f000 f8d6 	bl	80089a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <xPortStartScheduler+0x134>)
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008802:	f000 f8f5 	bl	80089f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008806:	4b10      	ldr	r3, [pc, #64]	; (8008848 <xPortStartScheduler+0x138>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a0f      	ldr	r2, [pc, #60]	; (8008848 <xPortStartScheduler+0x138>)
 800880c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008810:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008812:	f7ff ff69 	bl	80086e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008816:	f7ff fbaf 	bl	8007f78 <vTaskSwitchContext>
	prvTaskExitError();
 800881a:	f7ff ff23 	bl	8008664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	e000ed00 	.word	0xe000ed00
 800882c:	410fc271 	.word	0x410fc271
 8008830:	410fc270 	.word	0x410fc270
 8008834:	e000e400 	.word	0xe000e400
 8008838:	200001e0 	.word	0x200001e0
 800883c:	200001e4 	.word	0x200001e4
 8008840:	e000ed20 	.word	0xe000ed20
 8008844:	20000028 	.word	0x20000028
 8008848:	e000ef34 	.word	0xe000ef34

0800884c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008864:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <vPortEnterCritical+0x54>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	4a0d      	ldr	r2, [pc, #52]	; (80088a0 <vPortEnterCritical+0x54>)
 800886c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800886e:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <vPortEnterCritical+0x54>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d10e      	bne.n	8008894 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008876:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <vPortEnterCritical+0x58>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d009      	beq.n	8008894 <vPortEnterCritical+0x48>
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	e7fe      	b.n	8008892 <vPortEnterCritical+0x46>
	}
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20000028 	.word	0x20000028
 80088a4:	e000ed04 	.word	0xe000ed04

080088a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088ae:	4b11      	ldr	r3, [pc, #68]	; (80088f4 <vPortExitCritical+0x4c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <vPortExitCritical+0x22>
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	e7fe      	b.n	80088c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <vPortExitCritical+0x4c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	4a08      	ldr	r2, [pc, #32]	; (80088f4 <vPortExitCritical+0x4c>)
 80088d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <vPortExitCritical+0x4c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d104      	bne.n	80088e6 <vPortExitCritical+0x3e>
 80088dc:	2300      	movs	r3, #0
 80088de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000028 	.word	0x20000028
	...

08008900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008900:	f3ef 8009 	mrs	r0, PSP
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	4b15      	ldr	r3, [pc, #84]	; (8008960 <pxCurrentTCBConst>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f01e 0f10 	tst.w	lr, #16
 8008910:	bf08      	it	eq
 8008912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891a:	6010      	str	r0, [r2, #0]
 800891c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008924:	f380 8811 	msr	BASEPRI, r0
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f7ff fb22 	bl	8007f78 <vTaskSwitchContext>
 8008934:	f04f 0000 	mov.w	r0, #0
 8008938:	f380 8811 	msr	BASEPRI, r0
 800893c:	bc09      	pop	{r0, r3}
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	6808      	ldr	r0, [r1, #0]
 8008942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008946:	f01e 0f10 	tst.w	lr, #16
 800894a:	bf08      	it	eq
 800894c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008950:	f380 8809 	msr	PSP, r0
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst>:
 8008960:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008980:	f7ff fa3e 	bl	8007e00 <xTaskIncrementTick>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <xPortSysTickHandler+0x3c>)
 800898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	2300      	movs	r3, #0
 8008994:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089ac:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <vPortSetupTimerInterrupt+0x34>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <vPortSetupTimerInterrupt+0x38>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089b8:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <vPortSetupTimerInterrupt+0x3c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0a      	ldr	r2, [pc, #40]	; (80089e8 <vPortSetupTimerInterrupt+0x40>)
 80089be:	fba2 2303 	umull	r2, r3, r2, r3
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	4a09      	ldr	r2, [pc, #36]	; (80089ec <vPortSetupTimerInterrupt+0x44>)
 80089c6:	3b01      	subs	r3, #1
 80089c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ca:	4b04      	ldr	r3, [pc, #16]	; (80089dc <vPortSetupTimerInterrupt+0x34>)
 80089cc:	2207      	movs	r2, #7
 80089ce:	601a      	str	r2, [r3, #0]
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	e000e010 	.word	0xe000e010
 80089e0:	e000e018 	.word	0xe000e018
 80089e4:	2000002c 	.word	0x2000002c
 80089e8:	10624dd3 	.word	0x10624dd3
 80089ec:	e000e014 	.word	0xe000e014

080089f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a00 <vPortEnableVFP+0x10>
 80089f4:	6801      	ldr	r1, [r0, #0]
 80089f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089fa:	6001      	str	r1, [r0, #0]
 80089fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089fe:	bf00      	nop
 8008a00:	e000ed88 	.word	0xe000ed88

08008a04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a0a:	f3ef 8305 	mrs	r3, IPSR
 8008a0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b0f      	cmp	r3, #15
 8008a14:	d913      	bls.n	8008a3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a16:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <vPortValidateInterruptPriority+0x6c>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a20:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <vPortValidateInterruptPriority+0x70>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	7afa      	ldrb	r2, [r7, #11]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d209      	bcs.n	8008a3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	e7fe      	b.n	8008a3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a3e:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <vPortValidateInterruptPriority+0x74>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <vPortValidateInterruptPriority+0x78>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d909      	bls.n	8008a62 <vPortValidateInterruptPriority+0x5e>
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	e7fe      	b.n	8008a60 <vPortValidateInterruptPriority+0x5c>
	}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	e000e3f0 	.word	0xe000e3f0
 8008a74:	200001e0 	.word	0x200001e0
 8008a78:	e000ed0c 	.word	0xe000ed0c
 8008a7c:	200001e4 	.word	0x200001e4

08008a80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	; 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a8c:	f7ff f90e 	bl	8007cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a90:	4b57      	ldr	r3, [pc, #348]	; (8008bf0 <pvPortMalloc+0x170>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a98:	f000 f90c 	bl	8008cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a9c:	4b55      	ldr	r3, [pc, #340]	; (8008bf4 <pvPortMalloc+0x174>)
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 808c 	bne.w	8008bc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01c      	beq.n	8008aea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d013      	beq.n	8008aea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f023 0307 	bic.w	r3, r3, #7
 8008ac8:	3308      	adds	r3, #8
 8008aca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <pvPortMalloc+0x6a>
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	e7fe      	b.n	8008ae8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d068      	beq.n	8008bc2 <pvPortMalloc+0x142>
 8008af0:	4b41      	ldr	r3, [pc, #260]	; (8008bf8 <pvPortMalloc+0x178>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d863      	bhi.n	8008bc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008afa:	4b40      	ldr	r3, [pc, #256]	; (8008bfc <pvPortMalloc+0x17c>)
 8008afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008afe:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <pvPortMalloc+0x17c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b04:	e004      	b.n	8008b10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d903      	bls.n	8008b22 <pvPortMalloc+0xa2>
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f1      	bne.n	8008b06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b22:	4b33      	ldr	r3, [pc, #204]	; (8008bf0 <pvPortMalloc+0x170>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d04a      	beq.n	8008bc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2208      	movs	r2, #8
 8008b32:	4413      	add	r3, r2
 8008b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	2308      	movs	r3, #8
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d91e      	bls.n	8008b8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <pvPortMalloc+0xf4>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	e7fe      	b.n	8008b72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	1ad2      	subs	r2, r2, r3
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b86:	69b8      	ldr	r0, [r7, #24]
 8008b88:	f000 f8f6 	bl	8008d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b8c:	4b1a      	ldr	r3, [pc, #104]	; (8008bf8 <pvPortMalloc+0x178>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <pvPortMalloc+0x178>)
 8008b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b9a:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <pvPortMalloc+0x178>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <pvPortMalloc+0x180>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d203      	bcs.n	8008bae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <pvPortMalloc+0x178>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a15      	ldr	r2, [pc, #84]	; (8008c00 <pvPortMalloc+0x180>)
 8008bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	4b10      	ldr	r3, [pc, #64]	; (8008bf4 <pvPortMalloc+0x174>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bc2:	f7ff f881 	bl	8007cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <pvPortMalloc+0x164>
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	e7fe      	b.n	8008be2 <pvPortMalloc+0x162>
	return pvReturn;
 8008be4:	69fb      	ldr	r3, [r7, #28]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3728      	adds	r7, #40	; 0x28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20003df0 	.word	0x20003df0
 8008bf4:	20003dfc 	.word	0x20003dfc
 8008bf8:	20003df4 	.word	0x20003df4
 8008bfc:	20003de8 	.word	0x20003de8
 8008c00:	20003df8 	.word	0x20003df8

08008c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d046      	beq.n	8008ca4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c16:	2308      	movs	r3, #8
 8008c18:	425b      	negs	r3, r3
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	4b20      	ldr	r3, [pc, #128]	; (8008cac <vPortFree+0xa8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <vPortFree+0x42>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e7fe      	b.n	8008c44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <vPortFree+0x5e>
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	60bb      	str	r3, [r7, #8]
 8008c60:	e7fe      	b.n	8008c60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <vPortFree+0xa8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d019      	beq.n	8008ca4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d115      	bne.n	8008ca4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <vPortFree+0xa8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	43db      	mvns	r3, r3
 8008c82:	401a      	ands	r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c88:	f7ff f810 	bl	8007cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <vPortFree+0xac>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4413      	add	r3, r2
 8008c96:	4a06      	ldr	r2, [pc, #24]	; (8008cb0 <vPortFree+0xac>)
 8008c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c9a:	6938      	ldr	r0, [r7, #16]
 8008c9c:	f000 f86c 	bl	8008d78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ca0:	f7ff f812 	bl	8007cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ca4:	bf00      	nop
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20003dfc 	.word	0x20003dfc
 8008cb0:	20003df4 	.word	0x20003df4

08008cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cc0:	4b27      	ldr	r3, [pc, #156]	; (8008d60 <prvHeapInit+0xac>)
 8008cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00c      	beq.n	8008ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3307      	adds	r3, #7
 8008cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0307 	bic.w	r3, r3, #7
 8008cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <prvHeapInit+0xac>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cec:	4a1d      	ldr	r2, [pc, #116]	; (8008d64 <prvHeapInit+0xb0>)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cf2:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <prvHeapInit+0xb0>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d00:	2208      	movs	r2, #8
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0307 	bic.w	r3, r3, #7
 8008d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a15      	ldr	r2, [pc, #84]	; (8008d68 <prvHeapInit+0xb4>)
 8008d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <prvHeapInit+0xb4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d1e:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <prvHeapInit+0xb4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <prvHeapInit+0xb4>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <prvHeapInit+0xb8>)
 8008d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <prvHeapInit+0xbc>)
 8008d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <prvHeapInit+0xc0>)
 8008d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	200001e8 	.word	0x200001e8
 8008d64:	20003de8 	.word	0x20003de8
 8008d68:	20003df0 	.word	0x20003df0
 8008d6c:	20003df8 	.word	0x20003df8
 8008d70:	20003df4 	.word	0x20003df4
 8008d74:	20003dfc 	.word	0x20003dfc

08008d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <prvInsertBlockIntoFreeList+0xac>)
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <prvInsertBlockIntoFreeList+0x14>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d8f7      	bhi.n	8008d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d108      	bne.n	8008dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	441a      	add	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d118      	bne.n	8008e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b15      	ldr	r3, [pc, #84]	; (8008e28 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d00d      	beq.n	8008df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	441a      	add	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e008      	b.n	8008e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <prvInsertBlockIntoFreeList+0xb0>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e003      	b.n	8008e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d002      	beq.n	8008e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20003de8 	.word	0x20003de8
 8008e28:	20003df0 	.word	0x20003df0

08008e2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4a07      	ldr	r2, [pc, #28]	; (8008e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a06      	ldr	r2, [pc, #24]	; (8008e5c <vApplicationGetIdleTaskMemory+0x30>)
 8008e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2280      	movs	r2, #128	; 0x80
 8008e48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8008e4a:	bf00      	nop
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	20003e00 	.word	0x20003e00
 8008e5c:	20003e54 	.word	0x20003e54

08008e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e60:	b5b0      	push	{r4, r5, r7, lr}
 8008e62:	b0a4      	sub	sp, #144	; 0x90
 8008e64:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e66:	f7f7 fb33 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e6a:	f000 f875 	bl	8008f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e6e:	f000 f989 	bl	8009184 <MX_GPIO_Init>
  MX_I2C1_Init();
 8008e72:	f000 f8f3 	bl	800905c <MX_I2C1_Init>
  MX_I2S3_Init();
 8008e76:	f000 f91f 	bl	80090b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8008e7a:	f000 f94d 	bl	8009118 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008e7e:	4b30      	ldr	r3, [pc, #192]	; (8008f40 <main+0xe0>)
 8008e80:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8008e84:	461d      	mov	r5, r3
 8008e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fd fdd0 	bl	8006a3e <osThreadCreate>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b28      	ldr	r3, [pc, #160]	; (8008f44 <main+0xe4>)
 8008ea2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(defaultTask1, StartDefaultTask1, osPriorityNormal, 0, 128);
 8008ea4:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <main+0xe8>)
 8008ea6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8008eaa:	461d      	mov	r5, r3
 8008eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask1), NULL);
 8008eb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fdbd 	bl	8006a3e <osThreadCreate>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	4b1f      	ldr	r3, [pc, #124]	; (8008f44 <main+0xe4>)
 8008ec8:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 8008eca:	4b20      	ldr	r3, [pc, #128]	; (8008f4c <main+0xec>)
 8008ecc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8008ed0:	461d      	mov	r5, r3
 8008ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 8008ede:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fd fdaa 	bl	8006a3e <osThreadCreate>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <main+0xe4>)
 8008eee:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask3, StartDefaultTask3, osPriorityNormal, 0, 128);
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <main+0xf0>)
 8008ef2:	f107 0420 	add.w	r4, r7, #32
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask3), NULL);
 8008f04:	f107 0320 	add.w	r3, r7, #32
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fd fd97 	bl	8006a3e <osThreadCreate>
 8008f10:	4602      	mov	r2, r0
 8008f12:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <main+0xe4>)
 8008f14:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask4, StartDefaultTask4, osPriorityNormal, 0, 128);
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <main+0xf4>)
 8008f18:	1d3c      	adds	r4, r7, #4
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask4), NULL);
 8008f28:	1d3b      	adds	r3, r7, #4
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fd fd86 	bl	8006a3e <osThreadCreate>
 8008f32:	4602      	mov	r2, r0
 8008f34:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <main+0xe4>)
 8008f36:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008f38:	f7fd fd7a 	bl	8006a30 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008f3c:	e7fe      	b.n	8008f3c <main+0xdc>
 8008f3e:	bf00      	nop
 8008f40:	0800a074 	.word	0x0800a074
 8008f44:	20004068 	.word	0x20004068
 8008f48:	0800a0a0 	.word	0x0800a0a0
 8008f4c:	0800a0cc 	.word	0x0800a0cc
 8008f50:	0800a0f8 	.word	0x0800a0f8
 8008f54:	0800a124 	.word	0x0800a124

08008f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b098      	sub	sp, #96	; 0x60
 8008f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f62:	2230      	movs	r2, #48	; 0x30
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 ff8d 	bl	8009e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f6c:	f107 031c 	add.w	r3, r7, #28
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	605a      	str	r2, [r3, #4]
 8008f76:	609a      	str	r2, [r3, #8]
 8008f78:	60da      	str	r2, [r3, #12]
 8008f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	609a      	str	r2, [r3, #8]
 8008f88:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	4b31      	ldr	r3, [pc, #196]	; (8009054 <SystemClock_Config+0xfc>)
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	4a30      	ldr	r2, [pc, #192]	; (8009054 <SystemClock_Config+0xfc>)
 8008f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f98:	6413      	str	r3, [r2, #64]	; 0x40
 8008f9a:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <SystemClock_Config+0xfc>)
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa2:	60bb      	str	r3, [r7, #8]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	607b      	str	r3, [r7, #4]
 8008faa:	4b2b      	ldr	r3, [pc, #172]	; (8009058 <SystemClock_Config+0x100>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a2a      	ldr	r2, [pc, #168]	; (8009058 <SystemClock_Config+0x100>)
 8008fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	4b28      	ldr	r3, [pc, #160]	; (8009058 <SystemClock_Config+0x100>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008fd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008fda:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008fde:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008fe4:	2307      	movs	r3, #7
 8008fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fa f813 	bl	8003018 <HAL_RCC_OscConfig>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8008ff8:	f000 fa14 	bl	8009424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ffc:	230f      	movs	r3, #15
 8008ffe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009000:	2302      	movs	r3, #2
 8009002:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009004:	2300      	movs	r3, #0
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800900e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009014:	f107 031c 	add.w	r3, r7, #28
 8009018:	2105      	movs	r1, #5
 800901a:	4618      	mov	r0, r3
 800901c:	f7fa fa3e 	bl	800349c <HAL_RCC_ClockConfig>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8009026:	f000 f9fd 	bl	8009424 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800902a:	2301      	movs	r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800902e:	23c0      	movs	r3, #192	; 0xc0
 8009030:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009032:	2302      	movs	r3, #2
 8009034:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009036:	f107 030c 	add.w	r3, r7, #12
 800903a:	4618      	mov	r0, r3
 800903c:	f7fa fc08 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009046:	f000 f9ed 	bl	8009424 <Error_Handler>
  }
}
 800904a:	bf00      	nop
 800904c:	3760      	adds	r7, #96	; 0x60
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	40023800 	.word	0x40023800
 8009058:	40007000 	.word	0x40007000

0800905c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <MX_I2C1_Init+0x50>)
 8009062:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <MX_I2C1_Init+0x54>)
 8009064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009066:	4b11      	ldr	r3, [pc, #68]	; (80090ac <MX_I2C1_Init+0x50>)
 8009068:	4a12      	ldr	r2, [pc, #72]	; (80090b4 <MX_I2C1_Init+0x58>)
 800906a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <MX_I2C1_Init+0x50>)
 800906e:	2200      	movs	r2, #0
 8009070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009072:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <MX_I2C1_Init+0x50>)
 8009074:	2200      	movs	r2, #0
 8009076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <MX_I2C1_Init+0x50>)
 800907a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800907e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <MX_I2C1_Init+0x50>)
 8009082:	2200      	movs	r2, #0
 8009084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <MX_I2C1_Init+0x50>)
 8009088:	2200      	movs	r2, #0
 800908a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <MX_I2C1_Init+0x50>)
 800908e:	2200      	movs	r2, #0
 8009090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <MX_I2C1_Init+0x50>)
 8009094:	2200      	movs	r2, #0
 8009096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009098:	4804      	ldr	r0, [pc, #16]	; (80090ac <MX_I2C1_Init+0x50>)
 800909a:	f7f9 f9f5 	bl	8002488 <HAL_I2C_Init>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80090a4:	f000 f9be 	bl	8009424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80090a8:	bf00      	nop
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	2000406c 	.word	0x2000406c
 80090b0:	40005400 	.word	0x40005400
 80090b4:	000186a0 	.word	0x000186a0

080090b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80090bc:	4b13      	ldr	r3, [pc, #76]	; (800910c <MX_I2S3_Init+0x54>)
 80090be:	4a14      	ldr	r2, [pc, #80]	; (8009110 <MX_I2S3_Init+0x58>)
 80090c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80090c2:	4b12      	ldr	r3, [pc, #72]	; (800910c <MX_I2S3_Init+0x54>)
 80090c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80090ca:	4b10      	ldr	r3, [pc, #64]	; (800910c <MX_I2S3_Init+0x54>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80090d0:	4b0e      	ldr	r3, [pc, #56]	; (800910c <MX_I2S3_Init+0x54>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80090d6:	4b0d      	ldr	r3, [pc, #52]	; (800910c <MX_I2S3_Init+0x54>)
 80090d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80090de:	4b0b      	ldr	r3, [pc, #44]	; (800910c <MX_I2S3_Init+0x54>)
 80090e0:	4a0c      	ldr	r2, [pc, #48]	; (8009114 <MX_I2S3_Init+0x5c>)
 80090e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80090e4:	4b09      	ldr	r3, [pc, #36]	; (800910c <MX_I2S3_Init+0x54>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80090ea:	4b08      	ldr	r3, [pc, #32]	; (800910c <MX_I2S3_Init+0x54>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <MX_I2S3_Init+0x54>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80090f6:	4805      	ldr	r0, [pc, #20]	; (800910c <MX_I2S3_Init+0x54>)
 80090f8:	f7f9 faee 	bl	80026d8 <HAL_I2S_Init>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8009102:	f000 f98f 	bl	8009424 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8009106:	bf00      	nop
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20004118 	.word	0x20004118
 8009110:	40003c00 	.word	0x40003c00
 8009114:	00017700 	.word	0x00017700

08009118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800911c:	4b17      	ldr	r3, [pc, #92]	; (800917c <MX_SPI1_Init+0x64>)
 800911e:	4a18      	ldr	r2, [pc, #96]	; (8009180 <MX_SPI1_Init+0x68>)
 8009120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009122:	4b16      	ldr	r3, [pc, #88]	; (800917c <MX_SPI1_Init+0x64>)
 8009124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <MX_SPI1_Init+0x64>)
 800912c:	2200      	movs	r2, #0
 800912e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009130:	4b12      	ldr	r3, [pc, #72]	; (800917c <MX_SPI1_Init+0x64>)
 8009132:	2200      	movs	r2, #0
 8009134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <MX_SPI1_Init+0x64>)
 8009138:	2200      	movs	r2, #0
 800913a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <MX_SPI1_Init+0x64>)
 800913e:	2200      	movs	r2, #0
 8009140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009142:	4b0e      	ldr	r3, [pc, #56]	; (800917c <MX_SPI1_Init+0x64>)
 8009144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <MX_SPI1_Init+0x64>)
 800914c:	2200      	movs	r2, #0
 800914e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <MX_SPI1_Init+0x64>)
 8009152:	2200      	movs	r2, #0
 8009154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <MX_SPI1_Init+0x64>)
 8009158:	2200      	movs	r2, #0
 800915a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <MX_SPI1_Init+0x64>)
 800915e:	2200      	movs	r2, #0
 8009160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009162:	4b06      	ldr	r3, [pc, #24]	; (800917c <MX_SPI1_Init+0x64>)
 8009164:	220a      	movs	r2, #10
 8009166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009168:	4804      	ldr	r0, [pc, #16]	; (800917c <MX_SPI1_Init+0x64>)
 800916a:	f7fa fcaf 	bl	8003acc <HAL_SPI_Init>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009174:	f000 f956 	bl	8009424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009178:	bf00      	nop
 800917a:	bd80      	pop	{r7, pc}
 800917c:	200040c0 	.word	0x200040c0
 8009180:	40013000 	.word	0x40013000

08009184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08c      	sub	sp, #48	; 0x30
 8009188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800918a:	f107 031c 	add.w	r3, r7, #28
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	605a      	str	r2, [r3, #4]
 8009194:	609a      	str	r2, [r3, #8]
 8009196:	60da      	str	r2, [r3, #12]
 8009198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	4b71      	ldr	r3, [pc, #452]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	4a70      	ldr	r2, [pc, #448]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091a4:	f043 0310 	orr.w	r3, r3, #16
 80091a8:	6313      	str	r3, [r2, #48]	; 0x30
 80091aa:	4b6e      	ldr	r3, [pc, #440]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	61bb      	str	r3, [r7, #24]
 80091b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	4b6a      	ldr	r3, [pc, #424]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091be:	4a69      	ldr	r2, [pc, #420]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091c0:	f043 0304 	orr.w	r3, r3, #4
 80091c4:	6313      	str	r3, [r2, #48]	; 0x30
 80091c6:	4b67      	ldr	r3, [pc, #412]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80091d2:	2300      	movs	r3, #0
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	4b63      	ldr	r3, [pc, #396]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	4a62      	ldr	r2, [pc, #392]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	6313      	str	r3, [r2, #48]	; 0x30
 80091e2:	4b60      	ldr	r3, [pc, #384]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ea:	613b      	str	r3, [r7, #16]
 80091ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	4b5c      	ldr	r3, [pc, #368]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	4a5b      	ldr	r2, [pc, #364]	; (8009364 <MX_GPIO_Init+0x1e0>)
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	6313      	str	r3, [r2, #48]	; 0x30
 80091fe:	4b59      	ldr	r3, [pc, #356]	; (8009364 <MX_GPIO_Init+0x1e0>)
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	4b55      	ldr	r3, [pc, #340]	; (8009364 <MX_GPIO_Init+0x1e0>)
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	4a54      	ldr	r2, [pc, #336]	; (8009364 <MX_GPIO_Init+0x1e0>)
 8009214:	f043 0302 	orr.w	r3, r3, #2
 8009218:	6313      	str	r3, [r2, #48]	; 0x30
 800921a:	4b52      	ldr	r3, [pc, #328]	; (8009364 <MX_GPIO_Init+0x1e0>)
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	60bb      	str	r3, [r7, #8]
 8009224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009226:	2300      	movs	r3, #0
 8009228:	607b      	str	r3, [r7, #4]
 800922a:	4b4e      	ldr	r3, [pc, #312]	; (8009364 <MX_GPIO_Init+0x1e0>)
 800922c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922e:	4a4d      	ldr	r2, [pc, #308]	; (8009364 <MX_GPIO_Init+0x1e0>)
 8009230:	f043 0308 	orr.w	r3, r3, #8
 8009234:	6313      	str	r3, [r2, #48]	; 0x30
 8009236:	4b4b      	ldr	r3, [pc, #300]	; (8009364 <MX_GPIO_Init+0x1e0>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	607b      	str	r3, [r7, #4]
 8009240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8009242:	2200      	movs	r2, #0
 8009244:	2108      	movs	r1, #8
 8009246:	4848      	ldr	r0, [pc, #288]	; (8009368 <MX_GPIO_Init+0x1e4>)
 8009248:	f7f7 fc82 	bl	8000b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800924c:	2201      	movs	r2, #1
 800924e:	2101      	movs	r1, #1
 8009250:	4846      	ldr	r0, [pc, #280]	; (800936c <MX_GPIO_Init+0x1e8>)
 8009252:	f7f7 fc7d 	bl	8000b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8009256:	2200      	movs	r2, #0
 8009258:	f24f 0110 	movw	r1, #61456	; 0xf010
 800925c:	4844      	ldr	r0, [pc, #272]	; (8009370 <MX_GPIO_Init+0x1ec>)
 800925e:	f7f7 fc77 	bl	8000b50 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8009262:	2308      	movs	r3, #8
 8009264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009266:	2301      	movs	r3, #1
 8009268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926a:	2300      	movs	r3, #0
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800926e:	2300      	movs	r3, #0
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8009272:	f107 031c 	add.w	r3, r7, #28
 8009276:	4619      	mov	r1, r3
 8009278:	483b      	ldr	r0, [pc, #236]	; (8009368 <MX_GPIO_Init+0x1e4>)
 800927a:	f7f7 facf 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800927e:	2301      	movs	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009282:	2301      	movs	r3, #1
 8009284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009286:	2300      	movs	r3, #0
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800928a:	2300      	movs	r3, #0
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800928e:	f107 031c 	add.w	r3, r7, #28
 8009292:	4619      	mov	r1, r3
 8009294:	4835      	ldr	r0, [pc, #212]	; (800936c <MX_GPIO_Init+0x1e8>)
 8009296:	f7f7 fac1 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800929a:	2308      	movs	r3, #8
 800929c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929e:	2302      	movs	r3, #2
 80092a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092a6:	2300      	movs	r3, #0
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80092aa:	2305      	movs	r3, #5
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80092ae:	f107 031c 	add.w	r3, r7, #28
 80092b2:	4619      	mov	r1, r3
 80092b4:	482d      	ldr	r0, [pc, #180]	; (800936c <MX_GPIO_Init+0x1e8>)
 80092b6:	f7f7 fab1 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80092ba:	2301      	movs	r3, #1
 80092bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80092be:	4b2d      	ldr	r3, [pc, #180]	; (8009374 <MX_GPIO_Init+0x1f0>)
 80092c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80092c6:	f107 031c 	add.w	r3, r7, #28
 80092ca:	4619      	mov	r1, r3
 80092cc:	482a      	ldr	r0, [pc, #168]	; (8009378 <MX_GPIO_Init+0x1f4>)
 80092ce:	f7f7 faa5 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80092d2:	2304      	movs	r3, #4
 80092d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092d6:	2300      	movs	r3, #0
 80092d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80092de:	f107 031c 	add.w	r3, r7, #28
 80092e2:	4619      	mov	r1, r3
 80092e4:	4825      	ldr	r0, [pc, #148]	; (800937c <MX_GPIO_Init+0x1f8>)
 80092e6:	f7f7 fa99 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80092ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f0:	2302      	movs	r3, #2
 80092f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092f8:	2300      	movs	r3, #0
 80092fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80092fc:	2305      	movs	r3, #5
 80092fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8009300:	f107 031c 	add.w	r3, r7, #28
 8009304:	4619      	mov	r1, r3
 8009306:	481d      	ldr	r0, [pc, #116]	; (800937c <MX_GPIO_Init+0x1f8>)
 8009308:	f7f7 fa88 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800930c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8009310:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009312:	2301      	movs	r3, #1
 8009314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009316:	2300      	movs	r3, #0
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800931a:	2300      	movs	r3, #0
 800931c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800931e:	f107 031c 	add.w	r3, r7, #28
 8009322:	4619      	mov	r1, r3
 8009324:	4812      	ldr	r0, [pc, #72]	; (8009370 <MX_GPIO_Init+0x1ec>)
 8009326:	f7f7 fa79 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800932a:	2320      	movs	r3, #32
 800932c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800932e:	2300      	movs	r3, #0
 8009330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009332:	2300      	movs	r3, #0
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009336:	f107 031c 	add.w	r3, r7, #28
 800933a:	4619      	mov	r1, r3
 800933c:	480c      	ldr	r0, [pc, #48]	; (8009370 <MX_GPIO_Init+0x1ec>)
 800933e:	f7f7 fa6d 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8009342:	2302      	movs	r3, #2
 8009344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009346:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <MX_GPIO_Init+0x1f0>)
 8009348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800934a:	2300      	movs	r3, #0
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800934e:	f107 031c 	add.w	r3, r7, #28
 8009352:	4619      	mov	r1, r3
 8009354:	4804      	ldr	r0, [pc, #16]	; (8009368 <MX_GPIO_Init+0x1e4>)
 8009356:	f7f7 fa61 	bl	800081c <HAL_GPIO_Init>

}
 800935a:	bf00      	nop
 800935c:	3730      	adds	r7, #48	; 0x30
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40023800 	.word	0x40023800
 8009368:	40021000 	.word	0x40021000
 800936c:	40020800 	.word	0x40020800
 8009370:	40020c00 	.word	0x40020c00
 8009374:	10120000 	.word	0x10120000
 8009378:	40020000 	.word	0x40020000
 800937c:	40020400 	.word	0x40020400

08009380 <StartDefaultTask1>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used 
  * @retval None
  */
void StartDefaultTask1(void const * argument)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8009388:	f000 fa0c 	bl	80097a4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800938c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009390:	4803      	ldr	r0, [pc, #12]	; (80093a0 <StartDefaultTask1+0x20>)
 8009392:	f7f7 fbf6 	bl	8000b82 <HAL_GPIO_TogglePin>
    osDelay(50);
 8009396:	2032      	movs	r0, #50	; 0x32
 8009398:	f7fd fb9d 	bl	8006ad6 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800939c:	e7f6      	b.n	800938c <StartDefaultTask1+0xc>
 800939e:	bf00      	nop
 80093a0:	40020c00 	.word	0x40020c00

080093a4 <StartDefaultTask2>:
  }
  /* USER CODE END 5 */
}
void StartDefaultTask2(void const * argument)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80093ac:	f000 f9fa 	bl	80097a4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80093b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093b4:	4803      	ldr	r0, [pc, #12]	; (80093c4 <StartDefaultTask2+0x20>)
 80093b6:	f7f7 fbe4 	bl	8000b82 <HAL_GPIO_TogglePin>
	  osDelay(18);
 80093ba:	2012      	movs	r0, #18
 80093bc:	f7fd fb8b 	bl	8006ad6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80093c0:	e7f6      	b.n	80093b0 <StartDefaultTask2+0xc>
 80093c2:	bf00      	nop
 80093c4:	40020c00 	.word	0x40020c00

080093c8 <StartDefaultTask3>:
  }
  /* USER CODE END 5 */
}
void StartDefaultTask3(void const * argument)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80093d0:	f000 f9e8 	bl	80097a4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80093d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80093d8:	4803      	ldr	r0, [pc, #12]	; (80093e8 <StartDefaultTask3+0x20>)
 80093da:	f7f7 fbd2 	bl	8000b82 <HAL_GPIO_TogglePin>
	   osDelay(128);
 80093de:	2080      	movs	r0, #128	; 0x80
 80093e0:	f7fd fb79 	bl	8006ad6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80093e4:	e7f6      	b.n	80093d4 <StartDefaultTask3+0xc>
 80093e6:	bf00      	nop
 80093e8:	40020c00 	.word	0x40020c00

080093ec <StartDefaultTask4>:
  }
  /* USER CODE END 5 */
}
void StartDefaultTask4(void const * argument)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]



  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80093f4:	f000 f9d6 	bl	80097a4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80093f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093fc:	4803      	ldr	r0, [pc, #12]	; (800940c <StartDefaultTask4+0x20>)
 80093fe:	f7f7 fbc0 	bl	8000b82 <HAL_GPIO_TogglePin>
	  	  osDelay(64);
 8009402:	2040      	movs	r0, #64	; 0x40
 8009404:	f7fd fb67 	bl	8006ad6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8009408:	e7f6      	b.n	80093f8 <StartDefaultTask4+0xc>
 800940a:	bf00      	nop
 800940c:	40020c00 	.word	0x40020c00

08009410 <StartDefaultTask>:
  }
  /* USER CODE END 5 */
}
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8009418:	f000 f9c4 	bl	80097a4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800941c:	2001      	movs	r0, #1
 800941e:	f7fd fb5a 	bl	8006ad6 <osDelay>
 8009422:	e7fb      	b.n	800941c <StartDefaultTask+0xc>

08009424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009428:	bf00      	nop
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800943a:	2300      	movs	r3, #0
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	4b12      	ldr	r3, [pc, #72]	; (8009488 <HAL_MspInit+0x54>)
 8009440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009442:	4a11      	ldr	r2, [pc, #68]	; (8009488 <HAL_MspInit+0x54>)
 8009444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009448:	6453      	str	r3, [r2, #68]	; 0x44
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <HAL_MspInit+0x54>)
 800944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009452:	607b      	str	r3, [r7, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009456:	2300      	movs	r3, #0
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <HAL_MspInit+0x54>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	4a0a      	ldr	r2, [pc, #40]	; (8009488 <HAL_MspInit+0x54>)
 8009460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009464:	6413      	str	r3, [r2, #64]	; 0x40
 8009466:	4b08      	ldr	r3, [pc, #32]	; (8009488 <HAL_MspInit+0x54>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009472:	2200      	movs	r2, #0
 8009474:	210f      	movs	r1, #15
 8009476:	f06f 0001 	mvn.w	r0, #1
 800947a:	f7f7 f998 	bl	80007ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40023800 	.word	0x40023800

0800948c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	609a      	str	r2, [r3, #8]
 80094a0:	60da      	str	r2, [r3, #12]
 80094a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a19      	ldr	r2, [pc, #100]	; (8009510 <HAL_I2C_MspInit+0x84>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d12c      	bne.n	8009508 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	4b18      	ldr	r3, [pc, #96]	; (8009514 <HAL_I2C_MspInit+0x88>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	4a17      	ldr	r2, [pc, #92]	; (8009514 <HAL_I2C_MspInit+0x88>)
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	6313      	str	r3, [r2, #48]	; 0x30
 80094be:	4b15      	ldr	r3, [pc, #84]	; (8009514 <HAL_I2C_MspInit+0x88>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80094ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80094ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094d0:	2312      	movs	r3, #18
 80094d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094d4:	2301      	movs	r3, #1
 80094d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094d8:	2300      	movs	r3, #0
 80094da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80094dc:	2304      	movs	r3, #4
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	4619      	mov	r1, r3
 80094e6:	480c      	ldr	r0, [pc, #48]	; (8009518 <HAL_I2C_MspInit+0x8c>)
 80094e8:	f7f7 f998 	bl	800081c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	4b08      	ldr	r3, [pc, #32]	; (8009514 <HAL_I2C_MspInit+0x88>)
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	4a07      	ldr	r2, [pc, #28]	; (8009514 <HAL_I2C_MspInit+0x88>)
 80094f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094fa:	6413      	str	r3, [r2, #64]	; 0x40
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <HAL_I2C_MspInit+0x88>)
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009508:	bf00      	nop
 800950a:	3728      	adds	r7, #40	; 0x28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	40005400 	.word	0x40005400
 8009514:	40023800 	.word	0x40023800
 8009518:	40020400 	.word	0x40020400

0800951c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	; 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	605a      	str	r2, [r3, #4]
 800952e:	609a      	str	r2, [r3, #8]
 8009530:	60da      	str	r2, [r3, #12]
 8009532:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a28      	ldr	r2, [pc, #160]	; (80095dc <HAL_I2S_MspInit+0xc0>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d14a      	bne.n	80095d4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	4a26      	ldr	r2, [pc, #152]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800954c:	6413      	str	r3, [r2, #64]	; 0x40
 800954e:	4b24      	ldr	r3, [pc, #144]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009556:	613b      	str	r3, [r7, #16]
 8009558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009564:	f043 0301 	orr.w	r3, r3, #1
 8009568:	6313      	str	r3, [r2, #48]	; 0x30
 800956a:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009576:	2300      	movs	r3, #0
 8009578:	60bb      	str	r3, [r7, #8]
 800957a:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 800957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957e:	4a18      	ldr	r2, [pc, #96]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009580:	f043 0304 	orr.w	r3, r3, #4
 8009584:	6313      	str	r3, [r2, #48]	; 0x30
 8009586:	4b16      	ldr	r3, [pc, #88]	; (80095e0 <HAL_I2S_MspInit+0xc4>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	60bb      	str	r3, [r7, #8]
 8009590:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8009592:	2310      	movs	r3, #16
 8009594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009596:	2302      	movs	r3, #2
 8009598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800959a:	2300      	movs	r3, #0
 800959c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800959e:	2300      	movs	r3, #0
 80095a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80095a2:	2306      	movs	r3, #6
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	4619      	mov	r1, r3
 80095ac:	480d      	ldr	r0, [pc, #52]	; (80095e4 <HAL_I2S_MspInit+0xc8>)
 80095ae:	f7f7 f935 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80095b2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80095b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095b8:	2302      	movs	r3, #2
 80095ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095c0:	2300      	movs	r3, #0
 80095c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80095c4:	2306      	movs	r3, #6
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80095c8:	f107 0314 	add.w	r3, r7, #20
 80095cc:	4619      	mov	r1, r3
 80095ce:	4806      	ldr	r0, [pc, #24]	; (80095e8 <HAL_I2S_MspInit+0xcc>)
 80095d0:	f7f7 f924 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80095d4:	bf00      	nop
 80095d6:	3728      	adds	r7, #40	; 0x28
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	40003c00 	.word	0x40003c00
 80095e0:	40023800 	.word	0x40023800
 80095e4:	40020000 	.word	0x40020000
 80095e8:	40020800 	.word	0x40020800

080095ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095f4:	f107 0314 	add.w	r3, r7, #20
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	605a      	str	r2, [r3, #4]
 80095fe:	609a      	str	r2, [r3, #8]
 8009600:	60da      	str	r2, [r3, #12]
 8009602:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a19      	ldr	r2, [pc, #100]	; (8009670 <HAL_SPI_MspInit+0x84>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d12b      	bne.n	8009666 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]
 8009612:	4b18      	ldr	r3, [pc, #96]	; (8009674 <HAL_SPI_MspInit+0x88>)
 8009614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009616:	4a17      	ldr	r2, [pc, #92]	; (8009674 <HAL_SPI_MspInit+0x88>)
 8009618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800961c:	6453      	str	r3, [r2, #68]	; 0x44
 800961e:	4b15      	ldr	r3, [pc, #84]	; (8009674 <HAL_SPI_MspInit+0x88>)
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	4b11      	ldr	r3, [pc, #68]	; (8009674 <HAL_SPI_MspInit+0x88>)
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	4a10      	ldr	r2, [pc, #64]	; (8009674 <HAL_SPI_MspInit+0x88>)
 8009634:	f043 0301 	orr.w	r3, r3, #1
 8009638:	6313      	str	r3, [r2, #48]	; 0x30
 800963a:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <HAL_SPI_MspInit+0x88>)
 800963c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8009646:	23e0      	movs	r3, #224	; 0xe0
 8009648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800964a:	2302      	movs	r3, #2
 800964c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009652:	2300      	movs	r3, #0
 8009654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009656:	2305      	movs	r3, #5
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800965a:	f107 0314 	add.w	r3, r7, #20
 800965e:	4619      	mov	r1, r3
 8009660:	4805      	ldr	r0, [pc, #20]	; (8009678 <HAL_SPI_MspInit+0x8c>)
 8009662:	f7f7 f8db 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009666:	bf00      	nop
 8009668:	3728      	adds	r7, #40	; 0x28
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40013000 	.word	0x40013000
 8009674:	40023800 	.word	0x40023800
 8009678:	40020000 	.word	0x40020000

0800967c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009680:	bf00      	nop
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800968a:	b480      	push	{r7}
 800968c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800968e:	e7fe      	b.n	800968e <HardFault_Handler+0x4>

08009690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009694:	e7fe      	b.n	8009694 <MemManage_Handler+0x4>

08009696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009696:	b480      	push	{r7}
 8009698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800969a:	e7fe      	b.n	800969a <BusFault_Handler+0x4>

0800969c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096a0:	e7fe      	b.n	80096a0 <UsageFault_Handler+0x4>

080096a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096a2:	b480      	push	{r7}
 80096a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80096a6:	bf00      	nop
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096b4:	f7f6 ff5e 	bl	8000574 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80096b8:	f7fe fe98 	bl	80083ec <xTaskGetSchedulerState>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d001      	beq.n	80096c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80096c2:	f7ff f951 	bl	8008968 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80096c6:	bf00      	nop
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80096d0:	4802      	ldr	r0, [pc, #8]	; (80096dc <OTG_FS_IRQHandler+0x10>)
 80096d2:	f7f7 fcf7 	bl	80010c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80096d6:	bf00      	nop
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20004538 	.word	0x20004538

080096e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80096e8:	4b11      	ldr	r3, [pc, #68]	; (8009730 <_sbrk+0x50>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <_sbrk+0x16>
		heap_end = &end;
 80096f0:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <_sbrk+0x50>)
 80096f2:	4a10      	ldr	r2, [pc, #64]	; (8009734 <_sbrk+0x54>)
 80096f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80096f6:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <_sbrk+0x50>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80096fc:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <_sbrk+0x50>)
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4413      	add	r3, r2
 8009704:	466a      	mov	r2, sp
 8009706:	4293      	cmp	r3, r2
 8009708:	d907      	bls.n	800971a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800970a:	f000 fb77 	bl	8009dfc <__errno>
 800970e:	4602      	mov	r2, r0
 8009710:	230c      	movs	r3, #12
 8009712:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009714:	f04f 33ff 	mov.w	r3, #4294967295
 8009718:	e006      	b.n	8009728 <_sbrk+0x48>
	}

	heap_end += incr;
 800971a:	4b05      	ldr	r3, [pc, #20]	; (8009730 <_sbrk+0x50>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4413      	add	r3, r2
 8009722:	4a03      	ldr	r2, [pc, #12]	; (8009730 <_sbrk+0x50>)
 8009724:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009726:	68fb      	ldr	r3, [r7, #12]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20004054 	.word	0x20004054
 8009734:	20004800 	.word	0x20004800

08009738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800973c:	4b16      	ldr	r3, [pc, #88]	; (8009798 <SystemInit+0x60>)
 800973e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009742:	4a15      	ldr	r2, [pc, #84]	; (8009798 <SystemInit+0x60>)
 8009744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800974c:	4b13      	ldr	r3, [pc, #76]	; (800979c <SystemInit+0x64>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a12      	ldr	r2, [pc, #72]	; (800979c <SystemInit+0x64>)
 8009752:	f043 0301 	orr.w	r3, r3, #1
 8009756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009758:	4b10      	ldr	r3, [pc, #64]	; (800979c <SystemInit+0x64>)
 800975a:	2200      	movs	r2, #0
 800975c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800975e:	4b0f      	ldr	r3, [pc, #60]	; (800979c <SystemInit+0x64>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a0e      	ldr	r2, [pc, #56]	; (800979c <SystemInit+0x64>)
 8009764:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800976c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800976e:	4b0b      	ldr	r3, [pc, #44]	; (800979c <SystemInit+0x64>)
 8009770:	4a0b      	ldr	r2, [pc, #44]	; (80097a0 <SystemInit+0x68>)
 8009772:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009774:	4b09      	ldr	r3, [pc, #36]	; (800979c <SystemInit+0x64>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a08      	ldr	r2, [pc, #32]	; (800979c <SystemInit+0x64>)
 800977a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800977e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <SystemInit+0x64>)
 8009782:	2200      	movs	r2, #0
 8009784:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009786:	4b04      	ldr	r3, [pc, #16]	; (8009798 <SystemInit+0x60>)
 8009788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800978c:	609a      	str	r2, [r3, #8]
#endif
}
 800978e:	bf00      	nop
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	e000ed00 	.word	0xe000ed00
 800979c:	40023800 	.word	0x40023800
 80097a0:	24003010 	.word	0x24003010

080097a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80097a8:	2201      	movs	r2, #1
 80097aa:	490e      	ldr	r1, [pc, #56]	; (80097e4 <MX_USB_HOST_Init+0x40>)
 80097ac:	480e      	ldr	r0, [pc, #56]	; (80097e8 <MX_USB_HOST_Init+0x44>)
 80097ae:	f7fb fcf3 	bl	8005198 <USBH_Init>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80097b8:	f7ff fe34 	bl	8009424 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80097bc:	490b      	ldr	r1, [pc, #44]	; (80097ec <MX_USB_HOST_Init+0x48>)
 80097be:	480a      	ldr	r0, [pc, #40]	; (80097e8 <MX_USB_HOST_Init+0x44>)
 80097c0:	f7fb fd85 	bl	80052ce <USBH_RegisterClass>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80097ca:	f7ff fe2b 	bl	8009424 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80097ce:	4806      	ldr	r0, [pc, #24]	; (80097e8 <MX_USB_HOST_Init+0x44>)
 80097d0:	f7fb fe0a 	bl	80053e8 <USBH_Start>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80097da:	f7ff fe23 	bl	8009424 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80097de:	bf00      	nop
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	080097f1 	.word	0x080097f1
 80097e8:	20004160 	.word	0x20004160
 80097ec:	20000008 	.word	0x20000008

080097f0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80097fc:	78fb      	ldrb	r3, [r7, #3]
 80097fe:	3b01      	subs	r3, #1
 8009800:	2b04      	cmp	r3, #4
 8009802:	d819      	bhi.n	8009838 <USBH_UserProcess+0x48>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <USBH_UserProcess+0x1c>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	08009839 	.word	0x08009839
 8009810:	08009829 	.word	0x08009829
 8009814:	08009839 	.word	0x08009839
 8009818:	08009831 	.word	0x08009831
 800981c:	08009821 	.word	0x08009821
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009820:	4b09      	ldr	r3, [pc, #36]	; (8009848 <USBH_UserProcess+0x58>)
 8009822:	2203      	movs	r2, #3
 8009824:	701a      	strb	r2, [r3, #0]
  break;
 8009826:	e008      	b.n	800983a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <USBH_UserProcess+0x58>)
 800982a:	2202      	movs	r2, #2
 800982c:	701a      	strb	r2, [r3, #0]
  break;
 800982e:	e004      	b.n	800983a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <USBH_UserProcess+0x58>)
 8009832:	2201      	movs	r2, #1
 8009834:	701a      	strb	r2, [r3, #0]
  break;
 8009836:	e000      	b.n	800983a <USBH_UserProcess+0x4a>

  default:
  break;
 8009838:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20004058 	.word	0x20004058

0800984c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	609a      	str	r2, [r3, #8]
 8009860:	60da      	str	r2, [r3, #12]
 8009862:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800986c:	d147      	bne.n	80098fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800986e:	2300      	movs	r3, #0
 8009870:	613b      	str	r3, [r7, #16]
 8009872:	4b25      	ldr	r3, [pc, #148]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 8009874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009876:	4a24      	ldr	r2, [pc, #144]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 8009878:	f043 0301 	orr.w	r3, r3, #1
 800987c:	6313      	str	r3, [r2, #48]	; 0x30
 800987e:	4b22      	ldr	r3, [pc, #136]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	613b      	str	r3, [r7, #16]
 8009888:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800988a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800988e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009890:	2300      	movs	r3, #0
 8009892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009894:	2300      	movs	r3, #0
 8009896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009898:	f107 0314 	add.w	r3, r7, #20
 800989c:	4619      	mov	r1, r3
 800989e:	481b      	ldr	r0, [pc, #108]	; (800990c <HAL_HCD_MspInit+0xc0>)
 80098a0:	f7f6 ffbc 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80098a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80098a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098aa:	2302      	movs	r3, #2
 80098ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098b2:	2300      	movs	r3, #0
 80098b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098b6:	230a      	movs	r3, #10
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ba:	f107 0314 	add.w	r3, r7, #20
 80098be:	4619      	mov	r1, r3
 80098c0:	4812      	ldr	r0, [pc, #72]	; (800990c <HAL_HCD_MspInit+0xc0>)
 80098c2:	f7f6 ffab 	bl	800081c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 80098c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ca:	4a0f      	ldr	r2, [pc, #60]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 80098cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d0:	6353      	str	r3, [r2, #52]	; 0x34
 80098d2:	2300      	movs	r3, #0
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 80098d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098da:	4a0b      	ldr	r2, [pc, #44]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 80098dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098e0:	6453      	str	r3, [r2, #68]	; 0x44
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <HAL_HCD_MspInit+0xbc>)
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80098ee:	2200      	movs	r2, #0
 80098f0:	2105      	movs	r1, #5
 80098f2:	2043      	movs	r0, #67	; 0x43
 80098f4:	f7f6 ff5b 	bl	80007ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098f8:	2043      	movs	r0, #67	; 0x43
 80098fa:	f7f6 ff74 	bl	80007e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098fe:	bf00      	nop
 8009900:	3728      	adds	r7, #40	; 0x28
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	40023800 	.word	0x40023800
 800990c:	40020000 	.word	0x40020000

08009910 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800991e:	4618      	mov	r0, r3
 8009920:	f7fc f8b5 	bl	8005a8e <USBH_LL_IncTimer>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800993a:	4618      	mov	r0, r3
 800993c:	f7fc f8fa 	bl	8005b34 <USBH_LL_Connect>
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009956:	4618      	mov	r0, r3
 8009958:	f7fc f920 	bl	8005b9c <USBH_LL_Disconnect>
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
 8009970:	4613      	mov	r3, r2
 8009972:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800997a:	4618      	mov	r0, r3
 800997c:	f7fc f95e 	bl	8005c3c <USBH_LL_NotifyURBChange>
#endif
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009996:	4618      	mov	r0, r3
 8009998:	f7fc f8a3 	bl	8005ae2 <USBH_LL_PortEnabled>
} 
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fc f8a3 	bl	8005afe <USBH_LL_PortDisabled>
} 
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d12a      	bne.n	8009a28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80099d2:	4a18      	ldr	r2, [pc, #96]	; (8009a34 <USBH_LL_Init+0x74>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a15      	ldr	r2, [pc, #84]	; (8009a34 <USBH_LL_Init+0x74>)
 80099de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <USBH_LL_Init+0x74>)
 80099e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80099ea:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <USBH_LL_Init+0x74>)
 80099ec:	2208      	movs	r2, #8
 80099ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80099f0:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <USBH_LL_Init+0x74>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099f6:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <USBH_LL_Init+0x74>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80099fc:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <USBH_LL_Init+0x74>)
 80099fe:	2202      	movs	r2, #2
 8009a00:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <USBH_LL_Init+0x74>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009a08:	480a      	ldr	r0, [pc, #40]	; (8009a34 <USBH_LL_Init+0x74>)
 8009a0a:	f7f7 f8d5 	bl	8000bb8 <HAL_HCD_Init>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009a14:	f7ff fd06 	bl	8009424 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009a18:	4806      	ldr	r0, [pc, #24]	; (8009a34 <USBH_LL_Init+0x74>)
 8009a1a:	f7f7 fcd1 	bl	80013c0 <HAL_HCD_GetCurrentFrame>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fc f824 	bl	8005a70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20004538 	.word	0x20004538

08009a38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f7 fc3e 	bl	80012d0 <HAL_HCD_Start>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f95c 	bl	8009d18 <USBH_Get_USB_Status>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7f7 fc46 	bl	8001316 <HAL_HCD_Stop>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 f941 	bl	8009d18 <USBH_Get_USB_Status>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f7 fc90 	bl	80013dc <HAL_HCD_GetCurrentSpeed>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d007      	beq.n	8009ad2 <USBH_LL_GetSpeed+0x2e>
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d302      	bcc.n	8009acc <USBH_LL_GetSpeed+0x28>
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d006      	beq.n	8009ad8 <USBH_LL_GetSpeed+0x34>
 8009aca:	e008      	b.n	8009ade <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	e008      	b.n	8009ae4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad6:	e005      	b.n	8009ae4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	e002      	b.n	8009ae4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae2:	bf00      	nop
  }
  return  speed;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7f7 fc23 	bl	8001350 <HAL_HCD_ResetPort>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 f901 	bl	8009d18 <USBH_Get_USB_Status>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b36:	78fa      	ldrb	r2, [r7, #3]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f7 fc2b 	bl	8001396 <HAL_HCD_HC_GetXferCount>
 8009b40:	4603      	mov	r3, r0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b4a:	b590      	push	{r4, r7, lr}
 8009b4c:	b089      	sub	sp, #36	; 0x24
 8009b4e:	af04      	add	r7, sp, #16
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	4608      	mov	r0, r1
 8009b54:	4611      	mov	r1, r2
 8009b56:	461a      	mov	r2, r3
 8009b58:	4603      	mov	r3, r0
 8009b5a:	70fb      	strb	r3, [r7, #3]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70bb      	strb	r3, [r7, #2]
 8009b60:	4613      	mov	r3, r2
 8009b62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009b72:	787c      	ldrb	r4, [r7, #1]
 8009b74:	78ba      	ldrb	r2, [r7, #2]
 8009b76:	78f9      	ldrb	r1, [r7, #3]
 8009b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b7a:	9302      	str	r3, [sp, #8]
 8009b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	4623      	mov	r3, r4
 8009b8a:	f7f7 f877 	bl	8000c7c <HAL_HCD_HC_Init>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 f8bf 	bl	8009d18 <USBH_Get_USB_Status>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd90      	pop	{r4, r7, pc}

08009ba8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7f7 f8f0 	bl	8000dac <HAL_HCD_HC_Halt>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 f8a0 	bl	8009d18 <USBH_Get_USB_Status>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009be6:	b590      	push	{r4, r7, lr}
 8009be8:	b089      	sub	sp, #36	; 0x24
 8009bea:	af04      	add	r7, sp, #16
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	70fb      	strb	r3, [r7, #3]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70bb      	strb	r3, [r7, #2]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009c0e:	787c      	ldrb	r4, [r7, #1]
 8009c10:	78ba      	ldrb	r2, [r7, #2]
 8009c12:	78f9      	ldrb	r1, [r7, #3]
 8009c14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c18:	9303      	str	r3, [sp, #12]
 8009c1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	4623      	mov	r3, r4
 8009c2a:	f7f7 f8e3 	bl	8000df4 <HAL_HCD_HC_SubmitRequest>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f86f 	bl	8009d18 <USBH_Get_USB_Status>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd90      	pop	{r4, r7, pc}

08009c48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c5a:	78fa      	ldrb	r2, [r7, #3]
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7f7 fb84 	bl	800136c <HAL_HCD_HC_GetURBState>
 8009c64:	4603      	mov	r3, r0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d103      	bne.n	8009c8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f872 	bl	8009d70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c8c:	20c8      	movs	r0, #200	; 0xc8
 8009c8e:	f7f6 fc91 	bl	80005b4 <HAL_Delay>
  return USBH_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	70fb      	strb	r3, [r7, #3]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009cb4:	78fa      	ldrb	r2, [r7, #3]
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	440b      	add	r3, r1
 8009cc2:	333b      	adds	r3, #59	; 0x3b
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	68f9      	ldr	r1, [r7, #12]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3350      	adds	r3, #80	; 0x50
 8009cda:	78ba      	ldrb	r2, [r7, #2]
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	e009      	b.n	8009cf4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	68f9      	ldr	r1, [r7, #12]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	440b      	add	r3, r1
 8009cee:	3351      	adds	r3, #81	; 0x51
 8009cf0:	78ba      	ldrb	r2, [r7, #2]
 8009cf2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7f6 fc52 	bl	80005b4 <HAL_Delay>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d817      	bhi.n	8009d5c <USBH_Get_USB_Status+0x44>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <USBH_Get_USB_Status+0x1c>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d45 	.word	0x08009d45
 8009d38:	08009d4b 	.word	0x08009d4b
 8009d3c:	08009d51 	.word	0x08009d51
 8009d40:	08009d57 	.word	0x08009d57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
    break;
 8009d48:	e00b      	b.n	8009d62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4e:	e008      	b.n	8009d62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d50:	2301      	movs	r3, #1
 8009d52:	73fb      	strb	r3, [r7, #15]
    break;
 8009d54:	e005      	b.n	8009d62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009d56:	2302      	movs	r3, #2
 8009d58:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5a:	e002      	b.n	8009d62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d60:	bf00      	nop
  }
  return usb_status;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009d84:	2301      	movs	r3, #1
 8009d86:	73fb      	strb	r3, [r7, #15]
 8009d88:	e001      	b.n	8009d8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	461a      	mov	r2, r3
 8009d92:	2101      	movs	r1, #1
 8009d94:	4803      	ldr	r0, [pc, #12]	; (8009da4 <MX_DriverVbusFS+0x34>)
 8009d96:	f7f6 fedb 	bl	8000b50 <HAL_GPIO_WritePin>
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	40020800 	.word	0x40020800

08009da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dae:	e003      	b.n	8009db8 <LoopCopyDataInit>

08009db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009db0:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009db6:	3104      	adds	r1, #4

08009db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009db8:	480b      	ldr	r0, [pc, #44]	; (8009de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dba:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009dc0:	d3f6      	bcc.n	8009db0 <CopyDataInit>
  ldr  r2, =_sbss
 8009dc2:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009dc4:	e002      	b.n	8009dcc <LoopFillZerobss>

08009dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009dc8:	f842 3b04 	str.w	r3, [r2], #4

08009dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009dcc:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009dd0:	d3f9      	bcc.n	8009dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009dd2:	f7ff fcb1 	bl	8009738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009dd6:	f000 f817 	bl	8009e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009dda:	f7ff f841 	bl	8008e60 <main>
  bx  lr    
 8009dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009de0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009de4:	0800a168 	.word	0x0800a168
  ldr  r0, =_sdata
 8009de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009dec:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8009df0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8009df4:	20004800 	.word	0x20004800

08009df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009df8:	e7fe      	b.n	8009df8 <ADC_IRQHandler>
	...

08009dfc <__errno>:
 8009dfc:	4b01      	ldr	r3, [pc, #4]	; (8009e04 <__errno+0x8>)
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	20000030 	.word	0x20000030

08009e08 <__libc_init_array>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4e0d      	ldr	r6, [pc, #52]	; (8009e40 <__libc_init_array+0x38>)
 8009e0c:	4c0d      	ldr	r4, [pc, #52]	; (8009e44 <__libc_init_array+0x3c>)
 8009e0e:	1ba4      	subs	r4, r4, r6
 8009e10:	10a4      	asrs	r4, r4, #2
 8009e12:	2500      	movs	r5, #0
 8009e14:	42a5      	cmp	r5, r4
 8009e16:	d109      	bne.n	8009e2c <__libc_init_array+0x24>
 8009e18:	4e0b      	ldr	r6, [pc, #44]	; (8009e48 <__libc_init_array+0x40>)
 8009e1a:	4c0c      	ldr	r4, [pc, #48]	; (8009e4c <__libc_init_array+0x44>)
 8009e1c:	f000 f8f6 	bl	800a00c <_init>
 8009e20:	1ba4      	subs	r4, r4, r6
 8009e22:	10a4      	asrs	r4, r4, #2
 8009e24:	2500      	movs	r5, #0
 8009e26:	42a5      	cmp	r5, r4
 8009e28:	d105      	bne.n	8009e36 <__libc_init_array+0x2e>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e30:	4798      	blx	r3
 8009e32:	3501      	adds	r5, #1
 8009e34:	e7ee      	b.n	8009e14 <__libc_init_array+0xc>
 8009e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e3a:	4798      	blx	r3
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	e7f2      	b.n	8009e26 <__libc_init_array+0x1e>
 8009e40:	0800a160 	.word	0x0800a160
 8009e44:	0800a160 	.word	0x0800a160
 8009e48:	0800a160 	.word	0x0800a160
 8009e4c:	0800a164 	.word	0x0800a164

08009e50 <malloc>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	; (8009e5c <malloc+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f000 b86d 	b.w	8009f34 <_malloc_r>
 8009e5a:	bf00      	nop
 8009e5c:	20000030 	.word	0x20000030

08009e60 <free>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <free+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f000 b817 	b.w	8009e98 <_free_r>
 8009e6a:	bf00      	nop
 8009e6c:	20000030 	.word	0x20000030

08009e70 <memcpy>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	1e43      	subs	r3, r0, #1
 8009e74:	440a      	add	r2, r1
 8009e76:	4291      	cmp	r1, r2
 8009e78:	d100      	bne.n	8009e7c <memcpy+0xc>
 8009e7a:	bd10      	pop	{r4, pc}
 8009e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e84:	e7f7      	b.n	8009e76 <memcpy+0x6>

08009e86 <memset>:
 8009e86:	4402      	add	r2, r0
 8009e88:	4603      	mov	r3, r0
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d100      	bne.n	8009e90 <memset+0xa>
 8009e8e:	4770      	bx	lr
 8009e90:	f803 1b01 	strb.w	r1, [r3], #1
 8009e94:	e7f9      	b.n	8009e8a <memset+0x4>
	...

08009e98 <_free_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d045      	beq.n	8009f2c <_free_r+0x94>
 8009ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea4:	1f0c      	subs	r4, r1, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfb8      	it	lt
 8009eaa:	18e4      	addlt	r4, r4, r3
 8009eac:	f000 f8ac 	bl	800a008 <__malloc_lock>
 8009eb0:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <_free_r+0x98>)
 8009eb2:	6813      	ldr	r3, [r2, #0]
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	b933      	cbnz	r3, 8009ec6 <_free_r+0x2e>
 8009eb8:	6063      	str	r3, [r4, #4]
 8009eba:	6014      	str	r4, [r2, #0]
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec2:	f000 b8a2 	b.w	800a00a <__malloc_unlock>
 8009ec6:	42a3      	cmp	r3, r4
 8009ec8:	d90c      	bls.n	8009ee4 <_free_r+0x4c>
 8009eca:	6821      	ldr	r1, [r4, #0]
 8009ecc:	1862      	adds	r2, r4, r1
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	bf04      	itt	eq
 8009ed2:	681a      	ldreq	r2, [r3, #0]
 8009ed4:	685b      	ldreq	r3, [r3, #4]
 8009ed6:	6063      	str	r3, [r4, #4]
 8009ed8:	bf04      	itt	eq
 8009eda:	1852      	addeq	r2, r2, r1
 8009edc:	6022      	streq	r2, [r4, #0]
 8009ede:	6004      	str	r4, [r0, #0]
 8009ee0:	e7ec      	b.n	8009ebc <_free_r+0x24>
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	b10a      	cbz	r2, 8009eec <_free_r+0x54>
 8009ee8:	42a2      	cmp	r2, r4
 8009eea:	d9fa      	bls.n	8009ee2 <_free_r+0x4a>
 8009eec:	6819      	ldr	r1, [r3, #0]
 8009eee:	1858      	adds	r0, r3, r1
 8009ef0:	42a0      	cmp	r0, r4
 8009ef2:	d10b      	bne.n	8009f0c <_free_r+0x74>
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	4401      	add	r1, r0
 8009ef8:	1858      	adds	r0, r3, r1
 8009efa:	4282      	cmp	r2, r0
 8009efc:	6019      	str	r1, [r3, #0]
 8009efe:	d1dd      	bne.n	8009ebc <_free_r+0x24>
 8009f00:	6810      	ldr	r0, [r2, #0]
 8009f02:	6852      	ldr	r2, [r2, #4]
 8009f04:	605a      	str	r2, [r3, #4]
 8009f06:	4401      	add	r1, r0
 8009f08:	6019      	str	r1, [r3, #0]
 8009f0a:	e7d7      	b.n	8009ebc <_free_r+0x24>
 8009f0c:	d902      	bls.n	8009f14 <_free_r+0x7c>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	e7d3      	b.n	8009ebc <_free_r+0x24>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	1821      	adds	r1, r4, r0
 8009f18:	428a      	cmp	r2, r1
 8009f1a:	bf04      	itt	eq
 8009f1c:	6811      	ldreq	r1, [r2, #0]
 8009f1e:	6852      	ldreq	r2, [r2, #4]
 8009f20:	6062      	str	r2, [r4, #4]
 8009f22:	bf04      	itt	eq
 8009f24:	1809      	addeq	r1, r1, r0
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	605c      	str	r4, [r3, #4]
 8009f2a:	e7c7      	b.n	8009ebc <_free_r+0x24>
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	bf00      	nop
 8009f30:	2000405c 	.word	0x2000405c

08009f34 <_malloc_r>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	1ccd      	adds	r5, r1, #3
 8009f38:	f025 0503 	bic.w	r5, r5, #3
 8009f3c:	3508      	adds	r5, #8
 8009f3e:	2d0c      	cmp	r5, #12
 8009f40:	bf38      	it	cc
 8009f42:	250c      	movcc	r5, #12
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	4606      	mov	r6, r0
 8009f48:	db01      	blt.n	8009f4e <_malloc_r+0x1a>
 8009f4a:	42a9      	cmp	r1, r5
 8009f4c:	d903      	bls.n	8009f56 <_malloc_r+0x22>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	6033      	str	r3, [r6, #0]
 8009f52:	2000      	movs	r0, #0
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	f000 f857 	bl	800a008 <__malloc_lock>
 8009f5a:	4a21      	ldr	r2, [pc, #132]	; (8009fe0 <_malloc_r+0xac>)
 8009f5c:	6814      	ldr	r4, [r2, #0]
 8009f5e:	4621      	mov	r1, r4
 8009f60:	b991      	cbnz	r1, 8009f88 <_malloc_r+0x54>
 8009f62:	4c20      	ldr	r4, [pc, #128]	; (8009fe4 <_malloc_r+0xb0>)
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	b91b      	cbnz	r3, 8009f70 <_malloc_r+0x3c>
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 f83d 	bl	8009fe8 <_sbrk_r>
 8009f6e:	6020      	str	r0, [r4, #0]
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f000 f838 	bl	8009fe8 <_sbrk_r>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d124      	bne.n	8009fc6 <_malloc_r+0x92>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	6033      	str	r3, [r6, #0]
 8009f80:	4630      	mov	r0, r6
 8009f82:	f000 f842 	bl	800a00a <__malloc_unlock>
 8009f86:	e7e4      	b.n	8009f52 <_malloc_r+0x1e>
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	1b5b      	subs	r3, r3, r5
 8009f8c:	d418      	bmi.n	8009fc0 <_malloc_r+0x8c>
 8009f8e:	2b0b      	cmp	r3, #11
 8009f90:	d90f      	bls.n	8009fb2 <_malloc_r+0x7e>
 8009f92:	600b      	str	r3, [r1, #0]
 8009f94:	50cd      	str	r5, [r1, r3]
 8009f96:	18cc      	adds	r4, r1, r3
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 f836 	bl	800a00a <__malloc_unlock>
 8009f9e:	f104 000b 	add.w	r0, r4, #11
 8009fa2:	1d23      	adds	r3, r4, #4
 8009fa4:	f020 0007 	bic.w	r0, r0, #7
 8009fa8:	1ac3      	subs	r3, r0, r3
 8009faa:	d0d3      	beq.n	8009f54 <_malloc_r+0x20>
 8009fac:	425a      	negs	r2, r3
 8009fae:	50e2      	str	r2, [r4, r3]
 8009fb0:	e7d0      	b.n	8009f54 <_malloc_r+0x20>
 8009fb2:	428c      	cmp	r4, r1
 8009fb4:	684b      	ldr	r3, [r1, #4]
 8009fb6:	bf16      	itet	ne
 8009fb8:	6063      	strne	r3, [r4, #4]
 8009fba:	6013      	streq	r3, [r2, #0]
 8009fbc:	460c      	movne	r4, r1
 8009fbe:	e7eb      	b.n	8009f98 <_malloc_r+0x64>
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	6849      	ldr	r1, [r1, #4]
 8009fc4:	e7cc      	b.n	8009f60 <_malloc_r+0x2c>
 8009fc6:	1cc4      	adds	r4, r0, #3
 8009fc8:	f024 0403 	bic.w	r4, r4, #3
 8009fcc:	42a0      	cmp	r0, r4
 8009fce:	d005      	beq.n	8009fdc <_malloc_r+0xa8>
 8009fd0:	1a21      	subs	r1, r4, r0
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f000 f808 	bl	8009fe8 <_sbrk_r>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d0cf      	beq.n	8009f7c <_malloc_r+0x48>
 8009fdc:	6025      	str	r5, [r4, #0]
 8009fde:	e7db      	b.n	8009f98 <_malloc_r+0x64>
 8009fe0:	2000405c 	.word	0x2000405c
 8009fe4:	20004060 	.word	0x20004060

08009fe8 <_sbrk_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4c06      	ldr	r4, [pc, #24]	; (800a004 <_sbrk_r+0x1c>)
 8009fec:	2300      	movs	r3, #0
 8009fee:	4605      	mov	r5, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	f7ff fb74 	bl	80096e0 <_sbrk>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_sbrk_r+0x1a>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_sbrk_r+0x1a>
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	200047fc 	.word	0x200047fc

0800a008 <__malloc_lock>:
 800a008:	4770      	bx	lr

0800a00a <__malloc_unlock>:
 800a00a:	4770      	bx	lr

0800a00c <_init>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	bf00      	nop
 800a010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a012:	bc08      	pop	{r3}
 800a014:	469e      	mov	lr, r3
 800a016:	4770      	bx	lr

0800a018 <_fini>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	bf00      	nop
 800a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01e:	bc08      	pop	{r3}
 800a020:	469e      	mov	lr, r3
 800a022:	4770      	bx	lr
