
quiz2-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a65c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c8  0800a8c8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c8  0800a8c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d0  0800a8d0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047ac  20000094  0800a96c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004840  0800a96c  00024840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022006  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004975  00000000  00000000  000420ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  00046a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b0  00000000  00000000  000482d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002698c  00000000  00000000  00049988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017602  00000000  00000000  00070314  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4eb1  00000000  00000000  00087916  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c7c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067ac  00000000  00000000  0015c844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7d4 	.word	0x0800a7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800a7d4 	.word	0x0800a7d4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f94d 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	200f      	movs	r0, #15
 8000500:	f000 f808 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f009 fb32 	bl	8009b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f965 	bl	8000802 <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f92d 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	20004064 	.word	0x20004064

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20004064 	.word	0x20004064

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff ffee 	bl	800059c <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_Delay+0x40>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005da:	bf00      	nop
 80005dc:	f7ff ffde 	bl	800059c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000004 	.word	0x20000004

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff29 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff3e 	bl	8000640 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff8e 	bl	80006ec <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff31 	bl	800065c <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa2 	bl	8000754 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e16b      	b.n	8000b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000838:	2201      	movs	r2, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 815a 	bne.w	8000b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x4a>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	69b9      	ldr	r1, [r7, #24]
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0203 	and.w	r2, r3, #3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00b      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	2b11      	cmp	r3, #17
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d130      	bne.n	8000964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80b4 	beq.w	8000b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b5f      	ldr	r3, [pc, #380]	; (8000b24 <HAL_GPIO_Init+0x308>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <HAL_GPIO_Init+0x308>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <HAL_GPIO_Init+0x308>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009be:	4a5a      	ldr	r2, [pc, #360]	; (8000b28 <HAL_GPIO_Init+0x30c>)
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x310>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d02b      	beq.n	8000a42 <HAL_GPIO_Init+0x226>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x314>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d025      	beq.n	8000a3e <HAL_GPIO_Init+0x222>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x318>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01f      	beq.n	8000a3a <HAL_GPIO_Init+0x21e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x31c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x21a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x320>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x216>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_GPIO_Init+0x324>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x212>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <HAL_GPIO_Init+0x328>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x20e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <HAL_GPIO_Init+0x32c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x20a>
 8000a22:	2307      	movs	r3, #7
 8000a24:	e00e      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a26:	2308      	movs	r3, #8
 8000a28:	e00c      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	e00a      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a2e:	2305      	movs	r3, #5
 8000a30:	e008      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a32:	2304      	movs	r3, #4
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a36:	2303      	movs	r3, #3
 8000a38:	e004      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x228>
 8000a42:	2300      	movs	r3, #0
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	f002 0203 	and.w	r2, r2, #3
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a54:	4934      	ldr	r1, [pc, #208]	; (8000b28 <HAL_GPIO_Init+0x30c>)
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab0:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_GPIO_Init+0x330>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	f67f ae90 	bls.w	8000838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3724      	adds	r7, #36	; 0x24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40013800 	.word	0x40013800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40021400 	.word	0x40021400
 8000b44:	40021800 	.word	0x40021800
 8000b48:	40021c00 	.word	0x40021c00
 8000b4c:	40013c00 	.word	0x40013c00

08000b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e001      	b.n	8000b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b90:	787b      	ldrb	r3, [r7, #1]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b9c:	e003      	b.n	8000ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	041a      	lsls	r2, r3, #16
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	619a      	str	r2, [r3, #24]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d104      	bne.n	8000bd6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	041a      	lsls	r2, r3, #16
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bd4:	e002      	b.n	8000bdc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	b08f      	sub	sp, #60	; 0x3c
 8000bec:	af0a      	add	r7, sp, #40	; 0x28
 8000bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e054      	b.n	8000ca4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f009 f9fd 	bl	800a014 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fb83 	bl	8004344 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	687e      	ldr	r6, [r7, #4]
 8000c46:	466d      	mov	r5, sp
 8000c48:	f106 0410 	add.w	r4, r6, #16
 8000c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c5c:	1d33      	adds	r3, r6, #4
 8000c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f003 fafd 	bl	8004260 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fb7a 	bl	8004366 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	687e      	ldr	r6, [r7, #4]
 8000c7a:	466d      	mov	r5, sp
 8000c7c:	f106 0410 	add.w	r4, r6, #16
 8000c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c90:	1d33      	adds	r3, r6, #4
 8000c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c94:	6838      	ldr	r0, [r7, #0]
 8000c96:	f003 fc8d 	bl	80045b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	70fb      	strb	r3, [r7, #3]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	70bb      	strb	r3, [r7, #2]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_HCD_HC_Init+0x28>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e07f      	b.n	8000dd4 <HAL_HCD_HC_Init+0x128>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000cdc:	78fa      	ldrb	r2, [r7, #3]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	333d      	adds	r3, #61	; 0x3d
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cf0:	78fa      	ldrb	r2, [r7, #3]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3338      	adds	r3, #56	; 0x38
 8000d00:	787a      	ldrb	r2, [r7, #1]
 8000d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d04:	78fa      	ldrb	r2, [r7, #3]
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	3340      	adds	r3, #64	; 0x40
 8000d14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d16:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	3339      	adds	r3, #57	; 0x39
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d2c:	78fa      	ldrb	r2, [r7, #3]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	333f      	adds	r3, #63	; 0x3f
 8000d3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d42:	78fa      	ldrb	r2, [r7, #3]
 8000d44:	78bb      	ldrb	r3, [r7, #2]
 8000d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d4a:	b2d8      	uxtb	r0, r3
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	333a      	adds	r3, #58	; 0x3a
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da0a      	bge.n	8000d7c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d66:	78fa      	ldrb	r2, [r7, #3]
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	333b      	adds	r3, #59	; 0x3b
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e009      	b.n	8000d90 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d7c:	78fa      	ldrb	r2, [r7, #3]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	333b      	adds	r3, #59	; 0x3b
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	333c      	adds	r3, #60	; 0x3c
 8000da0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000da4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	787c      	ldrb	r4, [r7, #1]
 8000dac:	78ba      	ldrb	r2, [r7, #2]
 8000dae:	78f9      	ldrb	r1, [r7, #3]
 8000db0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	f003 fd79 	bl	80048b8 <USB_HC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd90      	pop	{r4, r7, pc}

08000ddc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_HCD_HC_Halt+0x1e>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e00f      	b.n	8000e1a <HAL_HCD_HC_Halt+0x3e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 ffb3 	bl	8004d76 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	4603      	mov	r3, r0
 8000e34:	70fb      	strb	r3, [r7, #3]
 8000e36:	460b      	mov	r3, r1
 8000e38:	70bb      	strb	r3, [r7, #2]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	333b      	adds	r3, #59	; 0x3b
 8000e4e:	78ba      	ldrb	r2, [r7, #2]
 8000e50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	333f      	adds	r3, #63	; 0x3f
 8000e62:	787a      	ldrb	r2, [r7, #1]
 8000e64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e66:	7c3b      	ldrb	r3, [r7, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10a      	bne.n	8000e82 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e6c:	78fa      	ldrb	r2, [r7, #3]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	440b      	add	r3, r1
 8000e7a:	3342      	adds	r3, #66	; 0x42
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e009      	b.n	8000e96 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e82:	78fa      	ldrb	r2, [r7, #3]
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	440b      	add	r3, r1
 8000e90:	3342      	adds	r3, #66	; 0x42
 8000e92:	2202      	movs	r2, #2
 8000e94:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e96:	787b      	ldrb	r3, [r7, #1]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	f200 80d6 	bhi.w	800104a <HAL_HCD_HC_SubmitRequest+0x226>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08001035 	.word	0x08001035
 8000eac:	08000f21 	.word	0x08000f21
 8000eb0:	08000fab 	.word	0x08000fab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000eb4:	7c3b      	ldrb	r3, [r7, #16]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	f040 80c9 	bne.w	800104e <HAL_HCD_HC_SubmitRequest+0x22a>
 8000ebc:	78bb      	ldrb	r3, [r7, #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 80c5 	bne.w	800104e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000ec4:	8b3b      	ldrh	r3, [r7, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3351      	adds	r3, #81	; 0x51
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3351      	adds	r3, #81	; 0x51
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10a      	bne.n	8000f0a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ef4:	78fa      	ldrb	r2, [r7, #3]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	3342      	adds	r3, #66	; 0x42
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f08:	e0a1      	b.n	800104e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f0a:	78fa      	ldrb	r2, [r7, #3]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	3342      	adds	r3, #66	; 0x42
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
      break;
 8000f1e:	e096      	b.n	800104e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f20:	78bb      	ldrb	r3, [r7, #2]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d120      	bne.n	8000f68 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3351      	adds	r3, #81	; 0x51
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	3342      	adds	r3, #66	; 0x42
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f50:	e07e      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f52:	78fa      	ldrb	r2, [r7, #3]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	440b      	add	r3, r1
 8000f60:	3342      	adds	r3, #66	; 0x42
 8000f62:	2202      	movs	r2, #2
 8000f64:	701a      	strb	r2, [r3, #0]
      break;
 8000f66:	e073      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f68:	78fa      	ldrb	r2, [r7, #3]
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	440b      	add	r3, r1
 8000f76:	3350      	adds	r3, #80	; 0x50
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10a      	bne.n	8000f94 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3342      	adds	r3, #66	; 0x42
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
      break;
 8000f92:	e05d      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3342      	adds	r3, #66	; 0x42
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
      break;
 8000fa8:	e052      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d120      	bne.n	8000ff2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3351      	adds	r3, #81	; 0x51
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10a      	bne.n	8000fdc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fc6:	78fa      	ldrb	r2, [r7, #3]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3342      	adds	r3, #66	; 0x42
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000fda:	e039      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3342      	adds	r3, #66	; 0x42
 8000fec:	2202      	movs	r2, #2
 8000fee:	701a      	strb	r2, [r3, #0]
      break;
 8000ff0:	e02e      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	3350      	adds	r3, #80	; 0x50
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10a      	bne.n	800101e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3342      	adds	r3, #66	; 0x42
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
      break;
 800101c:	e018      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	3342      	adds	r3, #66	; 0x42
 800102e:	2202      	movs	r2, #2
 8001030:	701a      	strb	r2, [r3, #0]
      break;
 8001032:	e00d      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	3342      	adds	r3, #66	; 0x42
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
      break;
 8001048:	e002      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800104e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3344      	adds	r3, #68	; 0x44
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001064:	78fa      	ldrb	r2, [r7, #3]
 8001066:	8b39      	ldrh	r1, [r7, #24]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4403      	add	r3, r0
 8001074:	3348      	adds	r3, #72	; 0x48
 8001076:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	335c      	adds	r3, #92	; 0x5c
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	334c      	adds	r3, #76	; 0x4c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3339      	adds	r3, #57	; 0x39
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	335d      	adds	r3, #93	; 0x5d
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	3338      	adds	r3, #56	; 0x38
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	18d1      	adds	r1, r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f003 fcf2 	bl	8004acc <USB_HC_StartXfer>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fa0f 	bl	800452e <USB_GetMode>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	f040 80f1 	bne.w	80012fa <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f9f3 	bl	8004508 <USB_ReadInterrupts>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80e7 	beq.w	80012f8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f003 f9ea 	bl	8004508 <USB_ReadInterrupts>
 8001134:	4603      	mov	r3, r0
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800113e:	d104      	bne.n	800114a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001148:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f9da 	bl	8004508 <USB_ReadInterrupts>
 8001154:	4603      	mov	r3, r0
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800115e:	d104      	bne.n	800116a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001168:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f9ca 	bl	8004508 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800117a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800117e:	d104      	bne.n	800118a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001188:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f003 f9ba 	bl	8004508 <USB_ReadInterrupts>
 8001194:	4603      	mov	r3, r0
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d103      	bne.n	80011a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f9ac 	bl	8004508 <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011ba:	d117      	bne.n	80011ec <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80011ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80011ce:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f008 ff9d 	bl	800a110 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2101      	movs	r1, #1
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 faa5 	bl	800472c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f989 	bl	8004508 <USB_ReadInterrupts>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d102      	bne.n	8001208 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f001 f8c8 	bl	8002398 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 f97b 	bl	8004508 <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b08      	cmp	r3, #8
 800121a:	d106      	bne.n	800122a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f008 ff5b 	bl	800a0d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2208      	movs	r2, #8
 8001228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f96a 	bl	8004508 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800123e:	d138      	bne.n	80012b2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fd85 	bl	8004d54 <USB_HC_ReadInterrupt>
 800124a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e025      	b.n	800129e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d018      	beq.n	8001298 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	015a      	lsls	r2, r3, #5
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127c:	d106      	bne.n	800128c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f8cf 	bl	8001428 <HCD_HC_IN_IRQHandler>
 800128a:	e005      	b.n	8001298 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fc5f 	bl	8001b56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3d4      	bcc.n	8001252 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 f926 	bl	8004508 <USB_ReadInterrupts>
 80012bc:	4603      	mov	r3, r0
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d101      	bne.n	80012ca <HAL_HCD_IRQHandler+0x1d6>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_HCD_IRQHandler+0x1d8>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d014      	beq.n	80012fa <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0210 	bic.w	r2, r2, #16
 80012de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 ffad 	bl	8002240 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0210 	orr.w	r2, r2, #16
 80012f4:	619a      	str	r2, [r3, #24]
 80012f6:	e000      	b.n	80012fa <HAL_HCD_IRQHandler+0x206>
      return;
 80012f8:	bf00      	nop
    }
  }
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_HCD_Start+0x16>
 8001312:	2302      	movs	r3, #2
 8001314:	e013      	b.n	800133e <HAL_HCD_Start+0x3e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fffd 	bl	8004322 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fa60 	bl	80047f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_HCD_Stop+0x16>
 8001358:	2302      	movs	r3, #2
 800135a:	e00d      	b.n	8001378 <HAL_HCD_Stop+0x32>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fe3f 	bl	8004fec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fa07 	bl	80047a0 <USB_ResetPort>
 8001392:	4603      	mov	r3, r0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80013a8:	78fa      	ldrb	r2, [r7, #3]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	335c      	adds	r3, #92	; 0x5c
 80013b8:	781b      	ldrb	r3, [r3, #0]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	334c      	adds	r3, #76	; 0x4c
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fa49 	bl	8004894 <USB_GetCurrentFrame>
 8001402:	4603      	mov	r3, r0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fa24 	bl	8004866 <USB_GetHostSpeed>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4413      	add	r3, r2
 800144a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b04      	cmp	r3, #4
 8001456:	d119      	bne.n	800148c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001464:	461a      	mov	r2, r3
 8001466:	2304      	movs	r3, #4
 8001468:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4413      	add	r3, r2
 8001472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	0151      	lsls	r1, r2, #5
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	440a      	add	r2, r1
 8001480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	60d3      	str	r3, [r2, #12]
 800148a:	e095      	b.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b20      	cmp	r3, #32
 80014a0:	d109      	bne.n	80014b6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	461a      	mov	r2, r3
 80014b0:	2320      	movs	r3, #32
 80014b2:	6093      	str	r3, [r2, #8]
 80014b4:	e080      	b.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d134      	bne.n	8001536 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	0151      	lsls	r1, r2, #5
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	440a      	add	r2, r1
 80014e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	335d      	adds	r3, #93	; 0x5d
 80014fc:	2205      	movs	r2, #5
 80014fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800150c:	461a      	mov	r2, r3
 800150e:	2310      	movs	r3, #16
 8001510:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151e:	461a      	mov	r2, r3
 8001520:	2308      	movs	r3, #8
 8001522:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fc21 	bl	8004d76 <USB_HC_Halt>
 8001534:	e040      	b.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4413      	add	r3, r2
 800153e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154c:	d134      	bne.n	80015b8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	0151      	lsls	r1, r2, #5
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	440a      	add	r2, r1
 8001564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fbfc 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158a:	461a      	mov	r2, r3
 800158c:	2310      	movs	r3, #16
 800158e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	335d      	adds	r3, #93	; 0x5d
 80015a0:	2208      	movs	r2, #8
 80015a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b0:	461a      	mov	r2, r3
 80015b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	015a      	lsls	r2, r3, #5
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4413      	add	r3, r2
 80015c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ce:	d122      	bne.n	8001616 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	0151      	lsls	r1, r2, #5
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	440a      	add	r2, r1
 80015e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fbbb 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160c:	461a      	mov	r2, r3
 800160e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001612:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001614:	e29b      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4413      	add	r3, r2
 800161e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 80c1 	bne.w	80017b0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01b      	beq.n	800166e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3348      	adds	r3, #72	; 0x48
 8001646:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	0159      	lsls	r1, r3, #5
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	440b      	add	r3, r1
 8001650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800165a:	1ad1      	subs	r1, r2, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4403      	add	r3, r0
 800166a:	334c      	adds	r3, #76	; 0x4c
 800166c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	335d      	adds	r3, #93	; 0x5d
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3358      	adds	r3, #88	; 0x58
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	461a      	mov	r2, r3
 80016a4:	2301      	movs	r3, #1
 80016a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	333f      	adds	r3, #63	; 0x3f
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	333f      	adds	r3, #63	; 0x3f
 80016ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d121      	bne.n	8001718 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	0151      	lsls	r1, r2, #5
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	440a      	add	r2, r1
 80016ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fb39 	bl	8004d76 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001710:	461a      	mov	r2, r3
 8001712:	2310      	movs	r3, #16
 8001714:	6093      	str	r3, [r2, #8]
 8001716:	e034      	b.n	8001782 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	333f      	adds	r3, #63	; 0x3f
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d129      	bne.n	8001782 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	0151      	lsls	r1, r2, #5
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	440a      	add	r2, r1
 8001744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800174c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	335c      	adds	r3, #92	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	335c      	adds	r3, #92	; 0x5c
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4601      	mov	r1, r0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f008 fcd5 	bl	800a12c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3350      	adds	r3, #80	; 0x50
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f083 0301 	eor.w	r3, r3, #1
 8001798:	b2d8      	uxtb	r0, r3
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3350      	adds	r3, #80	; 0x50
 80017aa:	4602      	mov	r2, r0
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	e1ce      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	f040 80f1 	bne.w	80019aa <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	0151      	lsls	r1, r2, #5
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	440a      	add	r2, r1
 80017de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017e2:	f023 0302 	bic.w	r3, r3, #2
 80017e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	335d      	adds	r3, #93	; 0x5d
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10a      	bne.n	8001814 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	335c      	adds	r3, #92	; 0x5c
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e0b0      	b.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	335d      	adds	r3, #93	; 0x5d
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10a      	bne.n	8001840 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	335c      	adds	r3, #92	; 0x5c
 800183a:	2205      	movs	r2, #5
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e09a      	b.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	335d      	adds	r3, #93	; 0x5d
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d00a      	beq.n	800186c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	335d      	adds	r3, #93	; 0x5d
 8001866:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001868:	2b08      	cmp	r3, #8
 800186a:	d156      	bne.n	800191a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3358      	adds	r3, #88	; 0x58
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4403      	add	r3, r0
 800188e:	3358      	adds	r3, #88	; 0x58
 8001890:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3358      	adds	r3, #88	; 0x58
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d914      	bls.n	80018d2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3358      	adds	r3, #88	; 0x58
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	335c      	adds	r3, #92	; 0x5c
 80018cc:	2204      	movs	r2, #4
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e009      	b.n	80018e6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	335c      	adds	r3, #92	; 0x5c
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018fc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001904:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e02d      	b.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	335d      	adds	r3, #93	; 0x5d
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d122      	bne.n	8001976 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	335c      	adds	r3, #92	; 0x5c
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800195a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001962:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4413      	add	r3, r2
 800197e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001982:	461a      	mov	r2, r3
 8001984:	2302      	movs	r3, #2
 8001986:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	b2d8      	uxtb	r0, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	335c      	adds	r3, #92	; 0x5c
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4601      	mov	r1, r0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f008 fbc2 	bl	800a12c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019a8:	e0d1      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d13e      	bne.n	8001a3e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	0151      	lsls	r1, r2, #5
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	440a      	add	r2, r1
 80019d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3358      	adds	r3, #88	; 0x58
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	1c59      	adds	r1, r3, #1
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4403      	add	r3, r0
 8001a02:	3358      	adds	r3, #88	; 0x58
 8001a04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	335d      	adds	r3, #93	; 0x5d
 8001a16:	2206      	movs	r2, #6
 8001a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f9a6 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a36:	461a      	mov	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	6093      	str	r3, [r2, #8]
}
 8001a3c:	e087      	b.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d17c      	bne.n	8001b4e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	333f      	adds	r3, #63	; 0x3f
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d122      	bne.n	8001ab0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3358      	adds	r3, #88	; 0x58
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	0151      	lsls	r1, r2, #5
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	440a      	add	r2, r1
 8001a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 f964 	bl	8004d76 <USB_HC_Halt>
 8001aae:	e045      	b.n	8001b3c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	333f      	adds	r3, #63	; 0x3f
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333f      	adds	r3, #63	; 0x3f
 8001ad6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d12f      	bne.n	8001b3c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3358      	adds	r3, #88	; 0x58
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d121      	bne.n	8001b3c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	335d      	adds	r3, #93	; 0x5d
 8001b08:	2203      	movs	r2, #3
 8001b0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	0151      	lsls	r1, r2, #5
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	440a      	add	r2, r1
 8001b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 f91d 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	6093      	str	r3, [r2, #8]
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d119      	bne.n	8001bba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	461a      	mov	r2, r3
 8001b94:	2304      	movs	r3, #4
 8001b96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	0151      	lsls	r1, r2, #5
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	440a      	add	r2, r1
 8001bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bb8:	e33e      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d141      	bne.n	8001c54 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2320      	movs	r3, #32
 8001be0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	333d      	adds	r3, #61	; 0x3d
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	f040 831f 	bne.w	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	333d      	adds	r3, #61	; 0x3d
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	335c      	adds	r3, #92	; 0x5c
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	0151      	lsls	r1, r2, #5
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	440a      	add	r2, r1
 8001c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f892 	bl	8004d76 <USB_HC_Halt>
}
 8001c52:	e2f1      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d13f      	bne.n	8001cea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	335d      	adds	r3, #93	; 0x5d
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	333d      	adds	r3, #61	; 0x3d
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3358      	adds	r3, #88	; 0x58
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 f850 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2340      	movs	r3, #64	; 0x40
 8001ce6:	6093      	str	r3, [r2, #8]
}
 8001ce8:	e2a6      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d00:	d122      	bne.n	8001d48 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 f822 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d44:	6093      	str	r3, [r2, #8]
}
 8001d46:	e277      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d135      	bne.n	8001dca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3358      	adds	r3, #88	; 0x58
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 ffea 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	335d      	adds	r3, #93	; 0x5d
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	e236      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d12b      	bne.n	8001e38 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	461a      	mov	r2, r3
 8001dee:	2308      	movs	r3, #8
 8001df0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	0151      	lsls	r1, r2, #5
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	440a      	add	r2, r1
 8001e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 ffaa 	bl	8004d76 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	335d      	adds	r3, #93	; 0x5d
 8001e32:	2205      	movs	r2, #5
 8001e34:	701a      	strb	r2, [r3, #0]
}
 8001e36:	e1ff      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d155      	bne.n	8001efa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3358      	adds	r3, #88	; 0x58
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	335d      	adds	r3, #93	; 0x5d
 8001e72:	2203      	movs	r2, #3
 8001e74:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	333d      	adds	r3, #61	; 0x3d
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d114      	bne.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	333c      	adds	r3, #60	; 0x3c
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	333d      	adds	r3, #61	; 0x3d
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	0151      	lsls	r1, r2, #5
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 ff48 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	e19e      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d12b      	bne.n	8001f68 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 ff1b 	bl	8004d76 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	335d      	adds	r3, #93	; 0x5d
 8001f50:	2206      	movs	r2, #6
 8001f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	6093      	str	r3, [r2, #8]
}
 8001f66:	e167      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d135      	bne.n	8001fec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fee3 	bl	8004d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	335d      	adds	r3, #93	; 0x5d
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	701a      	strb	r2, [r3, #0]
}
 8001fea:	e125      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	f040 811a 	bne.w	8002238 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	0151      	lsls	r1, r2, #5
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	440a      	add	r2, r1
 800201a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201e:	f023 0302 	bic.w	r3, r3, #2
 8002022:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	335d      	adds	r3, #93	; 0x5d
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d137      	bne.n	80020aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	335c      	adds	r3, #92	; 0x5c
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d00b      	beq.n	800207c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	333f      	adds	r3, #63	; 0x3f
 8002074:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	f040 80c5 	bne.w	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3351      	adds	r3, #81	; 0x51
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2d8      	uxtb	r0, r3
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3351      	adds	r3, #81	; 0x51
 80020a4:	4602      	mov	r2, r0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e0ad      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335d      	adds	r3, #93	; 0x5d
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d10a      	bne.n	80020d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e097      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	335d      	adds	r3, #93	; 0x5d
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d10a      	bne.n	8002102 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e081      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335d      	adds	r3, #93	; 0x5d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10a      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2205      	movs	r2, #5
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e06b      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	335d      	adds	r3, #93	; 0x5d
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d00a      	beq.n	800215a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335d      	adds	r3, #93	; 0x5d
 8002154:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002156:	2b08      	cmp	r3, #8
 8002158:	d155      	bne.n	8002206 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	3358      	adds	r3, #88	; 0x58
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4403      	add	r3, r0
 800217c:	3358      	adds	r3, #88	; 0x58
 800217e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3358      	adds	r3, #88	; 0x58
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d914      	bls.n	80021c0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	335c      	adds	r3, #92	; 0x5c
 80021ba:	2204      	movs	r2, #4
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e009      	b.n	80021d4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	2202      	movs	r2, #2
 80021d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	2302      	movs	r3, #2
 8002216:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	b2d8      	uxtb	r0, r3
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4601      	mov	r1, r0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f007 ff7a 	bl	800a12c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	0c5b      	lsrs	r3, r3, #17
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002274:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d003      	beq.n	8002284 <HCD_RXQLVL_IRQHandler+0x44>
 800227c:	2b05      	cmp	r3, #5
 800227e:	f000 8082 	beq.w	8002386 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002282:	e083      	b.n	800238c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07f      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3344      	adds	r3, #68	; 0x44
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d074      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3344      	adds	r3, #68	; 0x44
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	b292      	uxth	r2, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f002 f8fb 	bl	80044b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3344      	adds	r3, #68	; 0x44
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	18d1      	adds	r1, r2, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4403      	add	r3, r0
 80022e4:	3344      	adds	r3, #68	; 0x44
 80022e6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	334c      	adds	r3, #76	; 0x4c
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	18d1      	adds	r1, r2, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4403      	add	r3, r0
 800230c:	334c      	adds	r3, #76	; 0x4c
 800230e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HCD_RXQLVL_IRQHandler+0x154>)
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d031      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002344:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3350      	adds	r3, #80	; 0x50
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3350      	adds	r3, #80	; 0x50
 8002380:	4602      	mov	r2, r0
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e001      	b.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800238a:	bf00      	nop
  }
}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	1ff80000 	.word	0x1ff80000

08002398 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d113      	bne.n	80023f8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10a      	bne.n	80023f0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023e8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f007 fe82 	bl	800a0f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d147      	bne.n	8002492 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d129      	bne.n	8002468 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d113      	bne.n	8002444 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002426:	d106      	bne.n	8002436 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2102      	movs	r1, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f97c 	bl	800472c <USB_InitFSLSPClkSel>
 8002434:	e011      	b.n	800245a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f002 f975 	bl	800472c <USB_InitFSLSPClkSel>
 8002442:	e00a      	b.n	800245a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002452:	461a      	mov	r2, r3
 8002454:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002458:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f007 fe78 	bl	800a150 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f007 fe47 	bl	800a0f4 <HAL_HCD_Connect_Callback>
 8002466:	e014      	b.n	8002492 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f007 fe7f 	bl	800a16c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800247c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002480:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002490:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b20      	cmp	r3, #32
 800249a:	d103      	bne.n	80024a4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e10f      	b.n	80026ea <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f007 fb70 	bl	8009bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f001 f9ac 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a7b      	ldr	r2, [pc, #492]	; (80026f4 <HAL_I2C_Init+0x23c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x64>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_I2C_Init+0x240>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x72>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_I2C_Init+0x244>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0db      	b.n	80026ea <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_I2C_Init+0x248>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <HAL_I2C_Init+0x23c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xb4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xc8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_I2C_Init+0x24c>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4956      	ldr	r1, [pc, #344]	; (80026f4 <HAL_I2C_Init+0x23c>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d80d      	bhi.n	80025bc <HAL_I2C_Init+0x104>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	bf38      	it	cc
 80025b8:	2304      	movcc	r3, #4
 80025ba:	e04f      	b.n	800265c <HAL_I2C_Init+0x1a4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <HAL_I2C_Init+0x130>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e58      	subs	r0, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e012      	b.n	800260e <HAL_I2C_Init+0x156>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x15e>
 8002612:	2301      	movs	r3, #1
 8002614:	e022      	b.n	800265c <HAL_I2C_Init+0x1a4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <HAL_I2C_Init+0x184>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e58      	subs	r0, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	440b      	add	r3, r1
 800262c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263a:	e00f      	b.n	800265c <HAL_I2C_Init+0x1a4>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6809      	ldr	r1, [r1, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800268a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6911      	ldr	r1, [r2, #16]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	000186a0 	.word	0x000186a0
 80026f8:	001e847f 	.word	0x001e847f
 80026fc:	003d08ff 	.word	0x003d08ff
 8002700:	431bde83 	.word	0x431bde83
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e128      	b.n	800296c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a90      	ldr	r2, [pc, #576]	; (8002974 <HAL_I2S_Init+0x26c>)
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f007 fa8d 	bl	8009c54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d060      	beq.n	8002828 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800276e:	2310      	movs	r3, #16
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e001      	b.n	8002778 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d802      	bhi.n	8002786 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002786:	2001      	movs	r0, #1
 8002788:	f001 f970 	bl	8003a6c <HAL_RCCEx_GetPeriphCLKFreq>
 800278c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d125      	bne.n	80027e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	3305      	adds	r3, #5
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e01f      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	3305      	adds	r3, #5
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e00e      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	3305      	adds	r3, #5
 8002800:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <HAL_I2S_Init+0x270>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002828:	2302      	movs	r3, #2
 800282a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d902      	bls.n	800283c <HAL_I2S_Init+0x134>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d907      	bls.n	800284c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e08f      	b.n	800296c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	430a      	orrs	r2, r1
 800285e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6851      	ldr	r1, [r2, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68d2      	ldr	r2, [r2, #12]
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6992      	ldr	r2, [r2, #24]
 8002882:	430a      	orrs	r2, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d161      	bne.n	800295c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_I2S_Init+0x274>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x1a4>
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x1a8>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4932      	ldr	r1, [pc, #200]	; (8002980 <HAL_I2S_Init+0x278>)
 80028b8:	428a      	cmp	r2, r1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2S_Init+0x1b8>
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028be:	e001      	b.n	80028c4 <HAL_I2S_Init+0x1bc>
 80028c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c8:	f023 030f 	bic.w	r3, r3, #15
 80028cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_I2S_Init+0x278>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_I2S_Init+0x1d4>
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028da:	e001      	b.n	80028e0 <HAL_I2S_Init+0x1d8>
 80028dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e0:	2202      	movs	r2, #2
 80028e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_I2S_Init+0x278>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_I2S_Init+0x1ea>
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2S_Init+0x1ee>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d003      	beq.n	800290c <HAL_I2S_Init+0x204>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800290c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e001      	b.n	8002918 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	b299      	uxth	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800292e:	4303      	orrs	r3, r0
 8002930:	b29b      	uxth	r3, r3
 8002932:	430b      	orrs	r3, r1
 8002934:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002936:	4313      	orrs	r3, r2
 8002938:	b29a      	uxth	r2, r3
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	4313      	orrs	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002944:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_I2S_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_I2S_Init+0x24c>
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_I2S_Init+0x27c>)
 8002952:	e001      	b.n	8002958 <HAL_I2S_Init+0x250>
 8002954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08002a7f 	.word	0x08002a7f
 8002978:	cccccccd 	.word	0xcccccccd
 800297c:	08002b95 	.word	0x08002b95
 8002980:	40003800 	.word	0x40003800
 8002984:	40003400 	.word	0x40003400

08002988 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	881a      	ldrh	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c9a      	adds	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10e      	bne.n	8002a18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffb8 	bl	8002988 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10e      	bne.n	8002a76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff93 	bl	800299c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d13a      	bne.n	8002b10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d109      	bne.n	8002ab8 <I2S_IRQHandler+0x3a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d102      	bne.n	8002ab8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffb4 	bl	8002a20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d126      	bne.n	8002b10 <I2S_IRQHandler+0x92>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d11f      	bne.n	8002b10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ade:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff50 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d136      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d109      	bne.n	8002b3a <I2S_IRQHandler+0xbc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d102      	bne.n	8002b3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff45 	bl	80029c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d122      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d11b      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff13 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4aa2      	ldr	r2, [pc, #648]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bae:	4ba2      	ldr	r3, [pc, #648]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bb0:	e001      	b.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a9b      	ldr	r2, [pc, #620]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bcc:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bce:	e001      	b.n	8002bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d004      	beq.n	8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8099 	bne.w	8002d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f925 	bl	8002e50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9c8 	bl	8002fb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d13a      	bne.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d035      	beq.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c3e:	4b7e      	ldr	r3, [pc, #504]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c40:	e001      	b.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4979      	ldr	r1, [pc, #484]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c4e:	428b      	cmp	r3, r1
 8002c50:	d101      	bne.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c54:	e001      	b.n	8002c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe88 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	f040 80be 	bne.w	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b8 	beq.w	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cd2:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cd4:	e001      	b.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4954      	ldr	r1, [pc, #336]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ce2:	428b      	cmp	r3, r1
 8002ce4:	d101      	bne.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce8:	e001      	b.n	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f043 0204 	orr.w	r2, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fe4a 	bl	80029b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d1c:	e084      	b.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8be 	bl	8002eb4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8fd 	bl	8002f4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d12f      	bne.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02a      	beq.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d74:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d82:	e001      	b.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4929      	ldr	r1, [pc, #164]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002da0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fdfa 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d131      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02c      	beq.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ddc:	e001      	b.n	8002de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4912      	ldr	r1, [pc, #72]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dea:	428b      	cmp	r3, r1
 8002dec:	d101      	bne.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002df0:	e001      	b.n	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dfa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e0a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fdc5 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e26:	e000      	b.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e28:	bf00      	nop
}
 8002e2a:	bf00      	nop
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40003800 	.word	0x40003800
 8002e38:	40003400 	.word	0x40003400

08002e3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c99      	adds	r1, r3, #2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6251      	str	r1, [r2, #36]	; 0x24
 8002e62:	881a      	ldrh	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffc9 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c99      	adds	r1, r3, #2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ec6:	8819      	ldrh	r1, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <I2SEx_TxISR_I2SExt+0x22>
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002ed4:	e001      	b.n	8002eda <I2SEx_TxISR_I2SExt+0x26>
 8002ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eda:	460a      	mov	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d121      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <I2SEx_TxISR_I2SExt+0x50>
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002f02:	e001      	b.n	8002f08 <I2SEx_TxISR_I2SExt+0x54>
 8002f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d101      	bne.n	8002f18 <I2SEx_TxISR_I2SExt+0x64>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002f16:	e001      	b.n	8002f1c <I2SEx_TxISR_I2SExt+0x68>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff81 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40003800 	.word	0x40003800
 8002f48:	40003400 	.word	0x40003400

08002f4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d8      	ldr	r0, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	1c99      	adds	r1, r3, #2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f64:	b282      	uxth	r2, r0
 8002f66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d113      	bne.n	8002fa8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff4a 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <I2SEx_RxISR_I2SExt+0x16>
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8002fc4:	e001      	b.n	8002fca <I2SEx_RxISR_I2SExt+0x1a>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fca:	68d8      	ldr	r0, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	1c99      	adds	r1, r3, #2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fd6:	b282      	uxth	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <I2SEx_RxISR_I2SExt+0x50>
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8002ffe:	e001      	b.n	8003004 <I2SEx_RxISR_I2SExt+0x54>
 8003000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	490d      	ldr	r1, [pc, #52]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d101      	bne.n	8003014 <I2SEx_RxISR_I2SExt+0x64>
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8003012:	e001      	b.n	8003018 <I2SEx_RxISR_I2SExt+0x68>
 8003014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003018:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800301c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff03 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40003800 	.word	0x40003800
 8003044:	40003400 	.word	0x40003400

08003048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e22d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d075      	beq.n	8003152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003066:	4ba3      	ldr	r3, [pc, #652]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00c      	beq.n	800308c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4ba0      	ldr	r3, [pc, #640]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b9d      	ldr	r3, [pc, #628]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05b      	beq.n	8003150 <HAL_RCC_OscConfig+0x108>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d157      	bne.n	8003150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e208      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x74>
 80030ae:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a90      	ldr	r2, [pc, #576]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b8b      	ldr	r3, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a8a      	ldr	r2, [pc, #552]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a87      	ldr	r2, [pc, #540]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030e0:	4b84      	ldr	r3, [pc, #528]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a80      	ldr	r2, [pc, #512]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fa4c 	bl	800059c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003108:	f7fd fa48 	bl	800059c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1cd      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xc0>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fd fa38 	bl	800059c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fd fa34 	bl	800059c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1b9      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0xe8>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e18d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4952      	ldr	r1, [pc, #328]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCC_OscConfig+0x2b0>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd f9ed 	bl	800059c <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fd f9e9 	bl	800059c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e16e      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4940      	ldr	r1, [pc, #256]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCC_OscConfig+0x2b0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fd f9cc 	bl	800059c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fd f9c8 	bl	800059c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e14d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCC_OscConfig+0x2b4>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fd f9ac 	bl	800059c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003248:	f7fd f9a8 	bl	800059c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e12d      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x200>
 8003266:	e015      	b.n	8003294 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x2b4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd f995 	bl	800059c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7fd f991 	bl	800059c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e116      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a0 	beq.w	80033e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fd f957 	bl	800059c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e011      	b.n	8003316 <HAL_RCC_OscConfig+0x2ce>
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
 8003300:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fd f94a 	bl	800059c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0cf      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x2f0>
 800332a:	4b66      	ldr	r3, [pc, #408]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a65      	ldr	r2, [pc, #404]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x32a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x312>
 8003340:	4b60      	ldr	r3, [pc, #384]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a5f      	ldr	r2, [pc, #380]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x32a>
 800335a:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a59      	ldr	r2, [pc, #356]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd f90f 	bl	800059c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd f90b 	bl	800059c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e08e      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4a      	ldr	r3, [pc, #296]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x33a>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd f8f9 	bl	800059c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd f8f5 	bl	800059c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e078      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d064      	beq.n	80034b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d05c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d141      	bne.n	8003482 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCC_OscConfig+0x480>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd f8ca 	bl	800059c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd f8c6 	bl	800059c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04b      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	491d      	ldr	r1, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <HAL_RCC_OscConfig+0x480>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fd f89f 	bl	800059c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fd f89b 	bl	800059c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e020      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x41a>
 8003480:	e018      	b.n	80034b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_OscConfig+0x480>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd f888 	bl	800059c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd f884 	bl	800059c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e009      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_RCC_OscConfig+0x47c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x448>
 80034ae:	e001      	b.n	80034b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000
 80034c4:	40023800 	.word	0x40023800
 80034c8:	42470060 	.word	0x42470060

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ca      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d90c      	bls.n	8003508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b64      	ldr	r3, [pc, #400]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b62      	ldr	r3, [pc, #392]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b6      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b58      	ldr	r3, [pc, #352]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a57      	ldr	r2, [pc, #348]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494c      	ldr	r1, [pc, #304]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d044      	beq.n	80035ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d119      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07d      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d003      	beq.n	800358a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06d      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e065      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4933      	ldr	r1, [pc, #204]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035bc:	f7fc ffee 	bl	800059c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fc ffea 	bl	800059c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e04d      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 020c 	and.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1eb      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d20c      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <HAL_RCC_ClockConfig+0x1b4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e030      	b.n	8003676 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4915      	ldr	r1, [pc, #84]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f81d 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8003656:	4601      	mov	r1, r0
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	fa21 f303 	lsr.w	r3, r1, r3
 800366a:	4a08      	ldr	r2, [pc, #32]	; (800368c <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800366e:	200f      	movs	r0, #15
 8003670:	f7fc ff50 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00
 8003684:	40023800 	.word	0x40023800
 8003688:	0800a8b0 	.word	0x0800a8b0
 800368c:	2000002c 	.word	0x2000002c

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d007      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x32>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d008      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x38>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 80b4 	bne.w	8003824 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036be:	60bb      	str	r3, [r7, #8]
       break;
 80036c0:	e0b3      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b5e      	ldr	r3, [pc, #376]	; (800383c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036c4:	60bb      	str	r3, [r7, #8]
      break;
 80036c6:	e0b0      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d04a      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	ea03 0501 	and.w	r5, r3, r1
 80036f4:	ea04 0602 	and.w	r6, r4, r2
 80036f8:	4629      	mov	r1, r5
 80036fa:	4632      	mov	r2, r6
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	0154      	lsls	r4, r2, #5
 8003706:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800370a:	014b      	lsls	r3, r1, #5
 800370c:	4619      	mov	r1, r3
 800370e:	4622      	mov	r2, r4
 8003710:	1b49      	subs	r1, r1, r5
 8003712:	eb62 0206 	sbc.w	r2, r2, r6
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	f04f 0400 	mov.w	r4, #0
 800371e:	0194      	lsls	r4, r2, #6
 8003720:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	1a5b      	subs	r3, r3, r1
 8003728:	eb64 0402 	sbc.w	r4, r4, r2
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	00e2      	lsls	r2, r4, #3
 8003736:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	460b      	mov	r3, r1
 800373e:	4614      	mov	r4, r2
 8003740:	195b      	adds	r3, r3, r5
 8003742:	eb44 0406 	adc.w	r4, r4, r6
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	0262      	lsls	r2, r4, #9
 8003750:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003754:	0259      	lsls	r1, r3, #9
 8003756:	460b      	mov	r3, r1
 8003758:	4614      	mov	r4, r2
 800375a:	4618      	mov	r0, r3
 800375c:	4621      	mov	r1, r4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	f7fc fd32 	bl	80001d0 <__aeabi_uldivmod>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e049      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	f04f 0400 	mov.w	r4, #0
 800377e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	ea03 0501 	and.w	r5, r3, r1
 800378a:	ea04 0602 	and.w	r6, r4, r2
 800378e:	4629      	mov	r1, r5
 8003790:	4632      	mov	r2, r6
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	0154      	lsls	r4, r2, #5
 800379c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037a0:	014b      	lsls	r3, r1, #5
 80037a2:	4619      	mov	r1, r3
 80037a4:	4622      	mov	r2, r4
 80037a6:	1b49      	subs	r1, r1, r5
 80037a8:	eb62 0206 	sbc.w	r2, r2, r6
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	0194      	lsls	r4, r2, #6
 80037b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ba:	018b      	lsls	r3, r1, #6
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	eb64 0402 	sbc.w	r4, r4, r2
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037d0:	00d9      	lsls	r1, r3, #3
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	195b      	adds	r3, r3, r5
 80037d8:	eb44 0406 	adc.w	r4, r4, r6
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	02a2      	lsls	r2, r4, #10
 80037e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ea:	0299      	lsls	r1, r3, #10
 80037ec:	460b      	mov	r3, r1
 80037ee:	4614      	mov	r4, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	4621      	mov	r1, r4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f04f 0400 	mov.w	r4, #0
 80037fa:	461a      	mov	r2, r3
 80037fc:	4623      	mov	r3, r4
 80037fe:	f7fc fce7 	bl	80001d0 <__aeabi_uldivmod>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	3301      	adds	r3, #1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	60bb      	str	r3, [r7, #8]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003826:	60bb      	str	r3, [r7, #8]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	68bb      	ldr	r3, [r7, #8]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	007a1200 	.word	0x007a1200

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000002c 	.word	0x2000002c

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4601      	mov	r1, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4a03      	ldr	r2, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	0800a8c0 	.word	0x0800a8c0

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4601      	mov	r1, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	0800a8c0 	.word	0x0800a8c0

080038a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d035      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038d0:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d6:	f7fc fe61 	bl	800059c <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038de:	f7fc fe5d 	bl	800059c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0b0      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f0:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	019a      	lsls	r2, r3, #6
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	071b      	lsls	r3, r3, #28
 8003908:	4955      	ldr	r1, [pc, #340]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003910:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003916:	f7fc fe41 	bl	800059c <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800391e:	f7fc fe3d 	bl	800059c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e090      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8083 	beq.w	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3e      	ldr	r2, [pc, #248]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003972:	f7fc fe13 	bl	800059c <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fc fe0f 	bl	800059c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e062      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02f      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d028      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d114      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039de:	f7fc fddd 	bl	800059c <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fc fdd9 	bl	800059c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e02a      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ee      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a14:	d10d      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]
 8003a30:	e005      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3c:	6093      	str	r3, [r2, #8]
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4a:	4905      	ldr	r1, [pc, #20]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	42470068 	.word	0x42470068
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000
 8003a68:	42470e40 	.word	0x42470e40

08003a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d13d      	bne.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a92:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d12f      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aa0:	617b      	str	r3, [r7, #20]
          break;
 8003aa2:	e02f      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aba:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e007      	b.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	0f1b      	lsrs	r3, r3, #28
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	617b      	str	r3, [r7, #20]
          break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
          break;
 8003b02:	bf00      	nop
        }
      }
      break;
 8003b04:	bf00      	nop
    }
  }
  return frequency;
 8003b06:	697b      	ldr	r3, [r7, #20]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00bb8000 	.word	0x00bb8000
 8003b1c:	007a1200 	.word	0x007a1200
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e056      	b.n	8003be4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f006 f8e7 	bl	8009d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	f003 0104 	and.w	r1, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e03f      	b.n	8003c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f006 f8ce 	bl	8009db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f90b 	bl	8003e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b088      	sub	sp, #32
 8003c8a:	af02      	add	r7, sp, #8
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f040 8083 	bne.w	8003dae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_UART_Transmit+0x2e>
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e07b      	b.n	8003db0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Transmit+0x40>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e074      	b.n	8003db0 <HAL_UART_Transmit+0x12a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2221      	movs	r2, #33	; 0x21
 8003cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003cdc:	f7fc fc5e 	bl	800059c <HAL_GetTick>
 8003ce0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cee:	e042      	b.n	8003d76 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d06:	d122      	bne.n	8003d4e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f850 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e046      	b.n	8003db0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3302      	adds	r3, #2
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	e017      	b.n	8003d76 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	e013      	b.n	8003d76 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f82d 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e023      	b.n	8003db0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	60ba      	str	r2, [r7, #8]
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1b7      	bne.n	8003cf0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f814 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00a      	b.n	8003db0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	e02c      	b.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d028      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd8:	f7fc fbe0 	bl	800059c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d21d      	bcs.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003df6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e00f      	b.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d0c3      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e8c:	f023 030c 	bic.w	r3, r3, #12
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	430b      	orrs	r3, r1
 8003e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb8:	f040 80e4 	bne.w	8004084 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4aab      	ldr	r2, [pc, #684]	; (8004170 <UART_SetConfig+0x324>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <UART_SetConfig+0x84>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4aaa      	ldr	r2, [pc, #680]	; (8004174 <UART_SetConfig+0x328>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d16c      	bne.n	8003faa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ed0:	f7ff fcd6 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009a      	lsls	r2, r3, #2
 8003ede:	441a      	add	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	4aa3      	ldr	r2, [pc, #652]	; (8004178 <UART_SetConfig+0x32c>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	011c      	lsls	r4, r3, #4
 8003ef4:	f7ff fcc4 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f0e:	f7ff fcb7 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	4a93      	ldr	r2, [pc, #588]	; (8004178 <UART_SetConfig+0x32c>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	; 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1aeb      	subs	r3, r5, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	3332      	adds	r3, #50	; 0x32
 8003f3c:	4a8e      	ldr	r2, [pc, #568]	; (8004178 <UART_SetConfig+0x32c>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f4a:	441c      	add	r4, r3
 8003f4c:	f7ff fc98 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009a      	lsls	r2, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f66:	f7ff fc8b 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a7d      	ldr	r2, [pc, #500]	; (8004178 <UART_SetConfig+0x32c>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2264      	movs	r2, #100	; 0x64
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	1aeb      	subs	r3, r5, r3
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	3332      	adds	r3, #50	; 0x32
 8003f94:	4a78      	ldr	r2, [pc, #480]	; (8004178 <UART_SetConfig+0x32c>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	f003 0207 	and.w	r2, r3, #7
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4422      	add	r2, r4
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e154      	b.n	8004254 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003faa:	f7ff fc55 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009a      	lsls	r2, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	4a6c      	ldr	r2, [pc, #432]	; (8004178 <UART_SetConfig+0x32c>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f7ff fc43 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009a      	lsls	r2, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fe8:	f7ff fc36 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009a      	lsls	r2, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <UART_SetConfig+0x32c>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2264      	movs	r2, #100	; 0x64
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	1aeb      	subs	r3, r5, r3
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a58      	ldr	r2, [pc, #352]	; (8004178 <UART_SetConfig+0x32c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004024:	441c      	add	r4, r3
 8004026:	f7ff fc17 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 800402a:	4602      	mov	r2, r0
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004040:	f7ff fc0a 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004044:	4602      	mov	r2, r0
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009a      	lsls	r2, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	4a47      	ldr	r2, [pc, #284]	; (8004178 <UART_SetConfig+0x32c>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2264      	movs	r2, #100	; 0x64
 8004064:	fb02 f303 	mul.w	r3, r2, r3
 8004068:	1aeb      	subs	r3, r5, r3
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a42      	ldr	r2, [pc, #264]	; (8004178 <UART_SetConfig+0x32c>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 0207 	and.w	r2, r3, #7
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4422      	add	r2, r4
 8004080:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004082:	e0e7      	b.n	8004254 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a39      	ldr	r2, [pc, #228]	; (8004170 <UART_SetConfig+0x324>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <UART_SetConfig+0x24c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a38      	ldr	r2, [pc, #224]	; (8004174 <UART_SetConfig+0x328>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d171      	bne.n	800417c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004098:	f7ff fbf2 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 800409c:	4602      	mov	r2, r0
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009a      	lsls	r2, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	4a31      	ldr	r2, [pc, #196]	; (8004178 <UART_SetConfig+0x32c>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	011c      	lsls	r4, r3, #4
 80040bc:	f7ff fbe0 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009a      	lsls	r2, r3, #2
 80040ca:	441a      	add	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80040d6:	f7ff fbd3 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <UART_SetConfig+0x32c>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2264      	movs	r2, #100	; 0x64
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	1aeb      	subs	r3, r5, r3
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	3332      	adds	r3, #50	; 0x32
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <UART_SetConfig+0x32c>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004110:	441c      	add	r4, r3
 8004112:	f7ff fbb5 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004116:	4602      	mov	r2, r0
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fbb2 f5f3 	udiv	r5, r2, r3
 800412c:	f7ff fba8 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004130:	4602      	mov	r2, r0
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009a      	lsls	r2, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <UART_SetConfig+0x32c>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2264      	movs	r2, #100	; 0x64
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	1aeb      	subs	r3, r5, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <UART_SetConfig+0x32c>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4422      	add	r2, r4
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	e071      	b.n	8004254 <UART_SetConfig+0x408>
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800417c:	f7ff fb6c 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004180:	4602      	mov	r2, r0
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	009a      	lsls	r2, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	4a31      	ldr	r2, [pc, #196]	; (800425c <UART_SetConfig+0x410>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	011c      	lsls	r4, r3, #4
 80041a0:	f7ff fb5a 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80041ba:	f7ff fb4d 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 80041be:	4602      	mov	r2, r0
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009a      	lsls	r2, r3, #2
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	4a21      	ldr	r2, [pc, #132]	; (800425c <UART_SetConfig+0x410>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2264      	movs	r2, #100	; 0x64
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	1aeb      	subs	r3, r5, r3
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	3332      	adds	r3, #50	; 0x32
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <UART_SetConfig+0x410>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f4:	441c      	add	r4, r3
 80041f6:	f7ff fb2f 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009a      	lsls	r2, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004210:	f7ff fb22 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004214:	4602      	mov	r2, r0
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4a0c      	ldr	r2, [pc, #48]	; (800425c <UART_SetConfig+0x410>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	2264      	movs	r2, #100	; 0x64
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	1aeb      	subs	r3, r5, r3
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	3332      	adds	r3, #50	; 0x32
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <UART_SetConfig+0x410>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4422      	add	r2, r4
 8004250:	609a      	str	r2, [r3, #8]
}
 8004252:	e7ff      	b.n	8004254 <UART_SetConfig+0x408>
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bdb0      	pop	{r4, r5, r7, pc}
 800425c:	51eb851f 	.word	0x51eb851f

08004260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004260:	b084      	sub	sp, #16
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	f107 001c 	add.w	r0, r7, #28
 800426e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d122      	bne.n	80042be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800428c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f94a 	bl	800454c <USB_CoreReset>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e01a      	b.n	80042f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f93e 	bl	800454c <USB_CoreReset>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
 80042e6:	e005      	b.n	80042f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10b      	bne.n	8004312 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f043 0206 	orr.w	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800431e:	b004      	add	sp, #16
 8004320:	4770      	bx	lr

08004322 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 0201 	bic.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e00b      	b.n	80043aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	e001      	b.n	80043aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e003      	b.n	80043b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043aa:	2032      	movs	r0, #50	; 0x32
 80043ac:	f7fc f902 	bl	80005b4 <HAL_Delay>

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <USB_FlushTxFifo+0x48>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d0f0      	beq.n	80043d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	00030d40 	.word	0x00030d40

08004408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2210      	movs	r2, #16
 8004418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <USB_FlushRxFifo+0x40>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e006      	b.n	800443a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b10      	cmp	r3, #16
 8004436:	d0f0      	beq.n	800441a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	00030d40 	.word	0x00030d40

0800444c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4611      	mov	r1, r2
 8004458:	461a      	mov	r2, r3
 800445a:	460b      	mov	r3, r1
 800445c:	71fb      	strb	r3, [r7, #7]
 800445e:	4613      	mov	r3, r2
 8004460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800446a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11a      	bne.n	80044a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004472:	88bb      	ldrh	r3, [r7, #4]
 8004474:	3303      	adds	r3, #3
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e00f      	b.n	80044a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	031a      	lsls	r2, r3, #12
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448c:	461a      	mov	r2, r3
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3304      	adds	r3, #4
 8004498:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3301      	adds	r3, #1
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d3eb      	bcc.n	8004480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b089      	sub	sp, #36	; 0x24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	3303      	adds	r3, #3
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e00b      	b.n	80044f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3ef      	bcc.n	80044da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80044fa:	69fb      	ldr	r3, [r7, #28]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3724      	adds	r7, #36	; 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004520:	68fb      	ldr	r3, [r7, #12]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <USB_CoreReset+0x64>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e01b      	b.n	80045a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	daf2      	bge.n	8004558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <USB_CoreReset+0x64>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e006      	b.n	80045a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d0f0      	beq.n	8004582 <USB_CoreReset+0x36>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	00030d40 	.word	0x00030d40

080045b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b4:	b084      	sub	sp, #16
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	f107 001c 	add.w	r0, r7, #28
 80045c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045d0:	461a      	mov	r2, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d018      	beq.n	8004638 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	2b03      	cmp	r3, #3
 800460a:	d10a      	bne.n	8004622 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800461a:	f043 0304 	orr.w	r3, r3, #4
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e014      	b.n	800464c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e009      	b.n	800464c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800464c:	2110      	movs	r1, #16
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff feb4 	bl	80043bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fed7 	bl	8004408 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e015      	b.n	800468c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d3e5      	bcc.n	8004660 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004694:	2101      	movs	r1, #1
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8ac 	bl	80047f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800469c:	20c8      	movs	r0, #200	; 0xc8
 800469e:	f7fb ff89 	bl	80005b4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f04f 32ff 	mov.w	r2, #4294967295
 80046ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a14      	ldr	r2, [pc, #80]	; (8004718 <USB_HostInit+0x164>)
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <USB_HostInit+0x168>)
 80046ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80046d2:	e009      	b.n	80046e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a10      	ldr	r2, [pc, #64]	; (8004720 <USB_HostInit+0x16c>)
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a10      	ldr	r2, [pc, #64]	; (8004724 <USB_HostInit+0x170>)
 80046e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f043 0210 	orr.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <USB_HostInit+0x174>)
 8004700:	4313      	orrs	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004712:	b004      	add	sp, #16
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	01000200 	.word	0x01000200
 800471c:	00e00300 	.word	0x00e00300
 8004720:	00600080 	.word	0x00600080
 8004724:	004000e0 	.word	0x004000e0
 8004728:	a3200008 	.word	0xa3200008

0800472c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004774:	461a      	mov	r2, r3
 8004776:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800477a:	6053      	str	r3, [r2, #4]
 800477c:	e009      	b.n	8004792 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d106      	bne.n	8004792 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800478a:	461a      	mov	r2, r3
 800478c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004790:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80047d0:	2064      	movs	r0, #100	; 0x64
 80047d2:	f7fb feef 	bl	80005b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80047e4:	200a      	movs	r0, #10
 80047e6:	f7fb fee5 	bl	80005b4 <HAL_Delay>

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004818:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <USB_DriveVbus+0x44>
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d106      	bne.n	8004838 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004836:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	d109      	bne.n	8004858 <USB_DriveVbus+0x64>
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004856:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	0c5b      	lsrs	r3, r3, #17
 8004884:	f003 0303 	and.w	r3, r3, #3
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	b29b      	uxth	r3, r3
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	4608      	mov	r0, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	461a      	mov	r2, r3
 80048c6:	4603      	mov	r3, r0
 80048c8:	70fb      	strb	r3, [r7, #3]
 80048ca:	460b      	mov	r3, r1
 80048cc:	70bb      	strb	r3, [r7, #2]
 80048ce:	4613      	mov	r3, r2
 80048d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80048ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d87e      	bhi.n	80049f4 <USB_HC_Init+0x13c>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <USB_HC_Init+0x44>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	080049b7 	.word	0x080049b7
 8004904:	0800490d 	.word	0x0800490d
 8004908:	08004979 	.word	0x08004979
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	461a      	mov	r2, r3
 800491a:	f240 439d 	movw	r3, #1181	; 0x49d
 800491e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004920:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004924:	2b00      	cmp	r3, #0
 8004926:	da10      	bge.n	800494a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	440a      	add	r2, r1
 800493e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004948:	e057      	b.n	80049fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d051      	beq.n	80049fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	440a      	add	r2, r1
 800496c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004970:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004974:	60d3      	str	r3, [r2, #12]
      break;
 8004976:	e040      	b.n	80049fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	461a      	mov	r2, r3
 8004986:	f240 639d 	movw	r3, #1693	; 0x69d
 800498a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800498c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004990:	2b00      	cmp	r3, #0
 8004992:	da34      	bge.n	80049fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4413      	add	r3, r2
 800499c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80049b4:	e023      	b.n	80049fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	461a      	mov	r2, r3
 80049c4:	f240 2325 	movw	r3, #549	; 0x225
 80049c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da17      	bge.n	8004a02 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80049f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80049f2:	e006      	b.n	8004a02 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	e004      	b.n	8004a04 <USB_HC_Init+0x14c>
      break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <USB_HC_Init+0x14c>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <USB_HC_Init+0x14c>
      break;
 8004a02:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da03      	bge.n	8004a3e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e001      	b.n	8004a42 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a56:	787b      	ldrb	r3, [r7, #1]
 8004a58:	059b      	lsls	r3, r3, #22
 8004a5a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a5e:	78bb      	ldrb	r3, [r7, #2]
 8004a60:	02db      	lsls	r3, r3, #11
 8004a62:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a6c:	049b      	lsls	r3, r3, #18
 8004a6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	0159      	lsls	r1, r3, #5
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	440b      	add	r3, r1
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a92:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004a94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d10f      	bne.n	8004abc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop

08004acc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	; 0x30
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d028      	beq.n	8004b48 <USB_HC_StartXfer+0x7c>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	791b      	ldrb	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d124      	bne.n	8004b48 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <USB_HC_StartXfer+0x50>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	795b      	ldrb	r3, [r3, #5]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	4619      	mov	r1, r3
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fa2e 	bl	8004f74 <USB_DoPing>
      return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e112      	b.n	8004d42 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d112      	bne.n	8004b48 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	6a3a      	ldr	r2, [r7, #32]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004b40:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d018      	beq.n	8004b82 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	8912      	ldrh	r2, [r2, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	8912      	ldrh	r2, [r2, #8]
 8004b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b64:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004b66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b68:	8b7b      	ldrh	r3, [r7, #26]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d90b      	bls.n	8004b86 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004b6e:	8b7b      	ldrh	r3, [r7, #26]
 8004b70:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	8912      	ldrh	r2, [r2, #8]
 8004b78:	fb02 f203 	mul.w	r2, r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	611a      	str	r2, [r3, #16]
 8004b80:	e001      	b.n	8004b86 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004b82:	2301      	movs	r3, #1
 8004b84:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	78db      	ldrb	r3, [r3, #3]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d006      	beq.n	8004b9c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	8912      	ldrh	r2, [r2, #8]
 8004b94:	fb02 f203 	mul.w	r2, r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ba6:	04d9      	lsls	r1, r3, #19
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <USB_HC_StartXfer+0x280>)
 8004baa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	7a9b      	ldrb	r3, [r3, #10]
 8004bb2:	075b      	lsls	r3, r3, #29
 8004bb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bb8:	69f9      	ldr	r1, [r7, #28]
 8004bba:	0148      	lsls	r0, r1, #5
 8004bbc:	6a39      	ldr	r1, [r7, #32]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004bc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	68d9      	ldr	r1, [r3, #12]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	460a      	mov	r2, r1
 8004be0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	7e7b      	ldrb	r3, [r7, #25]
 8004c2a:	075b      	lsls	r3, r3, #29
 8004c2c:	69f9      	ldr	r1, [r7, #28]
 8004c2e:	0148      	lsls	r0, r1, #5
 8004c30:	6a39      	ldr	r1, [r7, #32]
 8004c32:	4401      	add	r1, r0
 8004c34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a41      	ldr	r2, [pc, #260]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c4c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c56:	4a3e      	ldr	r2, [pc, #248]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c58:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	78db      	ldrb	r3, [r3, #3]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d006      	beq.n	8004c70 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	4a39      	ldr	r2, [pc, #228]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e005      	b.n	8004c7c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c70:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c78:	4a35      	ldr	r2, [pc, #212]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c7a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c7c:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c84:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c86:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <USB_HC_StartXfer+0x284>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d14e      	bne.n	8004d40 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	78db      	ldrb	r3, [r3, #3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14a      	bne.n	8004d40 <USB_HC_StartXfer+0x274>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d046      	beq.n	8004d40 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	79db      	ldrb	r3, [r3, #7]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d830      	bhi.n	8004d1c <USB_HC_StartXfer+0x250>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <USB_HC_StartXfer+0x1f4>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004cf5 	.word	0x08004cf5
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004cf5 	.word	0x08004cf5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	3303      	adds	r3, #3
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004cda:	8afa      	ldrh	r2, [r7, #22]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d91c      	bls.n	8004d20 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	619a      	str	r2, [r3, #24]
          }
          break;
 8004cf2:	e015      	b.n	8004d20 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	3303      	adds	r3, #3
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004cfe:	8afa      	ldrh	r2, [r7, #22]
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d90a      	bls.n	8004d24 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d1a:	e003      	b.n	8004d24 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <USB_HC_StartXfer+0x25a>
          break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <USB_HC_StartXfer+0x25a>
          break;
 8004d24:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	68d9      	ldr	r1, [r3, #12]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	785a      	ldrb	r2, [r3, #1]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	b298      	uxth	r0, r3
 8004d34:	2300      	movs	r3, #0
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4603      	mov	r3, r0
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fb86 	bl	800444c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	; 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	1ff80000 	.word	0x1ff80000
 8004d50:	200000b0 	.word	0x200000b0

08004d54 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	b29b      	uxth	r3, r3
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b087      	sub	sp, #28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0c9b      	lsrs	r3, r3, #18
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <USB_HC_Halt+0x3a>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d16c      	bne.n	8004e8a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d143      	bne.n	8004e64 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e3a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e48:	d81d      	bhi.n	8004e86 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e60:	d0ec      	beq.n	8004e3c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e62:	e080      	b.n	8004f66 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e82:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e84:	e06f      	b.n	8004f66 <USB_HC_Halt+0x1f0>
          break;
 8004e86:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e88:	e06d      	b.n	8004f66 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d143      	bne.n	8004f42 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ed8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f18:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f26:	d81d      	bhi.n	8004f64 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3e:	d0ec      	beq.n	8004f1a <USB_HC_Halt+0x1a4>
 8004f40:	e011      	b.n	8004f66 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e000      	b.n	8004f66 <USB_HC_Halt+0x1f0>
          break;
 8004f64:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	04da      	lsls	r2, r3, #19
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <USB_DoPing+0x74>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	1ff80000 	.word	0x1ff80000

08004fec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff f9a1 	bl	8004344 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005002:	2110      	movs	r1, #16
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff f9d9 	bl	80043bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff f9fc 	bl	8004408 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e01f      	b.n	8005056 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800502c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005034:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800503c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3301      	adds	r3, #1
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b0f      	cmp	r3, #15
 800505a:	d9dc      	bls.n	8005016 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e034      	b.n	80050cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005078:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005080:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005088:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	461a      	mov	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3301      	adds	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a8:	d80c      	bhi.n	80050c4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c0:	d0ec      	beq.n	800509c <USB_StopHost+0xb0>
 80050c2:	e000      	b.n	80050c6 <USB_StopHost+0xda>
        break;
 80050c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3301      	adds	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d9c7      	bls.n	8005062 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d8:	461a      	mov	r2, r3
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff f91a 	bl	8004322 <USB_EnableGlobalInt>

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b089      	sub	sp, #36	; 0x24
 80050fc:	af04      	add	r7, sp, #16
 80050fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005100:	2302      	movs	r3, #2
 8005102:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005104:	2301      	movs	r3, #1
 8005106:	2202      	movs	r2, #2
 8005108:	2102      	movs	r1, #2
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fc8c 	bl	8005a28 <USBH_FindInterface>
 8005110:	4603      	mov	r3, r0
 8005112:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	2bff      	cmp	r3, #255	; 0xff
 8005118:	f000 812a 	beq.w	8005370 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800511c:	7bbb      	ldrb	r3, [r7, #14]
 800511e:	4619      	mov	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fc65 	bl	80059f0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800512c:	2050      	movs	r0, #80	; 0x50
 800512e:	f005 fa73 	bl	800a618 <malloc>
 8005132:	4603      	mov	r3, r0
 8005134:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	211a      	movs	r1, #26
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b25b      	sxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	da15      	bge.n	8005184 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	211a      	movs	r1, #26
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800516e:	7bbb      	ldrb	r3, [r7, #14]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	211a      	movs	r1, #26
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	4413      	add	r3, r2
 800517a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 ff2f 	bl	8006fee <USBH_AllocPipe>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	7819      	ldrb	r1, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	7858      	ldrb	r0, [r3, #1]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	8952      	ldrh	r2, [r2, #10]
 80051b0:	9202      	str	r2, [sp, #8]
 80051b2:	2203      	movs	r2, #3
 80051b4:	9201      	str	r2, [sp, #4]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	4623      	mov	r3, r4
 80051ba:	4602      	mov	r2, r0
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fee7 	bl	8006f90 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f005 f94a 	bl	800a464 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80051d0:	2300      	movs	r3, #0
 80051d2:	2200      	movs	r2, #0
 80051d4:	210a      	movs	r1, #10
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fc26 	bl	8005a28 <USBH_FindInterface>
 80051dc:	4603      	mov	r3, r0
 80051de:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80051e0:	7bbb      	ldrb	r3, [r7, #14]
 80051e2:	2bff      	cmp	r3, #255	; 0xff
 80051e4:	f000 80c4 	beq.w	8005370 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	211a      	movs	r1, #26
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b25b      	sxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da16      	bge.n	800522e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	211a      	movs	r1, #26
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	211a      	movs	r1, #26
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	4413      	add	r3, r2
 8005222:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	835a      	strh	r2, [r3, #26]
 800522c:	e015      	b.n	800525a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800522e:	7bbb      	ldrb	r3, [r7, #14]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	211a      	movs	r1, #26
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	211a      	movs	r1, #26
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005254:	881a      	ldrh	r2, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	211a      	movs	r1, #26
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	4413      	add	r3, r2
 8005266:	f203 3352 	addw	r3, r3, #850	; 0x352
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	b25b      	sxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	da16      	bge.n	80052a0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005272:	7bbb      	ldrb	r3, [r7, #14]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	211a      	movs	r1, #26
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005288:	7bbb      	ldrb	r3, [r7, #14]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	211a      	movs	r1, #26
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	4413      	add	r3, r2
 8005294:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005298:	881a      	ldrh	r2, [r3, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	835a      	strh	r2, [r3, #26]
 800529e:	e015      	b.n	80052cc <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80052a0:	7bbb      	ldrb	r3, [r7, #14]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	211a      	movs	r1, #26
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	f203 3352 	addw	r3, r3, #850	; 0x352
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	211a      	movs	r1, #26
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80052c6:	881a      	ldrh	r2, [r3, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	7b9b      	ldrb	r3, [r3, #14]
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fe8b 	bl	8006fee <USBH_AllocPipe>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	7bdb      	ldrb	r3, [r3, #15]
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 fe81 	bl	8006fee <USBH_AllocPipe>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	7b59      	ldrb	r1, [r3, #13]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	7b98      	ldrb	r0, [r3, #14]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	8b12      	ldrh	r2, [r2, #24]
 800530c:	9202      	str	r2, [sp, #8]
 800530e:	2202      	movs	r2, #2
 8005310:	9201      	str	r2, [sp, #4]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	4623      	mov	r3, r4
 8005316:	4602      	mov	r2, r0
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f001 fe39 	bl	8006f90 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	7b19      	ldrb	r1, [r3, #12]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	7bd8      	ldrb	r0, [r3, #15]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	8b52      	ldrh	r2, [r2, #26]
 8005336:	9202      	str	r2, [sp, #8]
 8005338:	2202      	movs	r2, #2
 800533a:	9201      	str	r2, [sp, #4]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	4623      	mov	r3, r4
 8005340:	4602      	mov	r2, r0
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fe24 	bl	8006f90 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	7b5b      	ldrb	r3, [r3, #13]
 8005354:	2200      	movs	r2, #0
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f005 f883 	bl	800a464 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	7b1b      	ldrb	r3, [r3, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f005 f87c 	bl	800a464 <USBH_LL_SetToggle>
      status = USBH_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}

0800537a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 fe17 	bl	8006fce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fe3f 	bl	800702a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	7b1b      	ldrb	r3, [r3, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	7b1b      	ldrb	r3, [r3, #12]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fe04 	bl	8006fce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	7b1b      	ldrb	r3, [r3, #12]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fe2c 	bl	800702a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	7b5b      	ldrb	r3, [r3, #13]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	7b5b      	ldrb	r3, [r3, #13]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 fdf1 	bl	8006fce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	7b5b      	ldrb	r3, [r3, #13]
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 fe19 	bl	800702a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4618      	mov	r0, r3
 8005414:	f005 f908 	bl	800a628 <free>
    phost->pActiveClass->pData = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800541e:	2200      	movs	r2, #0
 8005420:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005434:	2302      	movs	r3, #2
 8005436:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3340      	adds	r3, #64	; 0x40
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8b2 	bl	80055b2 <GetLineCoding>
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800545e:	2102      	movs	r1, #2
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
  }
  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005490:	2b04      	cmp	r3, #4
 8005492:	d877      	bhi.n	8005584 <USBH_CDC_Process+0x114>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <USBH_CDC_Process+0x2c>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054b1 	.word	0x080054b1
 80054a0:	080054b7 	.word	0x080054b7
 80054a4:	080054e7 	.word	0x080054e7
 80054a8:	0800555b 	.word	0x0800555b
 80054ac:	08005569 	.word	0x08005569
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73fb      	strb	r3, [r7, #15]
    break;
 80054b4:	e06d      	b.n	8005592 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f897 	bl	80055f0 <SetLineCoding>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80054c6:	7bbb      	ldrb	r3, [r7, #14]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80054d4:	e058      	b.n	8005588 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d055      	beq.n	8005588 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2204      	movs	r2, #4
 80054e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80054e4:	e050      	b.n	8005588 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3340      	adds	r3, #64	; 0x40
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f860 	bl	80055b2 <GetLineCoding>
 80054f2:	4603      	mov	r3, r0
 80054f4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80054f6:	7bbb      	ldrb	r3, [r7, #14]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d126      	bne.n	800554a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550e:	791b      	ldrb	r3, [r3, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d13b      	bne.n	800558c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005520:	429a      	cmp	r2, r3
 8005522:	d133      	bne.n	800558c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005530:	429a      	cmp	r2, r3
 8005532:	d12b      	bne.n	800558c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800553e:	429a      	cmp	r2, r3
 8005540:	d124      	bne.n	800558c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f984 	bl	8005850 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005548:	e020      	b.n	800558c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d01d      	beq.n	800558c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2204      	movs	r2, #4
 8005554:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005558:	e018      	b.n	800558c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f867 	bl	800562e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8f8 	bl	8005756 <CDC_ProcessReception>
    break;
 8005566:	e014      	b.n	8005592 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005568:	2100      	movs	r1, #0
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fffa 	bl	8006564 <USBH_ClrFeature>
 8005570:	4603      	mov	r3, r0
 8005572:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005582:	e005      	b.n	8005590 <USBH_CDC_Process+0x120>

  default:
    break;
 8005584:	bf00      	nop
 8005586:	e004      	b.n	8005592 <USBH_CDC_Process+0x122>
    break;
 8005588:	bf00      	nop
 800558a:	e002      	b.n	8005592 <USBH_CDC_Process+0x122>
    break;
 800558c:	bf00      	nop
 800558e:	e000      	b.n	8005592 <USBH_CDC_Process+0x122>
    break;
 8005590:	bf00      	nop

  }

  return status;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	22a1      	movs	r2, #161	; 0xa1
 80055c0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2221      	movs	r2, #33	; 0x21
 80055c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2207      	movs	r2, #7
 80055d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2207      	movs	r2, #7
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 f99f 	bl	8006924 <USBH_CtlReq>
 80055e6:	4603      	mov	r3, r0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2221      	movs	r2, #33	; 0x21
 80055fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2207      	movs	r2, #7
 8005616:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2207      	movs	r2, #7
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 f980 	bl	8006924 <USBH_CtlReq>
 8005624:	4603      	mov	r3, r0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af02      	add	r7, sp, #8
 8005634:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005640:	2300      	movs	r3, #0
 8005642:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800564a:	2b01      	cmp	r3, #1
 800564c:	d002      	beq.n	8005654 <CDC_ProcessTransmission+0x26>
 800564e:	2b02      	cmp	r3, #2
 8005650:	d025      	beq.n	800569e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005652:	e07c      	b.n	800574e <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	8b12      	ldrh	r2, [r2, #24]
 800565c:	4293      	cmp	r3, r2
 800565e:	d90c      	bls.n	800567a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8b1a      	ldrh	r2, [r3, #24]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	7b58      	ldrb	r0, [r3, #13]
 800566c:	2301      	movs	r3, #1
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4603      	mov	r3, r0
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fc49 	bl	8006f0a <USBH_BulkSendData>
 8005678:	e00c      	b.n	8005694 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	7b58      	ldrb	r0, [r3, #13]
 8005688:	2301      	movs	r3, #1
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4603      	mov	r3, r0
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fc3b 	bl	8006f0a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800569c:	e057      	b.n	800574e <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	7b5b      	ldrb	r3, [r3, #13]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f004 feb3 	bl	800a410 <USBH_LL_GetURBState>
 80056aa:	4603      	mov	r3, r0
 80056ac:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d136      	bne.n	8005722 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	8b12      	ldrh	r2, [r2, #24]
 80056bc:	4293      	cmp	r3, r2
 80056be:	d90e      	bls.n	80056de <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	8b12      	ldrh	r2, [r2, #24]
 80056c8:	1a9a      	subs	r2, r3, r2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	8b12      	ldrh	r2, [r2, #24]
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	61da      	str	r2, [r3, #28]
 80056dc:	e002      	b.n	80056e4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80056f4:	e006      	b.n	8005704 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f892 	bl	8005828 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005718:	2200      	movs	r2, #0
 800571a:	4619      	mov	r1, r3
 800571c:	f001 fd7e 	bl	800721c <osMessagePut>
    break;
 8005720:	e014      	b.n	800574c <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d111      	bne.n	800574c <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2204      	movs	r2, #4
 8005734:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005744:	2200      	movs	r2, #0
 8005746:	4619      	mov	r1, r3
 8005748:	f001 fd68 	bl	800721c <osMessagePut>
    break;
 800574c:	bf00      	nop
  }
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005768:	2300      	movs	r3, #0
 800576a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005772:	2b03      	cmp	r3, #3
 8005774:	d002      	beq.n	800577c <CDC_ProcessReception+0x26>
 8005776:	2b04      	cmp	r3, #4
 8005778:	d00e      	beq.n	8005798 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800577a:	e051      	b.n	8005820 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6a19      	ldr	r1, [r3, #32]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	8b5a      	ldrh	r2, [r3, #26]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	7b1b      	ldrb	r3, [r3, #12]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fbe3 	bl	8006f54 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2204      	movs	r2, #4
 8005792:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005796:	e043      	b.n	8005820 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	7b1b      	ldrb	r3, [r3, #12]
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f004 fe36 	bl	800a410 <USBH_LL_GetURBState>
 80057a4:	4603      	mov	r3, r0
 80057a6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d137      	bne.n	800581e <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	7b1b      	ldrb	r3, [r3, #12]
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f004 fd99 	bl	800a2ec <USBH_LL_GetLastXferSize>
 80057ba:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d016      	beq.n	80057f4 <CDC_ProcessReception+0x9e>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	8b5b      	ldrh	r3, [r3, #26]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d910      	bls.n	80057f4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad2      	subs	r2, r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	441a      	add	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2203      	movs	r2, #3
 80057ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80057f2:	e006      	b.n	8005802 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f81d 	bl	800583c <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005816:	2200      	movs	r2, #0
 8005818:	4619      	mov	r1, r3
 800581a:	f001 fcff 	bl	800721c <osMessagePut>
    break;
 800581e:	bf00      	nop
  }
}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]

}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005864:	b5b0      	push	{r4, r5, r7, lr}
 8005866:	b090      	sub	sp, #64	; 0x40
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005878:	2302      	movs	r3, #2
 800587a:	e03d      	b.n	80058f8 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	79fa      	ldrb	r2, [r7, #7]
 8005880:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f837 	bl	8005908 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <USBH_Init+0x9c>)
 80058aa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80058ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 80058b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fc85 	bl	80071ca <osMessageCreate>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <USBH_Init+0xa0>)
 80058ca:	f107 0414 	add.w	r4, r7, #20
 80058ce:	461d      	mov	r5, r3
 80058d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fc11 	bl	800710a <osThreadCreate>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f004 fc49 	bl	800a188 <USBH_LL_Init>

  return USBH_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3740      	adds	r7, #64	; 0x40
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005900:	0800a7f0 	.word	0x0800a7f0
 8005904:	0800a80c 	.word	0x0800a80c

08005908 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005914:	e008      	b.n	8005928 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	32e0      	adds	r2, #224	; 0xe0
 800591c:	2100      	movs	r1, #0
 800591e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b0e      	cmp	r3, #14
 800592c:	d9f3      	bls.n	8005916 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	e009      	b.n	8005948 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594e:	d3f1      	bcc.n	8005934 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2240      	movs	r2, #64	; 0x40
 8005974:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d017      	beq.n	80059de <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	33dc      	adds	r3, #220	; 0xdc
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e004      	b.n	80059e2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80059d8:	2302      	movs	r3, #2
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e001      	b.n	80059e2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80059de:	2302      	movs	r3, #2
 80059e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d204      	bcs.n	8005a16 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005a14:	e001      	b.n	8005a1a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a16:	2302      	movs	r3, #2
 8005a18:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	4608      	mov	r0, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	70fb      	strb	r3, [r7, #3]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70bb      	strb	r3, [r7, #2]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005a50:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a52:	e025      	b.n	8005aa0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	221a      	movs	r2, #26
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	3302      	adds	r3, #2
 8005a64:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	795b      	ldrb	r3, [r3, #5]
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d002      	beq.n	8005a76 <USBH_FindInterface+0x4e>
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	2bff      	cmp	r3, #255	; 0xff
 8005a74:	d111      	bne.n	8005a9a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005a7a:	78ba      	ldrb	r2, [r7, #2]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d002      	beq.n	8005a86 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005a80:	78bb      	ldrb	r3, [r7, #2]
 8005a82:	2bff      	cmp	r3, #255	; 0xff
 8005a84:	d109      	bne.n	8005a9a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005a8a:	787a      	ldrb	r2, [r7, #1]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d002      	beq.n	8005a96 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a90:	787b      	ldrb	r3, [r7, #1]
 8005a92:	2bff      	cmp	r3, #255	; 0xff
 8005a94:	d101      	bne.n	8005a9a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	e006      	b.n	8005aa8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d9d6      	bls.n	8005a54 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005aa6:	23ff      	movs	r3, #255	; 0xff
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f004 fb9f 	bl	800a200 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f004 fcb6 	bl	800a436 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af04      	add	r7, sp, #16
 8005ada:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005adc:	2302      	movs	r3, #2
 8005ade:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fb7e 	bl	80061e6 <USBH_IsPortEnabled>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10c      	bne.n	8005b0a <USBH_Process+0x36>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d002      	beq.n	8005b0a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2203      	movs	r2, #3
 8005b08:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b0b      	cmp	r3, #11
 8005b12:	f200 81ab 	bhi.w	8005e6c <USBH_Process+0x398>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <USBH_Process+0x48>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b8b 	.word	0x08005b8b
 8005b24:	08005b9f 	.word	0x08005b9f
 8005b28:	08005e47 	.word	0x08005e47
 8005b2c:	08005e6d 	.word	0x08005e6d
 8005b30:	08005c49 	.word	0x08005c49
 8005b34:	08005de1 	.word	0x08005de1
 8005b38:	08005c79 	.word	0x08005c79
 8005b3c:	08005cb5 	.word	0x08005cb5
 8005b40:	08005cef 	.word	0x08005cef
 8005b44:	08005d37 	.word	0x08005d37
 8005b48:	08005e2f 	.word	0x08005e2f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 818b 	beq.w	8005e70 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005b60:	20c8      	movs	r0, #200	; 0xc8
 8005b62:	f004 fcb2 	bl	800a4ca <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f004 fba5 	bl	800a2b6 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b80:	2200      	movs	r2, #0
 8005b82:	4619      	mov	r1, r3
 8005b84:	f001 fb4a 	bl	800721c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005b88:	e172      	b.n	8005e70 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	f040 816f 	bne.w	8005e74 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005b9c:	e16a      	b.n	8005e74 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005b9e:	2064      	movs	r0, #100	; 0x64
 8005ba0:	f004 fc93 	bl	800a4ca <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f004 fb61 	bl	800a26c <USBH_LL_GetSpeed>
 8005baa:	4603      	mov	r3, r0
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2205      	movs	r2, #5
 8005bb8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 fa16 	bl	8006fee <USBH_AllocPipe>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fa0e 	bl	8006fee <USBH_AllocPipe>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	7919      	ldrb	r1, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005bee:	b292      	uxth	r2, r2
 8005bf0:	9202      	str	r2, [sp, #8]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2280      	movs	r2, #128	; 0x80
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f9c7 	bl	8006f90 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7959      	ldrb	r1, [r3, #5]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005c16:	b292      	uxth	r2, r2
 8005c18:	9202      	str	r2, [sp, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	9201      	str	r2, [sp, #4]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	4603      	mov	r3, r0
 8005c22:	2200      	movs	r2, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 f9b3 	bl	8006f90 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4619      	mov	r1, r3
 8005c42:	f001 faeb 	bl	800721c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005c46:	e120      	b.n	8005e8a <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f923 	bl	8005e94 <USBH_HandleEnum>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 8111 	bne.w	8005e78 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d103      	bne.n	8005c70 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2208      	movs	r2, #8
 8005c6c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005c6e:	e103      	b.n	8005e78 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2207      	movs	r2, #7
 8005c74:	701a      	strb	r2, [r3, #0]
    break;
 8005c76:	e0ff      	b.n	8005e78 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80fc 	beq.w	8005e7c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2208      	movs	r2, #8
 8005c94:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2205      	movs	r2, #5
 8005c9a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005caa:	2200      	movs	r2, #0
 8005cac:	4619      	mov	r1, r3
 8005cae:	f001 fab5 	bl	800721c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005cb2:	e0e3      	b.n	8005e7c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fc09 	bl	80064d6 <USBH_SetCfg>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2209      	movs	r2, #9
 8005cce:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f001 fa98 	bl	800721c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005cec:	e0cd      	b.n	8005e8a <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fc0c 	bl	800651c <USBH_SetFeature>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	220a      	movs	r2, #10
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e002      	b.n	8005d18 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	220a      	movs	r2, #10
 8005d16:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f001 fa74 	bl	800721c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d34:	e0a9      	b.n	8005e8a <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d040      	beq.n	8005dc2 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e017      	b.n	8005d7e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	33dc      	adds	r3, #220	; 0xdc
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	791a      	ldrb	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d108      	bne.n	8005d78 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	33dc      	adds	r3, #220	; 0xdc
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0e4      	beq.n	8005d4e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d016      	beq.n	8005dbc <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2206      	movs	r2, #6
 8005da4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005dac:	2103      	movs	r1, #3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
 8005db2:	e006      	b.n	8005dc2 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	220d      	movs	r2, #13
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	220d      	movs	r2, #13
 8005dc0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2205      	movs	r2, #5
 8005dc6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f001 fa1f 	bl	800721c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005dde:	e054      	b.n	8005e8a <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00f      	beq.n	8005e0a <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005dfa:	7bbb      	ldrb	r3, [r7, #14]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d13e      	bne.n	8005e80 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	220b      	movs	r2, #11
 8005e06:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005e08:	e03a      	b.n	8005e80 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	220d      	movs	r2, #13
 8005e0e:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2205      	movs	r2, #5
 8005e14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e24:	2200      	movs	r2, #0
 8005e26:	4619      	mov	r1, r3
 8005e28:	f001 f9f8 	bl	800721c <osMessagePut>
    break;
 8005e2c:	e028      	b.n	8005e80 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d025      	beq.n	8005e84 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
    }
    break;
 8005e44:	e01e      	b.n	8005e84 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff fd5e 	bl	8005908 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d018      	beq.n	8005e88 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005e6a:	e00d      	b.n	8005e88 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8005e6c:	bf00      	nop
 8005e6e:	e00c      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e70:	bf00      	nop
 8005e72:	e00a      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e74:	bf00      	nop
 8005e76:	e008      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e78:	bf00      	nop
 8005e7a:	e006      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e7c:	bf00      	nop
 8005e7e:	e004      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e80:	bf00      	nop
 8005e82:	e002      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e84:	bf00      	nop
 8005e86:	e000      	b.n	8005e8a <USBH_Process+0x3b6>
    break;
 8005e88:	bf00      	nop
  }
 return USBH_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	f200 8132 	bhi.w	800610e <USBH_HandleEnum+0x27a>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <USBH_HandleEnum+0x1c>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005ed1 	.word	0x08005ed1
 8005eb4:	08005f43 	.word	0x08005f43
 8005eb8:	08005f5b 	.word	0x08005f5b
 8005ebc:	08005fd1 	.word	0x08005fd1
 8005ec0:	08005fe9 	.word	0x08005fe9
 8005ec4:	08006007 	.word	0x08006007
 8005ec8:	08006073 	.word	0x08006073
 8005ecc:	080060c3 	.word	0x080060c3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005ed0:	2108      	movs	r1, #8
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa2f 	bl	8006336 <USBH_Get_DevDesc>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 8119 	bne.w	8006112 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7919      	ldrb	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f04:	b292      	uxth	r2, r2
 8005f06:	9202      	str	r2, [sp, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	9201      	str	r2, [sp, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2280      	movs	r2, #128	; 0x80
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 f83c 	bl	8006f90 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7959      	ldrb	r1, [r3, #5]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f2c:	b292      	uxth	r2, r2
 8005f2e:	9202      	str	r2, [sp, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	9201      	str	r2, [sp, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	4603      	mov	r3, r0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 f828 	bl	8006f90 <USBH_OpenPipe>

    }
    break;
 8005f40:	e0e7      	b.n	8006112 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005f42:	2112      	movs	r1, #18
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9f6 	bl	8006336 <USBH_Get_DevDesc>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 80e2 	bne.w	8006116 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	705a      	strb	r2, [r3, #1]

    }
    break;
 8005f58:	e0dd      	b.n	8006116 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa96 	bl	800648e <USBH_SetAddress>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 80d8 	bne.w	800611a <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8005f6a:	2002      	movs	r0, #2
 8005f6c:	f004 faad 	bl	800a4ca <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7919      	ldrb	r1, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f92:	b292      	uxth	r2, r2
 8005f94:	9202      	str	r2, [sp, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	9201      	str	r2, [sp, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fff5 	bl	8006f90 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7959      	ldrb	r1, [r3, #5]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005fba:	b292      	uxth	r2, r2
 8005fbc:	9202      	str	r2, [sp, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	9201      	str	r2, [sp, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 ffe1 	bl	8006f90 <USBH_OpenPipe>
    }
    break;
 8005fce:	e0a4      	b.n	800611a <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8005fd0:	2109      	movs	r1, #9
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9d7 	bl	8006386 <USBH_Get_CfgDesc>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 809f 	bne.w	800611e <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	705a      	strb	r2, [r3, #1]
    }
    break;
 8005fe6:	e09a      	b.n	800611e <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f9c8 	bl	8006386 <USBH_Get_CfgDesc>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8092 	bne.w	8006122 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2205      	movs	r2, #5
 8006002:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006004:	e08d      	b.n	8006122 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01e      	beq.n	800604e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800601c:	23ff      	movs	r3, #255	; 0xff
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9d5 	bl	80063ce <USBH_Get_StringDesc>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d17d      	bne.n	8006126 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2206      	movs	r2, #6
 800602e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2205      	movs	r2, #5
 8006034:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006044:	2200      	movs	r2, #0
 8006046:	4619      	mov	r1, r3
 8006048:	f001 f8e8 	bl	800721c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800604c:	e06b      	b.n	8006126 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2206      	movs	r2, #6
 8006052:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2205      	movs	r2, #5
 8006058:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006068:	2200      	movs	r2, #0
 800606a:	4619      	mov	r1, r3
 800606c:	f001 f8d6 	bl	800721c <osMessagePut>
    break;
 8006070:	e059      	b.n	8006126 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006078:	2b00      	cmp	r3, #0
 800607a:	d010      	beq.n	800609e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006088:	23ff      	movs	r3, #255	; 0xff
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f99f 	bl	80063ce <USBH_Get_StringDesc>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d149      	bne.n	800612a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2207      	movs	r2, #7
 800609a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800609c:	e045      	b.n	800612a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2207      	movs	r2, #7
 80060a2:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2205      	movs	r2, #5
 80060a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060b8:	2200      	movs	r2, #0
 80060ba:	4619      	mov	r1, r3
 80060bc:	f001 f8ae 	bl	800721c <osMessagePut>
    break;
 80060c0:	e033      	b.n	800612a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80060d8:	23ff      	movs	r3, #255	; 0xff
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f977 	bl	80063ce <USBH_Get_StringDesc>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d123      	bne.n	800612e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060ea:	e020      	b.n	800612e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2205      	movs	r2, #5
 80060f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006104:	2200      	movs	r2, #0
 8006106:	4619      	mov	r1, r3
 8006108:	f001 f888 	bl	800721c <osMessagePut>
    break;
 800610c:	e00f      	b.n	800612e <USBH_HandleEnum+0x29a>

  default:
    break;
 800610e:	bf00      	nop
 8006110:	e00e      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 8006112:	bf00      	nop
 8006114:	e00c      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 8006116:	bf00      	nop
 8006118:	e00a      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 800611a:	bf00      	nop
 800611c:	e008      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 800611e:	bf00      	nop
 8006120:	e006      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <USBH_HandleEnum+0x29c>
    break;
 800612e:	bf00      	nop
  }
  return Status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop

0800613c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f804 	bl	800617e <USBH_HandleSof>
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b0b      	cmp	r3, #11
 800618e:	d10a      	bne.n	80061a6 <USBH_HandleSof+0x28>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
  }
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80061be:	bf00      	nop
}
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80061da:	bf00      	nop
}
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800622a:	2104      	movs	r1, #4
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
 8006230:	e007      	b.n	8006242 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006238:	2b01      	cmp	r3, #1
 800623a:	d102      	bne.n	8006242 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006256:	2200      	movs	r2, #0
 8006258:	4619      	mov	r1, r3
 800625a:	f000 ffdf 	bl	800721c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f003 ffe0 	bl	800a236 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fed4 	bl	800702a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	795b      	ldrb	r3, [r3, #5]
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fece 	bl	800702a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062a6:	2105      	movs	r1, #5
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f003 ffa7 	bl	800a200 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2203      	movs	r2, #3
 80062b6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062cc:	2200      	movs	r2, #0
 80062ce:	4619      	mov	r1, r3
 80062d0:	f000 ffa4 	bl	800721c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 80062ec:	f107 030c 	add.w	r3, r7, #12
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 ffd1 	bl	800729c <osMessageGet>
    if(event.status == osEventMessage)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b10      	cmp	r3, #16
 80062fe:	d1f2      	bne.n	80062e6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff fbe7 	bl	8005ad4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006306:	e7ee      	b.n	80062e6 <USBH_Process_OS+0x8>

08006308 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006324:	2200      	movs	r2, #0
 8006326:	4619      	mov	r1, r3
 8006328:	f000 ff78 	bl	800721c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af02      	add	r7, sp, #8
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	b29b      	uxth	r3, r3
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	4613      	mov	r3, r2
 8006350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006354:	2100      	movs	r1, #0
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f864 	bl	8006424 <USBH_GetDescriptor>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f203 3022 	addw	r0, r3, #802	; 0x322
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	b292      	uxth	r2, r2
 8006376:	4619      	mov	r1, r3
 8006378:	f000 f918 	bl	80065ac <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af02      	add	r7, sp, #8
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	331c      	adds	r3, #28
 8006396:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006398:	887b      	ldrh	r3, [r7, #2]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a2:	2100      	movs	r1, #0
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f83d 	bl	8006424 <USBH_GetDescriptor>
 80063aa:	4603      	mov	r3, r0
 80063ac:	72fb      	strb	r3, [r7, #11]
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80063ba:	887a      	ldrh	r2, [r7, #2]
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f964 	bl	800668c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80063c4:	7afb      	ldrb	r3, [r7, #11]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b088      	sub	sp, #32
 80063d2:	af02      	add	r7, sp, #8
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	461a      	mov	r2, r3
 80063da:	460b      	mov	r3, r1
 80063dc:	72fb      	strb	r3, [r7, #11]
 80063de:	4613      	mov	r3, r2
 80063e0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80063e2:	7afb      	ldrb	r3, [r7, #11]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80063ea:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80063f2:	893b      	ldrh	r3, [r7, #8]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	460b      	mov	r3, r1
 80063f8:	2100      	movs	r1, #0
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f812 	bl	8006424 <USBH_GetDescriptor>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d107      	bne.n	800641a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006410:	893a      	ldrh	r2, [r7, #8]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fa37 	bl	8006888 <USBH_ParseStringDesc>
  }
  return status;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	72fb      	strb	r3, [r7, #11]
 8006432:	4613      	mov	r3, r2
 8006434:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	789b      	ldrb	r3, [r3, #2]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d11c      	bne.n	8006478 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2206      	movs	r2, #6
 800644e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	893a      	ldrh	r2, [r7, #8]
 8006454:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006456:	893b      	ldrh	r3, [r7, #8]
 8006458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800645c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006460:	d104      	bne.n	800646c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f240 4209 	movw	r2, #1033	; 0x409
 8006468:	829a      	strh	r2, [r3, #20]
 800646a:	e002      	b.n	8006472 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8b3a      	ldrh	r2, [r7, #24]
 8006476:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006478:	8b3b      	ldrh	r3, [r7, #24]
 800647a:	461a      	mov	r2, r3
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa50 	bl	8006924 <USBH_CtlReq>
 8006484:	4603      	mov	r3, r0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	789b      	ldrb	r3, [r3, #2]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10f      	bne.n	80064c2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2205      	movs	r2, #5
 80064ac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa2c 	bl	8006924 <USBH_CtlReq>
 80064cc:	4603      	mov	r3, r0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	789b      	ldrb	r3, [r3, #2]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d10e      	bne.n	8006508 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2209      	movs	r2, #9
 80064f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006508:	2200      	movs	r2, #0
 800650a:	2100      	movs	r1, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa09 	bl	8006924 <USBH_CtlReq>
 8006512:	4603      	mov	r3, r0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	789b      	ldrb	r3, [r3, #2]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10f      	bne.n	8006550 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2203      	movs	r2, #3
 800653a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006550:	2200      	movs	r2, #0
 8006552:	2100      	movs	r1, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f9e5 	bl	8006924 <USBH_CtlReq>
 800655a:	4603      	mov	r3, r0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	789b      	ldrb	r3, [r3, #2]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d10f      	bne.n	8006598 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9c1 	bl	8006924 <USBH_CtlReq>
 80065a2:	4603      	mov	r3, r0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	785a      	ldrb	r2, [r3, #1]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3302      	adds	r3, #2
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3303      	adds	r3, #3
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	b29b      	uxth	r3, r3
 80065de:	4313      	orrs	r3, r2
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	791a      	ldrb	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	795a      	ldrb	r2, [r3, #5]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	799a      	ldrb	r2, [r3, #6]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	79da      	ldrb	r2, [r3, #7]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d939      	bls.n	8006680 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	3308      	adds	r3, #8
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3309      	adds	r3, #9
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	b29b      	uxth	r3, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	330a      	adds	r3, #10
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b29a      	uxth	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	330b      	adds	r3, #11
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	b29b      	uxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	330c      	adds	r3, #12
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	b29a      	uxth	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	330d      	adds	r3, #13
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	b29b      	uxth	r3, r3
 8006658:	4313      	orrs	r3, r2
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	7b9a      	ldrb	r2, [r3, #14]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	7bda      	ldrb	r2, [r3, #15]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	7c1a      	ldrb	r2, [r3, #16]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	7c5a      	ldrb	r2, [r3, #17]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	745a      	strb	r2, [r3, #17]
  }
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	785a      	ldrb	r2, [r3, #1]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	3302      	adds	r3, #2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	3303      	adds	r3, #3
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	791a      	ldrb	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	795a      	ldrb	r2, [r3, #5]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	799a      	ldrb	r2, [r3, #6]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	79da      	ldrb	r2, [r3, #7]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	7a1a      	ldrb	r2, [r3, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2b09      	cmp	r3, #9
 8006706:	d95f      	bls.n	80067c8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006708:	2309      	movs	r3, #9
 800670a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006710:	e051      	b.n	80067b6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006712:	f107 0316 	add.w	r3, r7, #22
 8006716:	4619      	mov	r1, r3
 8006718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800671a:	f000 f8e8 	bl	80068ee <USBH_GetNextDesc>
 800671e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b04      	cmp	r3, #4
 8006726:	d146      	bne.n	80067b6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800672c:	221a      	movs	r2, #26
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	3308      	adds	r3, #8
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	3302      	adds	r3, #2
 800673a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800673c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800673e:	69f8      	ldr	r0, [r7, #28]
 8006740:	f000 f846 	bl	80067d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800674e:	e022      	b.n	8006796 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006750:	f107 0316 	add.w	r3, r7, #22
 8006754:	4619      	mov	r1, r3
 8006756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006758:	f000 f8c9 	bl	80068ee <USBH_GetNextDesc>
 800675c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b05      	cmp	r3, #5
 8006764:	d117      	bne.n	8006796 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800676a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800676e:	3201      	adds	r2, #1
 8006770:	00d2      	lsls	r2, r2, #3
 8006772:	211a      	movs	r1, #26
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	3308      	adds	r3, #8
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	3304      	adds	r3, #4
 8006782:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f000 f851 	bl	800682e <USBH_ParseEPDesc>
            ep_ix++;
 800678c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006790:	3301      	adds	r3, #1
 8006792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	791b      	ldrb	r3, [r3, #4]
 800679a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800679e:	429a      	cmp	r2, r3
 80067a0:	d204      	bcs.n	80067ac <USBH_ParseCfgDesc+0x120>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	885a      	ldrh	r2, [r3, #2]
 80067a6:	8afb      	ldrh	r3, [r7, #22]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d8d1      	bhi.n	8006750 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80067ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067b0:	3301      	adds	r3, #1
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d804      	bhi.n	80067c8 <USBH_ParseCfgDesc+0x13c>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	885a      	ldrh	r2, [r3, #2]
 80067c2:	8afb      	ldrh	r3, [r7, #22]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d8a4      	bhi.n	8006712 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80067c8:	bf00      	nop
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785a      	ldrb	r2, [r3, #1]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	789a      	ldrb	r2, [r3, #2]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	78da      	ldrb	r2, [r3, #3]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	791a      	ldrb	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	795a      	ldrb	r2, [r3, #5]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	799a      	ldrb	r2, [r3, #6]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	79da      	ldrb	r2, [r3, #7]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	7a1a      	ldrb	r2, [r3, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	721a      	strb	r2, [r3, #8]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781a      	ldrb	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	785a      	ldrb	r2, [r3, #1]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	789a      	ldrb	r2, [r3, #2]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	78da      	ldrb	r2, [r3, #3]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b29a      	uxth	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	3305      	adds	r3, #5
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	799a      	ldrb	r2, [r3, #6]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	719a      	strb	r2, [r3, #6]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d120      	bne.n	80068e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	1e9a      	subs	r2, r3, #2
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bf28      	it	cs
 80068ac:	4613      	movcs	r3, r2
 80068ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3302      	adds	r3, #2
 80068b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80068b6:	2300      	movs	r3, #0
 80068b8:	82fb      	strh	r3, [r7, #22]
 80068ba:	e00b      	b.n	80068d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80068bc:	8afb      	ldrh	r3, [r7, #22]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80068ce:	8afb      	ldrh	r3, [r7, #22]
 80068d0:	3302      	adds	r3, #2
 80068d2:	82fb      	strh	r3, [r7, #22]
 80068d4:	8afa      	ldrh	r2, [r7, #22]
 80068d6:	8abb      	ldrh	r3, [r7, #20]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d3ef      	bcc.n	80068bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
  }
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	881a      	ldrh	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	4413      	add	r3, r2
 8006904:	b29a      	uxth	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006932:	2301      	movs	r3, #1
 8006934:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	789b      	ldrb	r3, [r3, #2]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d002      	beq.n	8006944 <USBH_CtlReq+0x20>
 800693e:	2b02      	cmp	r3, #2
 8006940:	d01d      	beq.n	800697e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8006942:	e042      	b.n	80069ca <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2202      	movs	r2, #2
 800695a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2203      	movs	r2, #3
 8006964:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006974:	2200      	movs	r2, #0
 8006976:	4619      	mov	r1, r3
 8006978:	f000 fc50 	bl	800721c <osMessagePut>
    break;
 800697c:	e025      	b.n	80069ca <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f828 	bl	80069d4 <USBH_HandleControl>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d108      	bne.n	80069a0 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]
    break;
 800699e:	e013      	b.n	80069c8 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d108      	bne.n	80069b8 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80069b2:	2303      	movs	r3, #3
 80069b4:	75fb      	strb	r3, [r7, #23]
    break;
 80069b6:	e007      	b.n	80069c8 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d104      	bne.n	80069c8 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	75fb      	strb	r3, [r7, #23]
    break;
 80069c8:	bf00      	nop
  }
  return status;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af02      	add	r7, sp, #8
 80069da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7e1b      	ldrb	r3, [r3, #24]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	2b0a      	cmp	r3, #10
 80069ec:	f200 821f 	bhi.w	8006e2e <USBH_HandleControl+0x45a>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <USBH_HandleControl+0x24>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	08006a3f 	.word	0x08006a3f
 8006a00:	08006ae1 	.word	0x08006ae1
 8006a04:	08006b07 	.word	0x08006b07
 8006a08:	08006b93 	.word	0x08006b93
 8006a0c:	08006bbf 	.word	0x08006bbf
 8006a10:	08006c81 	.word	0x08006c81
 8006a14:	08006ca3 	.word	0x08006ca3
 8006a18:	08006d35 	.word	0x08006d35
 8006a1c:	08006d5d 	.word	0x08006d5d
 8006a20:	08006def 	.word	0x08006def
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f103 0110 	add.w	r1, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	795b      	ldrb	r3, [r3, #5]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa0d 	bl	8006e50 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	761a      	strb	r2, [r3, #24]
    break;
 8006a3c:	e202      	b.n	8006e44 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	795b      	ldrb	r3, [r3, #5]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f003 fce3 	bl	800a410 <USBH_LL_GetURBState>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d12c      	bne.n	8006aae <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7c1b      	ldrb	r3, [r3, #16]
 8006a58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a5c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8adb      	ldrh	r3, [r3, #22]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006a66:	7b7b      	ldrb	r3, [r7, #13]
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d103      	bne.n	8006a74 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	761a      	strb	r2, [r3, #24]
 8006a72:	e00d      	b.n	8006a90 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2205      	movs	r2, #5
 8006a78:	761a      	strb	r2, [r3, #24]
 8006a7a:	e009      	b.n	8006a90 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8006a7c:	7b7b      	ldrb	r3, [r7, #13]
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d103      	bne.n	8006a8a <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2209      	movs	r2, #9
 8006a86:	761a      	strb	r2, [r3, #24]
 8006a88:	e002      	b.n	8006a90 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f000 fbb8 	bl	800721c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006aac:	e1c1      	b.n	8006e32 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d003      	beq.n	8006abc <USBH_HandleControl+0xe8>
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	f040 81bb 	bne.w	8006e32 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	220b      	movs	r2, #11
 8006ac0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f000 fb9f 	bl	800721c <osMessagePut>
    break;
 8006ade:	e1a8      	b.n	8006e32 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6899      	ldr	r1, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	899a      	ldrh	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	791b      	ldrb	r3, [r3, #4]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9e8 	bl	8006ece <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2204      	movs	r2, #4
 8006b02:	761a      	strb	r2, [r3, #24]
    break;
 8006b04:	e19e      	b.n	8006e44 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f003 fc7f 	bl	800a410 <USBH_LL_GetURBState>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d110      	bne.n	8006b3e <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2209      	movs	r2, #9
 8006b20:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2203      	movs	r2, #3
 8006b26:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b36:	2200      	movs	r2, #0
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f000 fb6f 	bl	800721c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b05      	cmp	r3, #5
 8006b42:	d110      	bne.n	8006b66 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006b44:	2303      	movs	r3, #3
 8006b46:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f000 fb5c 	bl	800721c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b64:	e167      	b.n	8006e36 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	f040 8164 	bne.w	8006e36 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	220b      	movs	r2, #11
 8006b72:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2203      	movs	r2, #3
 8006b78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f000 fb46 	bl	800721c <osMessagePut>
    break;
 8006b90:	e151      	b.n	8006e36 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6899      	ldr	r1, [r3, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	899a      	ldrh	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7958      	ldrb	r0, [r3, #5]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f96d 	bl	8006e84 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2206      	movs	r2, #6
 8006bba:	761a      	strb	r2, [r3, #24]
    break;
 8006bbc:	e142      	b.n	8006e44 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	795b      	ldrb	r3, [r3, #5]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f003 fc23 	bl	800a410 <USBH_LL_GetURBState>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d111      	bne.n	8006bf8 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2207      	movs	r2, #7
 8006bd8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	f000 fb13 	bl	800721c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bf6:	e120      	b.n	8006e3a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d113      	bne.n	8006c26 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	220c      	movs	r2, #12
 8006c02:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006c04:	2303      	movs	r3, #3
 8006c06:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f000 fafc 	bl	800721c <osMessagePut>
    break;
 8006c24:	e109      	b.n	8006e3a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d111      	bne.n	8006c50 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2205      	movs	r2, #5
 8006c30:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2203      	movs	r2, #3
 8006c36:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c46:	2200      	movs	r2, #0
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f000 fae7 	bl	800721c <osMessagePut>
    break;
 8006c4e:	e0f4      	b.n	8006e3a <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	f040 80f1 	bne.w	8006e3a <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	220b      	movs	r2, #11
 8006c5c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c76:	2200      	movs	r2, #0
 8006c78:	4619      	mov	r1, r3
 8006c7a:	f000 facf 	bl	800721c <osMessagePut>
    break;
 8006c7e:	e0dc      	b.n	8006e3a <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791b      	ldrb	r3, [r3, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f920 	bl	8006ece <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	761a      	strb	r2, [r3, #24]

    break;
 8006ca0:	e0d0      	b.n	8006e44 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f003 fbb1 	bl	800a410 <USBH_LL_GetURBState>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d113      	bne.n	8006ce0 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	220d      	movs	r2, #13
 8006cbc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f000 fa9f 	bl	800721c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006cde:	e0ae      	b.n	8006e3e <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d111      	bne.n	8006d0a <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	220b      	movs	r2, #11
 8006cea:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d00:	2200      	movs	r2, #0
 8006d02:	4619      	mov	r1, r3
 8006d04:	f000 fa8a 	bl	800721c <osMessagePut>
    break;
 8006d08:	e099      	b.n	8006e3e <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	f040 8096 	bne.w	8006e3e <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8006d12:	2303      	movs	r3, #3
 8006d14:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	f000 fa75 	bl	800721c <osMessagePut>
    break;
 8006d32:	e084      	b.n	8006e3e <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	795a      	ldrb	r2, [r3, #5]
 8006d38:	2301      	movs	r3, #1
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2100      	movs	r1, #0
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f89e 	bl	8006e84 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	220a      	movs	r2, #10
 8006d58:	761a      	strb	r2, [r3, #24]
    break;
 8006d5a:	e073      	b.n	8006e44 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	795b      	ldrb	r3, [r3, #5]
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f003 fb54 	bl	800a410 <USBH_LL_GetURBState>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d113      	bne.n	8006d9a <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	220d      	movs	r2, #13
 8006d7a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d90:	2200      	movs	r2, #0
 8006d92:	4619      	mov	r1, r3
 8006d94:	f000 fa42 	bl	800721c <osMessagePut>
#endif
#endif
      }

    }
    break;
 8006d98:	e053      	b.n	8006e42 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d111      	bne.n	8006dc4 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2209      	movs	r2, #9
 8006da4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2203      	movs	r2, #3
 8006daa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f000 fa2d 	bl	800721c <osMessagePut>
    break;
 8006dc2:	e03e      	b.n	8006e42 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d13b      	bne.n	8006e42 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220b      	movs	r2, #11
 8006dce:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de4:	2200      	movs	r2, #0
 8006de6:	4619      	mov	r1, r3
 8006de8:	f000 fa18 	bl	800721c <osMessagePut>
    break;
 8006dec:	e029      	b.n	8006e42 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7e5b      	ldrb	r3, [r3, #25]
 8006df2:	3301      	adds	r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	765a      	strb	r2, [r3, #25]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7e5b      	ldrb	r3, [r3, #25]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d809      	bhi.n	8006e16 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 fa17 	bl	800a236 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006e14:	e016      	b.n	8006e44 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e1c:	2106      	movs	r1, #6
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e2c:	e00a      	b.n	8006e44 <USBH_HandleControl+0x470>

  default:
    break;
 8006e2e:	bf00      	nop
 8006e30:	e008      	b.n	8006e44 <USBH_HandleControl+0x470>
    break;
 8006e32:	bf00      	nop
 8006e34:	e006      	b.n	8006e44 <USBH_HandleControl+0x470>
    break;
 8006e36:	bf00      	nop
 8006e38:	e004      	b.n	8006e44 <USBH_HandleControl+0x470>
    break;
 8006e3a:	bf00      	nop
 8006e3c:	e002      	b.n	8006e44 <USBH_HandleControl+0x470>
    break;
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <USBH_HandleControl+0x470>
    break;
 8006e42:	bf00      	nop
  }
  return status;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop

08006e50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af04      	add	r7, sp, #16
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e5e:	79f9      	ldrb	r1, [r7, #7]
 8006e60:	2300      	movs	r3, #0
 8006e62:	9303      	str	r3, [sp, #12]
 8006e64:	2308      	movs	r3, #8
 8006e66:	9302      	str	r3, [sp, #8]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	2300      	movs	r3, #0
 8006e72:	2200      	movs	r2, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f003 fa9a 	bl	800a3ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4611      	mov	r1, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	460b      	mov	r3, r1
 8006e94:	80fb      	strh	r3, [r7, #6]
 8006e96:	4613      	mov	r3, r2
 8006e98:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ea8:	7979      	ldrb	r1, [r7, #5]
 8006eaa:	7e3b      	ldrb	r3, [r7, #24]
 8006eac:	9303      	str	r3, [sp, #12]
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	9302      	str	r3, [sp, #8]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f003 fa75 	bl	800a3ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b088      	sub	sp, #32
 8006ed2:	af04      	add	r7, sp, #16
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	4611      	mov	r1, r2
 8006eda:	461a      	mov	r2, r3
 8006edc:	460b      	mov	r3, r1
 8006ede:	80fb      	strh	r3, [r7, #6]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ee4:	7979      	ldrb	r1, [r7, #5]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	9302      	str	r3, [sp, #8]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2201      	movs	r2, #1
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f003 fa57 	bl	800a3ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f00:	2300      	movs	r3, #0

}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b088      	sub	sp, #32
 8006f0e:	af04      	add	r7, sp, #16
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	4611      	mov	r1, r2
 8006f16:	461a      	mov	r2, r3
 8006f18:	460b      	mov	r3, r1
 8006f1a:	80fb      	strh	r3, [r7, #6]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f2e:	7979      	ldrb	r1, [r7, #5]
 8006f30:	7e3b      	ldrb	r3, [r7, #24]
 8006f32:	9303      	str	r3, [sp, #12]
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	9302      	str	r3, [sp, #8]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	2302      	movs	r3, #2
 8006f42:	2200      	movs	r2, #0
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f003 fa32 	bl	800a3ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af04      	add	r7, sp, #16
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	461a      	mov	r2, r3
 8006f62:	460b      	mov	r3, r1
 8006f64:	80fb      	strh	r3, [r7, #6]
 8006f66:	4613      	mov	r3, r2
 8006f68:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f6a:	7979      	ldrb	r1, [r7, #5]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9303      	str	r3, [sp, #12]
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	9302      	str	r3, [sp, #8]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	2201      	movs	r2, #1
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f003 fa14 	bl	800a3ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af04      	add	r7, sp, #16
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	70fb      	strb	r3, [r7, #3]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70bb      	strb	r3, [r7, #2]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006faa:	7878      	ldrb	r0, [r7, #1]
 8006fac:	78ba      	ldrb	r2, [r7, #2]
 8006fae:	78f9      	ldrb	r1, [r7, #3]
 8006fb0:	8b3b      	ldrh	r3, [r7, #24]
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	7d3b      	ldrb	r3, [r7, #20]
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	7c3b      	ldrb	r3, [r7, #16]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f003 f9a7 	bl	800a312 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006fc4:	2300      	movs	r3, #0

}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f003 f9c6 	bl	800a370 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006fe4:	2300      	movs	r3, #0

}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f831 	bl	8007062 <USBH_GetFreePipe>
 8007000:	4603      	mov	r3, r0
 8007002:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	89fa      	ldrh	r2, [r7, #14]
 8007012:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32e0      	adds	r2, #224	; 0xe0
 800701a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800701e:	89fb      	ldrh	r3, [r7, #14]
 8007020:	b2db      	uxtb	r3, r3
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	2b0a      	cmp	r3, #10
 800703a:	d80b      	bhi.n	8007054 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	32e0      	adds	r2, #224	; 0xe0
 8007042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007046:	78fa      	ldrb	r2, [r7, #3]
 8007048:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	32e0      	adds	r2, #224	; 0xe0
 8007050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
 8007072:	e00e      	b.n	8007092 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32e0      	adds	r2, #224	; 0xe0
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	b29b      	uxth	r3, r3
 800708a:	e007      	b.n	800709c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	3301      	adds	r3, #1
 8007090:	73fb      	strb	r3, [r7, #15]
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	2b0a      	cmp	r3, #10
 8007096:	d9ed      	bls.n	8007074 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007098:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ba:	2b84      	cmp	r3, #132	; 0x84
 80070bc:	d005      	beq.n	80070ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	3303      	adds	r3, #3
 80070c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070de:	f3ef 8305 	mrs	r3, IPSR
 80070e2:	607b      	str	r3, [r7, #4]
  return(result);
 80070e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bf14      	ite	ne
 80070ea:	2301      	movne	r3, #1
 80070ec:	2300      	moveq	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007100:	f001 f8dc 	bl	80082bc <vTaskStartScheduler>
  
  return osOK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	bd80      	pop	{r7, pc}

0800710a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800710a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710c:	b089      	sub	sp, #36	; 0x24
 800710e:	af04      	add	r7, sp, #16
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d020      	beq.n	800715e <osThreadCreate+0x54>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01c      	beq.n	800715e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685c      	ldr	r4, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681d      	ldr	r5, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691e      	ldr	r6, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ffb6 	bl	80070a8 <makeFreeRtosPriority>
 800713c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007146:	9202      	str	r2, [sp, #8]
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	9100      	str	r1, [sp, #0]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	4632      	mov	r2, r6
 8007150:	4629      	mov	r1, r5
 8007152:	4620      	mov	r0, r4
 8007154:	f000 fef7 	bl	8007f46 <xTaskCreateStatic>
 8007158:	4603      	mov	r3, r0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e01c      	b.n	8007198 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685c      	ldr	r4, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800716a:	b29e      	uxth	r6, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff ff98 	bl	80070a8 <makeFreeRtosPriority>
 8007178:	4602      	mov	r2, r0
 800717a:	f107 030c 	add.w	r3, r7, #12
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	9200      	str	r2, [sp, #0]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	4632      	mov	r2, r6
 8007186:	4629      	mov	r1, r5
 8007188:	4620      	mov	r0, r4
 800718a:	f000 ff35 	bl	8007ff8 <xTaskCreate>
 800718e:	4603      	mov	r3, r0
 8007190:	2b01      	cmp	r3, #1
 8007192:	d001      	beq.n	8007198 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007194:	2300      	movs	r3, #0
 8007196:	e000      	b.n	800719a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007198:	68fb      	ldr	r3, [r7, #12]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <osDelay+0x16>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	e000      	b.n	80071ba <osDelay+0x18>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 f84a 	bl	8008254 <vTaskDelay>
  
  return osOK;
 80071c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80071ca:	b590      	push	{r4, r7, lr}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af02      	add	r7, sp, #8
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d012      	beq.n	8007202 <osMessageCreate+0x38>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00e      	beq.n	8007202 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6859      	ldr	r1, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68dc      	ldr	r4, [r3, #12]
 80071f4:	2300      	movs	r3, #0
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4623      	mov	r3, r4
 80071fa:	f000 f9df 	bl	80075bc <xQueueGenericCreateStatic>
 80071fe:	4603      	mov	r3, r0
 8007200:	e008      	b.n	8007214 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	4619      	mov	r1, r3
 800720e:	f000 fa47 	bl	80076a0 <xQueueGenericCreate>
 8007212:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bd90      	pop	{r4, r7, pc}

0800721c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007228:	2300      	movs	r3, #0
 800722a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <osMessagePut+0x1e>
    ticks = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800723a:	f7ff ff4d 	bl	80070d8 <inHandlerMode>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d018      	beq.n	8007276 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007244:	f107 0210 	add.w	r2, r7, #16
 8007248:	f107 0108 	add.w	r1, r7, #8
 800724c:	2300      	movs	r3, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fb7c 	bl	800794c <xQueueGenericSendFromISR>
 8007254:	4603      	mov	r3, r0
 8007256:	2b01      	cmp	r3, #1
 8007258:	d001      	beq.n	800725e <osMessagePut+0x42>
      return osErrorOS;
 800725a:	23ff      	movs	r3, #255	; 0xff
 800725c:	e018      	b.n	8007290 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d014      	beq.n	800728e <osMessagePut+0x72>
 8007264:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <osMessagePut+0x7c>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	e00b      	b.n	800728e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007276:	f107 0108 	add.w	r1, r7, #8
 800727a:	2300      	movs	r3, #0
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fa6a 	bl	8007758 <xQueueGenericSend>
 8007284:	4603      	mov	r3, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	d001      	beq.n	800728e <osMessagePut+0x72>
      return osErrorOS;
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	e000      	b.n	8007290 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800729c:	b590      	push	{r4, r7, lr}
 800729e:	b08b      	sub	sp, #44	; 0x2c
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80072b6:	2380      	movs	r3, #128	; 0x80
 80072b8:	617b      	str	r3, [r7, #20]
    return event;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	461c      	mov	r4, r3
 80072be:	f107 0314 	add.w	r3, r7, #20
 80072c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072ca:	e054      	b.n	8007376 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d103      	bne.n	80072e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
 80072e2:	e009      	b.n	80072f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <osMessageGet+0x5c>
      ticks = 1;
 80072f4:	2301      	movs	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80072f8:	f7ff feee 	bl	80070d8 <inHandlerMode>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01c      	beq.n	800733c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007302:	f107 0220 	add.w	r2, r7, #32
 8007306:	f107 0314 	add.w	r3, r7, #20
 800730a:	3304      	adds	r3, #4
 800730c:	4619      	mov	r1, r3
 800730e:	68b8      	ldr	r0, [r7, #8]
 8007310:	f000 fc8c 	bl	8007c2c <xQueueReceiveFromISR>
 8007314:	4603      	mov	r3, r0
 8007316:	2b01      	cmp	r3, #1
 8007318:	d102      	bne.n	8007320 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800731a:	2310      	movs	r3, #16
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e001      	b.n	8007324 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01d      	beq.n	8007366 <osMessageGet+0xca>
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <osMessageGet+0xe4>)
 800732c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	e014      	b.n	8007366 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	3304      	adds	r3, #4
 8007342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007344:	4619      	mov	r1, r3
 8007346:	68b8      	ldr	r0, [r7, #8]
 8007348:	f000 fb94 	bl	8007a74 <xQueueReceive>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d102      	bne.n	8007358 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007352:	2310      	movs	r3, #16
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	e006      	b.n	8007366 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <osMessageGet+0xc6>
 800735e:	2300      	movs	r3, #0
 8007360:	e000      	b.n	8007364 <osMessageGet+0xc8>
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	461c      	mov	r4, r3
 800736a:	f107 0314 	add.w	r3, r7, #20
 800736e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	372c      	adds	r7, #44	; 0x2c
 800737a:	46bd      	mov	sp, r7
 800737c:	bd90      	pop	{r4, r7, pc}
 800737e:	bf00      	nop
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f103 0208 	add.w	r2, r3, #8
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f103 0208 	add.w	r2, r3, #8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f103 0208 	add.w	r2, r3, #8
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d103      	bne.n	8007446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e00c      	b.n	8007460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3308      	adds	r3, #8
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e002      	b.n	8007454 <vListInsert+0x2e>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	d2f6      	bcs.n	800744e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	601a      	str	r2, [r3, #0]
}
 800748c:	bf00      	nop
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6892      	ldr	r2, [r2, #8]
 80074ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6852      	ldr	r2, [r2, #4]
 80074b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d103      	bne.n	80074cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	1e5a      	subs	r2, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	e7fe      	b.n	8007512 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007514:	f001 fd02 	bl	8008f1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007524:	fb01 f303 	mul.w	r3, r1, r3
 8007528:	441a      	add	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007544:	3b01      	subs	r3, #1
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	441a      	add	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	22ff      	movs	r2, #255	; 0xff
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	22ff      	movs	r2, #255	; 0xff
 8007560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d114      	bne.n	8007594 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01a      	beq.n	80075a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3310      	adds	r3, #16
 8007576:	4618      	mov	r0, r3
 8007578:	f001 f8e2 	bl	8008740 <xTaskRemoveFromEventList>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d012      	beq.n	80075a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <xQueueGenericReset+0xcc>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	e009      	b.n	80075a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3310      	adds	r3, #16
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fef3 	bl	8007384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3324      	adds	r3, #36	; 0x24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff feee 	bl	8007384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075a8:	f001 fce6 	bl	8008f78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075ac:	2301      	movs	r3, #1
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08e      	sub	sp, #56	; 0x38
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <xQueueGenericCreateStatic+0x28>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e2:	e7fe      	b.n	80075e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <xQueueGenericCreateStatic+0x42>
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
 80075fc:	e7fe      	b.n	80075fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <xQueueGenericCreateStatic+0x4e>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <xQueueGenericCreateStatic+0x52>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <xQueueGenericCreateStatic+0x54>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <xQueueGenericCreateStatic+0x6c>
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	623b      	str	r3, [r7, #32]
 8007626:	e7fe      	b.n	8007626 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <xQueueGenericCreateStatic+0x78>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <xQueueGenericCreateStatic+0x7c>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <xQueueGenericCreateStatic+0x7e>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <xQueueGenericCreateStatic+0x96>
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e7fe      	b.n	8007650 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007652:	2348      	movs	r3, #72	; 0x48
 8007654:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b48      	cmp	r3, #72	; 0x48
 800765a:	d009      	beq.n	8007670 <xQueueGenericCreateStatic+0xb4>
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	e7fe      	b.n	800766e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	4613      	mov	r3, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f842 	bl	800771a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007698:	4618      	mov	r0, r3
 800769a:	3730      	adds	r7, #48	; 0x30
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <xQueueGenericCreate+0x28>
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e7fe      	b.n	80076c6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	e004      	b.n	80076de <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	fb02 f303 	mul.w	r3, r2, r3
 80076dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	3348      	adds	r3, #72	; 0x48
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fd34 	bl	8009150 <pvPortMalloc>
 80076e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00f      	beq.n	8007710 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	3348      	adds	r3, #72	; 0x48
 80076f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076fe:	79fa      	ldrb	r2, [r7, #7]
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f805 	bl	800771a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007710:	69bb      	ldr	r3, [r7, #24]
	}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	e002      	b.n	800773c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007748:	2101      	movs	r1, #1
 800774a:	69b8      	ldr	r0, [r7, #24]
 800774c:	f7ff fece 	bl	80074ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	; 0x38
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007766:	2300      	movs	r3, #0
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <xQueueGenericSend+0x30>
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
 8007786:	e7fe      	b.n	8007786 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <xQueueGenericSend+0x3e>
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <xQueueGenericSend+0x42>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <xQueueGenericSend+0x44>
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <xQueueGenericSend+0x5c>
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
 80077b2:	e7fe      	b.n	80077b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSend+0x6a>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericSend+0x6e>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericSend+0x70>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <xQueueGenericSend+0x88>
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	e7fe      	b.n	80077de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077e0:	f001 f96a 	bl	8008ab8 <xTaskGetSchedulerState>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <xQueueGenericSend+0x98>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <xQueueGenericSend+0x9c>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <xQueueGenericSend+0x9e>
 80077f4:	2300      	movs	r3, #0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <xQueueGenericSend+0xb6>
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	e7fe      	b.n	800780c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800780e:	f001 fb85 	bl	8008f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <xQueueGenericSend+0xcc>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d129      	bne.n	8007878 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782a:	f000 fa7c 	bl	8007d26 <prvCopyDataToQueue>
 800782e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d010      	beq.n	800785a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	3324      	adds	r3, #36	; 0x24
 800783c:	4618      	mov	r0, r3
 800783e:	f000 ff7f 	bl	8008740 <xTaskRemoveFromEventList>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d013      	beq.n	8007870 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007848:	4b3f      	ldr	r3, [pc, #252]	; (8007948 <xQueueGenericSend+0x1f0>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	e00a      	b.n	8007870 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007860:	4b39      	ldr	r3, [pc, #228]	; (8007948 <xQueueGenericSend+0x1f0>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007870:	f001 fb82 	bl	8008f78 <vPortExitCritical>
				return pdPASS;
 8007874:	2301      	movs	r3, #1
 8007876:	e063      	b.n	8007940 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800787e:	f001 fb7b 	bl	8008f78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007882:	2300      	movs	r3, #0
 8007884:	e05c      	b.n	8007940 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	4618      	mov	r0, r3
 8007892:	f000 ffb7 	bl	8008804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800789a:	f001 fb6d 	bl	8008f78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800789e:	f000 fd6b 	bl	8008378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a2:	f001 fb3b 	bl	8008f1c <vPortEnterCritical>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d103      	bne.n	80078bc <xQueueGenericSend+0x164>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d103      	bne.n	80078d2 <xQueueGenericSend+0x17a>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d2:	f001 fb51 	bl	8008f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078d6:	1d3a      	adds	r2, r7, #4
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 ffa6 	bl	8008830 <xTaskCheckForTimeOut>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d124      	bne.n	8007934 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ec:	f000 fb13 	bl	8007f16 <prvIsQueueFull>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d018      	beq.n	8007928 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	3310      	adds	r3, #16
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fefa 	bl	80086f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007906:	f000 fa9e 	bl	8007e46 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800790a:	f000 fd43 	bl	8008394 <xTaskResumeAll>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	f47f af7c 	bne.w	800780e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <xQueueGenericSend+0x1f0>)
 8007918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	e772      	b.n	800780e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800792a:	f000 fa8c 	bl	8007e46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800792e:	f000 fd31 	bl	8008394 <xTaskResumeAll>
 8007932:	e76c      	b.n	800780e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007936:	f000 fa86 	bl	8007e46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800793a:	f000 fd2b 	bl	8008394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800793e:	2300      	movs	r3, #0
		}
	}
}
 8007940:	4618      	mov	r0, r3
 8007942:	3738      	adds	r7, #56	; 0x38
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08e      	sub	sp, #56	; 0x38
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <xQueueGenericSendFromISR+0x2c>
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
 8007976:	e7fe      	b.n	8007976 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <xQueueGenericSendFromISR+0x3a>
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <xQueueGenericSendFromISR+0x3e>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <xQueueGenericSendFromISR+0x40>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <xQueueGenericSendFromISR+0x58>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	623b      	str	r3, [r7, #32]
 80079a2:	e7fe      	b.n	80079a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d103      	bne.n	80079b2 <xQueueGenericSendFromISR+0x66>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <xQueueGenericSendFromISR+0x6a>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <xQueueGenericSendFromISR+0x6c>
 80079b6:	2300      	movs	r3, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <xQueueGenericSendFromISR+0x84>
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e7fe      	b.n	80079ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079d0:	f001 fb80 	bl	80090d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079d4:	f3ef 8211 	mrs	r2, BASEPRI
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	61ba      	str	r2, [r7, #24]
 80079ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <xQueueGenericSendFromISR+0xb6>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d12c      	bne.n	8007a5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a12:	f000 f988 	bl	8007d26 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d112      	bne.n	8007a46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d016      	beq.n	8007a56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fe87 	bl	8008740 <xTaskRemoveFromEventList>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00e      	beq.n	8007a56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e007      	b.n	8007a56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	b25a      	sxtb	r2, r3
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a56:	2301      	movs	r3, #1
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007a5a:	e001      	b.n	8007a60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3738      	adds	r7, #56	; 0x38
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	; 0x30
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <xQueueReceive+0x2e>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	623b      	str	r3, [r7, #32]
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d103      	bne.n	8007ab0 <xQueueReceive+0x3c>
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <xQueueReceive+0x40>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <xQueueReceive+0x42>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <xQueueReceive+0x5a>
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	e7fe      	b.n	8007acc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ace:	f000 fff3 	bl	8008ab8 <xTaskGetSchedulerState>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <xQueueReceive+0x6a>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <xQueueReceive+0x6e>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueReceive+0x70>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <xQueueReceive+0x88>
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	e7fe      	b.n	8007afa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007afc:	f001 fa0e 	bl	8008f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01f      	beq.n	8007b4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b10:	f000 f973 	bl	8007dfa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	1e5a      	subs	r2, r3, #1
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00f      	beq.n	8007b44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	3310      	adds	r3, #16
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fe09 	bl	8008740 <xTaskRemoveFromEventList>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b34:	4b3c      	ldr	r3, [pc, #240]	; (8007c28 <xQueueReceive+0x1b4>)
 8007b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b44:	f001 fa18 	bl	8008f78 <vPortExitCritical>
				return pdPASS;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e069      	b.n	8007c20 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b52:	f001 fa11 	bl	8008f78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e062      	b.n	8007c20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b60:	f107 0310 	add.w	r3, r7, #16
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fe4d 	bl	8008804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b6e:	f001 fa03 	bl	8008f78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b72:	f000 fc01 	bl	8008378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b76:	f001 f9d1 	bl	8008f1c <vPortEnterCritical>
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b80:	b25b      	sxtb	r3, r3
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d103      	bne.n	8007b90 <xQueueReceive+0x11c>
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d103      	bne.n	8007ba6 <xQueueReceive+0x132>
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba6:	f001 f9e7 	bl	8008f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007baa:	1d3a      	adds	r2, r7, #4
 8007bac:	f107 0310 	add.w	r3, r7, #16
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fe3c 	bl	8008830 <xTaskCheckForTimeOut>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d123      	bne.n	8007c06 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc0:	f000 f993 	bl	8007eea <prvIsQueueEmpty>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d017      	beq.n	8007bfa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	3324      	adds	r3, #36	; 0x24
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fd90 	bl	80086f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bda:	f000 f934 	bl	8007e46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bde:	f000 fbd9 	bl	8008394 <xTaskResumeAll>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d189      	bne.n	8007afc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <xQueueReceive+0x1b4>)
 8007bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	e780      	b.n	8007afc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bfc:	f000 f923 	bl	8007e46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c00:	f000 fbc8 	bl	8008394 <xTaskResumeAll>
 8007c04:	e77a      	b.n	8007afc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c08:	f000 f91d 	bl	8007e46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c0c:	f000 fbc2 	bl	8008394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c12:	f000 f96a 	bl	8007eea <prvIsQueueEmpty>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f43f af6f 	beq.w	8007afc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	; 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08e      	sub	sp, #56	; 0x38
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <xQueueReceiveFromISR+0x2a>
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	623b      	str	r3, [r7, #32]
 8007c54:	e7fe      	b.n	8007c54 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <xQueueReceiveFromISR+0x38>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <xQueueReceiveFromISR+0x3c>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e000      	b.n	8007c6a <xQueueReceiveFromISR+0x3e>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <xQueueReceiveFromISR+0x56>
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e7fe      	b.n	8007c80 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c82:	f001 fa27 	bl	80090d4 <vPortValidateInterruptPriority>
	__asm volatile
 8007c86:	f3ef 8211 	mrs	r2, BASEPRI
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	61ba      	str	r2, [r7, #24]
 8007c9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02f      	beq.n	8007d0e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cbc:	f000 f89d 	bl	8007dfa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	1e5a      	subs	r2, r3, #1
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd0:	d112      	bne.n	8007cf8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d016      	beq.n	8007d08 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	3310      	adds	r3, #16
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fd2e 	bl	8008740 <xTaskRemoveFromEventList>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00e      	beq.n	8007d08 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e007      	b.n	8007d08 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	b25a      	sxtb	r2, r3
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0c:	e001      	b.n	8007d12 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3738      	adds	r7, #56	; 0x38
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10d      	bne.n	8007d60 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d14d      	bne.n	8007de8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fecf 	bl	8008af4 <xTaskPriorityDisinherit>
 8007d56:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	e043      	b.n	8007de8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d119      	bne.n	8007d9a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6898      	ldr	r0, [r3, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	f002 fc61 	bl	800a638 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d32b      	bcc.n	8007de8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	e026      	b.n	8007de8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68d8      	ldr	r0, [r3, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	461a      	mov	r2, r3
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	f002 fc47 	bl	800a638 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	425b      	negs	r3, r3
 8007db4:	441a      	add	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d207      	bcs.n	8007dd6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	425b      	negs	r3, r3
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d105      	bne.n	8007de8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007df0:	697b      	ldr	r3, [r7, #20]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d018      	beq.n	8007e3e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	441a      	add	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d303      	bcc.n	8007e2e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68d9      	ldr	r1, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	461a      	mov	r2, r3
 8007e38:	6838      	ldr	r0, [r7, #0]
 8007e3a:	f002 fbfd 	bl	800a638 <memcpy>
	}
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e4e:	f001 f865 	bl	8008f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e58:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e5a:	e011      	b.n	8007e80 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d012      	beq.n	8007e8a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3324      	adds	r3, #36	; 0x24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fc69 	bl	8008740 <xTaskRemoveFromEventList>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e74:	f000 fd3c 	bl	80088f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dce9      	bgt.n	8007e5c <prvUnlockQueue+0x16>
 8007e88:	e000      	b.n	8007e8c <prvUnlockQueue+0x46>
					break;
 8007e8a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	22ff      	movs	r2, #255	; 0xff
 8007e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e94:	f001 f870 	bl	8008f78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e98:	f001 f840 	bl	8008f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ea2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ea4:	e011      	b.n	8007eca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d012      	beq.n	8007ed4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3310      	adds	r3, #16
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fc44 	bl	8008740 <xTaskRemoveFromEventList>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ebe:	f000 fd17 	bl	80088f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dce9      	bgt.n	8007ea6 <prvUnlockQueue+0x60>
 8007ed2:	e000      	b.n	8007ed6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ed4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	22ff      	movs	r2, #255	; 0xff
 8007eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ede:	f001 f84b 	bl	8008f78 <vPortExitCritical>
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ef2:	f001 f813 	bl	8008f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007efe:	2301      	movs	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	e001      	b.n	8007f08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f08:	f001 f836 	bl	8008f78 <vPortExitCritical>

	return xReturn;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f1e:	f000 fffd 	bl	8008f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d102      	bne.n	8007f34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	e001      	b.n	8007f38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f38:	f001 f81e 	bl	8008f78 <vPortExitCritical>

	return xReturn;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b08e      	sub	sp, #56	; 0x38
 8007f4a:	af04      	add	r7, sp, #16
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <xTaskCreateStatic+0x28>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	623b      	str	r3, [r7, #32]
 8007f6c:	e7fe      	b.n	8007f6c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <xTaskCreateStatic+0x42>
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e7fe      	b.n	8007f86 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f88:	2354      	movs	r3, #84	; 0x54
 8007f8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b54      	cmp	r3, #84	; 0x54
 8007f90:	d009      	beq.n	8007fa6 <xTaskCreateStatic+0x60>
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e7fe      	b.n	8007fa4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01e      	beq.n	8007fea <xTaskCreateStatic+0xa4>
 8007fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01b      	beq.n	8007fea <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	9302      	str	r3, [sp, #8]
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f850 	bl	8008082 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fe4:	f000 f8cc 	bl	8008180 <prvAddNewTaskToReadyList>
 8007fe8:	e001      	b.n	8007fee <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fee:	697b      	ldr	r3, [r7, #20]
	}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3728      	adds	r7, #40	; 0x28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08c      	sub	sp, #48	; 0x30
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	4613      	mov	r3, r2
 8008006:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4618      	mov	r0, r3
 800800e:	f001 f89f 	bl	8009150 <pvPortMalloc>
 8008012:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800801a:	2054      	movs	r0, #84	; 0x54
 800801c:	f001 f898 	bl	8009150 <pvPortMalloc>
 8008020:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	631a      	str	r2, [r3, #48]	; 0x30
 800802e:	e005      	b.n	800803c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f001 f94f 	bl	80092d4 <vPortFree>
 8008036:	e001      	b.n	800803c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d017      	beq.n	8008072 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	2300      	movs	r3, #0
 800804e:	9303      	str	r3, [sp, #12]
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f80e 	bl	8008082 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008066:	69f8      	ldr	r0, [r7, #28]
 8008068:	f000 f88a 	bl	8008180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800806c:	2301      	movs	r3, #1
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	e002      	b.n	8008078 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008078:	69bb      	ldr	r3, [r7, #24]
	}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b088      	sub	sp, #32
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800809a:	3b01      	subs	r3, #1
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d009      	beq.n	80080c8 <prvInitialiseNewTask+0x46>
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e7fe      	b.n	80080c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
 80080cc:	e012      	b.n	80080f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	7819      	ldrb	r1, [r3, #0]
 80080d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	3334      	adds	r3, #52	; 0x34
 80080de:	460a      	mov	r2, r1
 80080e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d006      	beq.n	80080fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d9e9      	bls.n	80080ce <prvInitialiseNewTask+0x4c>
 80080fa:	e000      	b.n	80080fe <prvInitialiseNewTask+0x7c>
		{
			break;
 80080fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	2b06      	cmp	r3, #6
 800810a:	d901      	bls.n	8008110 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800810c:	2306      	movs	r3, #6
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008114:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800811a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	2200      	movs	r2, #0
 8008120:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff f94c 	bl	80073c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	3318      	adds	r3, #24
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff f947 	bl	80073c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f1c3 0207 	rsb	r2, r3, #7
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	2200      	movs	r2, #0
 8008150:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	68f9      	ldr	r1, [r7, #12]
 800815e:	69b8      	ldr	r0, [r7, #24]
 8008160:	f000 fdb2 	bl	8008cc8 <pxPortInitialiseStack>
 8008164:	4602      	mov	r2, r0
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008176:	bf00      	nop
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008188:	f000 fec8 	bl	8008f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800818c:	4b2a      	ldr	r3, [pc, #168]	; (8008238 <prvAddNewTaskToReadyList+0xb8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a29      	ldr	r2, [pc, #164]	; (8008238 <prvAddNewTaskToReadyList+0xb8>)
 8008194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800819e:	4a27      	ldr	r2, [pc, #156]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <prvAddNewTaskToReadyList+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d110      	bne.n	80081ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081ac:	f000 fbc4 	bl	8008938 <prvInitialiseTaskLists>
 80081b0:	e00d      	b.n	80081ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081b2:	4b23      	ldr	r3, [pc, #140]	; (8008240 <prvAddNewTaskToReadyList+0xc0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081ba:	4b20      	ldr	r3, [pc, #128]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d802      	bhi.n	80081ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081c8:	4a1c      	ldr	r2, [pc, #112]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ce:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3301      	adds	r3, #1
 80081d4:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 80081d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	2201      	movs	r2, #1
 80081de:	409a      	lsls	r2, r3
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <prvAddNewTaskToReadyList+0xcc>)
 80081f8:	441a      	add	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f7ff f8ec 	bl	80073de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008206:	f000 feb7 	bl	8008f78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800820a:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <prvAddNewTaskToReadyList+0xc0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00e      	beq.n	8008230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	429a      	cmp	r2, r3
 800821e:	d207      	bcs.n	8008230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008220:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <prvAddNewTaskToReadyList+0xd0>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	200001b4 	.word	0x200001b4
 800823c:	200000b4 	.word	0x200000b4
 8008240:	200001c0 	.word	0x200001c0
 8008244:	200001d0 	.word	0x200001d0
 8008248:	200001bc 	.word	0x200001bc
 800824c:	200000b8 	.word	0x200000b8
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d016      	beq.n	8008294 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008266:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <vTaskDelay+0x60>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <vTaskDelay+0x2e>
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	e7fe      	b.n	8008280 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008282:	f000 f879 	bl	8008378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fcb7 	bl	8008bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800828e:	f000 f881 	bl	8008394 <xTaskResumeAll>
 8008292:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d107      	bne.n	80082aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <vTaskDelay+0x64>)
 800829c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082aa:	bf00      	nop
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	200001dc 	.word	0x200001dc
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ca:	463a      	mov	r2, r7
 80082cc:	1d39      	adds	r1, r7, #4
 80082ce:	f107 0308 	add.w	r3, r7, #8
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 f912 	bl	80094fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	9202      	str	r2, [sp, #8]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	2300      	movs	r3, #0
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	2300      	movs	r3, #0
 80082e8:	460a      	mov	r2, r1
 80082ea:	491d      	ldr	r1, [pc, #116]	; (8008360 <vTaskStartScheduler+0xa4>)
 80082ec:	481d      	ldr	r0, [pc, #116]	; (8008364 <vTaskStartScheduler+0xa8>)
 80082ee:	f7ff fe2a 	bl	8007f46 <xTaskCreateStatic>
 80082f2:	4602      	mov	r2, r0
 80082f4:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <vTaskStartScheduler+0xac>)
 80082f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082f8:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <vTaskStartScheduler+0xac>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e001      	b.n	800830a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d115      	bne.n	800833c <vTaskStartScheduler+0x80>
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <vTaskStartScheduler+0xb0>)
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800832a:	4b11      	ldr	r3, [pc, #68]	; (8008370 <vTaskStartScheduler+0xb4>)
 800832c:	2201      	movs	r2, #1
 800832e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008330:	4b10      	ldr	r3, [pc, #64]	; (8008374 <vTaskStartScheduler+0xb8>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008336:	f000 fd53 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800833a:	e00d      	b.n	8008358 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d109      	bne.n	8008358 <vTaskStartScheduler+0x9c>
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	e7fe      	b.n	8008356 <vTaskStartScheduler+0x9a>
}
 8008358:	bf00      	nop
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	0800a828 	.word	0x0800a828
 8008364:	08008909 	.word	0x08008909
 8008368:	200001d8 	.word	0x200001d8
 800836c:	200001d4 	.word	0x200001d4
 8008370:	200001c0 	.word	0x200001c0
 8008374:	200001b8 	.word	0x200001b8

08008378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800837c:	4b04      	ldr	r3, [pc, #16]	; (8008390 <vTaskSuspendAll+0x18>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3301      	adds	r3, #1
 8008382:	4a03      	ldr	r2, [pc, #12]	; (8008390 <vTaskSuspendAll+0x18>)
 8008384:	6013      	str	r3, [r2, #0]
}
 8008386:	bf00      	nop
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	200001dc 	.word	0x200001dc

08008394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800839e:	2300      	movs	r3, #0
 80083a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083a2:	4b41      	ldr	r3, [pc, #260]	; (80084a8 <xTaskResumeAll+0x114>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <xTaskResumeAll+0x2a>
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	e7fe      	b.n	80083bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083be:	f000 fdad 	bl	8008f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083c2:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <xTaskResumeAll+0x114>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4a37      	ldr	r2, [pc, #220]	; (80084a8 <xTaskResumeAll+0x114>)
 80083ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083cc:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <xTaskResumeAll+0x114>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d161      	bne.n	8008498 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083d4:	4b35      	ldr	r3, [pc, #212]	; (80084ac <xTaskResumeAll+0x118>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d05d      	beq.n	8008498 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083dc:	e02e      	b.n	800843c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80083de:	4b34      	ldr	r3, [pc, #208]	; (80084b0 <xTaskResumeAll+0x11c>)
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3318      	adds	r3, #24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff f854 	bl	8007498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff f84f 	bl	8007498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	2201      	movs	r2, #1
 8008400:	409a      	lsls	r2, r3
 8008402:	4b2c      	ldr	r3, [pc, #176]	; (80084b4 <xTaskResumeAll+0x120>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4313      	orrs	r3, r2
 8008408:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <xTaskResumeAll+0x120>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <xTaskResumeAll+0x124>)
 800841a:	441a      	add	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe ffdb 	bl	80073de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842c:	4b23      	ldr	r3, [pc, #140]	; (80084bc <xTaskResumeAll+0x128>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <xTaskResumeAll+0x12c>)
 8008438:	2201      	movs	r2, #1
 800843a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <xTaskResumeAll+0x11c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1cc      	bne.n	80083de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800844a:	f000 fb0f 	bl	8008a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800844e:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <xTaskResumeAll+0x130>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800845a:	f000 f837 	bl	80084cc <xTaskIncrementTick>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008464:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <xTaskResumeAll+0x12c>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3b01      	subs	r3, #1
 800846e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f1      	bne.n	800845a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <xTaskResumeAll+0x130>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <xTaskResumeAll+0x12c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xTaskResumeAll+0x134>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008498:	f000 fd6e 	bl	8008f78 <vPortExitCritical>

	return xAlreadyYielded;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200001dc 	.word	0x200001dc
 80084ac:	200001b4 	.word	0x200001b4
 80084b0:	20000174 	.word	0x20000174
 80084b4:	200001bc 	.word	0x200001bc
 80084b8:	200000b8 	.word	0x200000b8
 80084bc:	200000b4 	.word	0x200000b4
 80084c0:	200001c8 	.word	0x200001c8
 80084c4:	200001c4 	.word	0x200001c4
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d6:	4b50      	ldr	r3, [pc, #320]	; (8008618 <xTaskIncrementTick+0x14c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 808c 	bne.w	80085f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084e0:	4b4e      	ldr	r3, [pc, #312]	; (800861c <xTaskIncrementTick+0x150>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084e8:	4a4c      	ldr	r2, [pc, #304]	; (800861c <xTaskIncrementTick+0x150>)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d11f      	bne.n	8008534 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80084f4:	4b4a      	ldr	r3, [pc, #296]	; (8008620 <xTaskIncrementTick+0x154>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <xTaskIncrementTick+0x46>
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	e7fe      	b.n	8008510 <xTaskIncrementTick+0x44>
 8008512:	4b43      	ldr	r3, [pc, #268]	; (8008620 <xTaskIncrementTick+0x154>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	4b42      	ldr	r3, [pc, #264]	; (8008624 <xTaskIncrementTick+0x158>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a40      	ldr	r2, [pc, #256]	; (8008620 <xTaskIncrementTick+0x154>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	4a40      	ldr	r2, [pc, #256]	; (8008624 <xTaskIncrementTick+0x158>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	4b40      	ldr	r3, [pc, #256]	; (8008628 <xTaskIncrementTick+0x15c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	4a3e      	ldr	r2, [pc, #248]	; (8008628 <xTaskIncrementTick+0x15c>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	f000 fa9c 	bl	8008a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008534:	4b3d      	ldr	r3, [pc, #244]	; (800862c <xTaskIncrementTick+0x160>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	429a      	cmp	r2, r3
 800853c:	d34d      	bcc.n	80085da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800853e:	4b38      	ldr	r3, [pc, #224]	; (8008620 <xTaskIncrementTick+0x154>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <xTaskIncrementTick+0x80>
 8008548:	2301      	movs	r3, #1
 800854a:	e000      	b.n	800854e <xTaskIncrementTick+0x82>
 800854c:	2300      	movs	r3, #0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008552:	4b36      	ldr	r3, [pc, #216]	; (800862c <xTaskIncrementTick+0x160>)
 8008554:	f04f 32ff 	mov.w	r2, #4294967295
 8008558:	601a      	str	r2, [r3, #0]
					break;
 800855a:	e03e      	b.n	80085da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800855c:	4b30      	ldr	r3, [pc, #192]	; (8008620 <xTaskIncrementTick+0x154>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d203      	bcs.n	800857c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008574:	4a2d      	ldr	r2, [pc, #180]	; (800862c <xTaskIncrementTick+0x160>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6013      	str	r3, [r2, #0]
						break;
 800857a:	e02e      	b.n	80085da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe ff89 	bl	8007498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	3318      	adds	r3, #24
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe ff80 	bl	8007498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	2201      	movs	r2, #1
 800859e:	409a      	lsls	r2, r3
 80085a0:	4b23      	ldr	r3, [pc, #140]	; (8008630 <xTaskIncrementTick+0x164>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	4a22      	ldr	r2, [pc, #136]	; (8008630 <xTaskIncrementTick+0x164>)
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4a1f      	ldr	r2, [pc, #124]	; (8008634 <xTaskIncrementTick+0x168>)
 80085b8:	441a      	add	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fe ff0c 	bl	80073de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ca:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <xTaskIncrementTick+0x16c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d3b4      	bcc.n	800853e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085d8:	e7b1      	b.n	800853e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085da:	4b17      	ldr	r3, [pc, #92]	; (8008638 <xTaskIncrementTick+0x16c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4914      	ldr	r1, [pc, #80]	; (8008634 <xTaskIncrementTick+0x168>)
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d907      	bls.n	8008602 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80085f2:	2301      	movs	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e004      	b.n	8008602 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085f8:	4b10      	ldr	r3, [pc, #64]	; (800863c <xTaskIncrementTick+0x170>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3301      	adds	r3, #1
 80085fe:	4a0f      	ldr	r2, [pc, #60]	; (800863c <xTaskIncrementTick+0x170>)
 8008600:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <xTaskIncrementTick+0x174>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800860a:	2301      	movs	r3, #1
 800860c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800860e:	697b      	ldr	r3, [r7, #20]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200001dc 	.word	0x200001dc
 800861c:	200001b8 	.word	0x200001b8
 8008620:	2000016c 	.word	0x2000016c
 8008624:	20000170 	.word	0x20000170
 8008628:	200001cc 	.word	0x200001cc
 800862c:	200001d4 	.word	0x200001d4
 8008630:	200001bc 	.word	0x200001bc
 8008634:	200000b8 	.word	0x200000b8
 8008638:	200000b4 	.word	0x200000b4
 800863c:	200001c4 	.word	0x200001c4
 8008640:	200001c8 	.word	0x200001c8

08008644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800864a:	4b26      	ldr	r3, [pc, #152]	; (80086e4 <vTaskSwitchContext+0xa0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008652:	4b25      	ldr	r3, [pc, #148]	; (80086e8 <vTaskSwitchContext+0xa4>)
 8008654:	2201      	movs	r2, #1
 8008656:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008658:	e03e      	b.n	80086d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800865a:	4b23      	ldr	r3, [pc, #140]	; (80086e8 <vTaskSwitchContext+0xa4>)
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008660:	4b22      	ldr	r3, [pc, #136]	; (80086ec <vTaskSwitchContext+0xa8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	fab3 f383 	clz	r3, r3
 800866c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	f1c3 031f 	rsb	r3, r3, #31
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	491e      	ldr	r1, [pc, #120]	; (80086f0 <vTaskSwitchContext+0xac>)
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d109      	bne.n	800869e <vTaskSwitchContext+0x5a>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	e7fe      	b.n	800869c <vTaskSwitchContext+0x58>
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4a11      	ldr	r2, [pc, #68]	; (80086f0 <vTaskSwitchContext+0xac>)
 80086aa:	4413      	add	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	605a      	str	r2, [r3, #4]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3308      	adds	r3, #8
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d104      	bne.n	80086ce <vTaskSwitchContext+0x8a>
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	605a      	str	r2, [r3, #4]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <vTaskSwitchContext+0xb0>)
 80086d6:	6013      	str	r3, [r2, #0]
}
 80086d8:	bf00      	nop
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	200001dc 	.word	0x200001dc
 80086e8:	200001c8 	.word	0x200001c8
 80086ec:	200001bc 	.word	0x200001bc
 80086f0:	200000b8 	.word	0x200000b8
 80086f4:	200000b4 	.word	0x200000b4

080086f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d109      	bne.n	800871c <vTaskPlaceOnEventList+0x24>
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	e7fe      	b.n	800871a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800871c:	4b07      	ldr	r3, [pc, #28]	; (800873c <vTaskPlaceOnEventList+0x44>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3318      	adds	r3, #24
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fe fe7e 	bl	8007426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800872a:	2101      	movs	r1, #1
 800872c:	6838      	ldr	r0, [r7, #0]
 800872e:	f000 fa65 	bl	8008bfc <prvAddCurrentTaskToDelayedList>
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200000b4 	.word	0x200000b4

08008740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <xTaskRemoveFromEventList+0x2a>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	e7fe      	b.n	8008768 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3318      	adds	r3, #24
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fe92 	bl	8007498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008774:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <xTaskRemoveFromEventList+0xac>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11c      	bne.n	80087b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	3304      	adds	r3, #4
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fe89 	bl	8007498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	2201      	movs	r2, #1
 800878c:	409a      	lsls	r2, r3
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <xTaskRemoveFromEventList+0xb0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4313      	orrs	r3, r2
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <xTaskRemoveFromEventList+0xb0>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <xTaskRemoveFromEventList+0xb4>)
 80087a6:	441a      	add	r2, r3
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe fe15 	bl	80073de <vListInsertEnd>
 80087b4:	e005      	b.n	80087c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	3318      	adds	r3, #24
 80087ba:	4619      	mov	r1, r3
 80087bc:	480e      	ldr	r0, [pc, #56]	; (80087f8 <xTaskRemoveFromEventList+0xb8>)
 80087be:	f7fe fe0e 	bl	80073de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <xTaskRemoveFromEventList+0xbc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d905      	bls.n	80087dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087d0:	2301      	movs	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <xTaskRemoveFromEventList+0xc0>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e001      	b.n	80087e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80087e0:	697b      	ldr	r3, [r7, #20]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	200001dc 	.word	0x200001dc
 80087f0:	200001bc 	.word	0x200001bc
 80087f4:	200000b8 	.word	0x200000b8
 80087f8:	20000174 	.word	0x20000174
 80087fc:	200000b4 	.word	0x200000b4
 8008800:	200001c8 	.word	0x200001c8

08008804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <vTaskInternalSetTimeOutState+0x24>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <vTaskInternalSetTimeOutState+0x28>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	605a      	str	r2, [r3, #4]
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	200001cc 	.word	0x200001cc
 800882c:	200001b8 	.word	0x200001b8

08008830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d109      	bne.n	8008854 <xTaskCheckForTimeOut+0x24>
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	613b      	str	r3, [r7, #16]
 8008852:	e7fe      	b.n	8008852 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <xTaskCheckForTimeOut+0x3e>
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	e7fe      	b.n	800886c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800886e:	f000 fb55 	bl	8008f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <xTaskCheckForTimeOut+0xb8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d102      	bne.n	8008892 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800888c:	2300      	movs	r3, #0
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	e023      	b.n	80088da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4b15      	ldr	r3, [pc, #84]	; (80088ec <xTaskCheckForTimeOut+0xbc>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d007      	beq.n	80088ae <xTaskCheckForTimeOut+0x7e>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d302      	bcc.n	80088ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	e015      	b.n	80088da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d20b      	bcs.n	80088d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ff9d 	bl	8008804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61fb      	str	r3, [r7, #28]
 80088ce:	e004      	b.n	80088da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088d6:	2301      	movs	r3, #1
 80088d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088da:	f000 fb4d 	bl	8008f78 <vPortExitCritical>

	return xReturn;
 80088de:	69fb      	ldr	r3, [r7, #28]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3720      	adds	r7, #32
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	200001b8 	.word	0x200001b8
 80088ec:	200001cc 	.word	0x200001cc

080088f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088f4:	4b03      	ldr	r3, [pc, #12]	; (8008904 <vTaskMissedYield+0x14>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	601a      	str	r2, [r3, #0]
}
 80088fa:	bf00      	nop
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	200001c8 	.word	0x200001c8

08008908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008910:	f000 f852 	bl	80089b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <prvIdleTask+0x28>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d9f9      	bls.n	8008910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <prvIdleTask+0x2c>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800892c:	e7f0      	b.n	8008910 <prvIdleTask+0x8>
 800892e:	bf00      	nop
 8008930:	200000b8 	.word	0x200000b8
 8008934:	e000ed04 	.word	0xe000ed04

08008938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800893e:	2300      	movs	r3, #0
 8008940:	607b      	str	r3, [r7, #4]
 8008942:	e00c      	b.n	800895e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a12      	ldr	r2, [pc, #72]	; (8008998 <prvInitialiseTaskLists+0x60>)
 8008950:	4413      	add	r3, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe fd16 	bl	8007384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3301      	adds	r3, #1
 800895c:	607b      	str	r3, [r7, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b06      	cmp	r3, #6
 8008962:	d9ef      	bls.n	8008944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008964:	480d      	ldr	r0, [pc, #52]	; (800899c <prvInitialiseTaskLists+0x64>)
 8008966:	f7fe fd0d 	bl	8007384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800896a:	480d      	ldr	r0, [pc, #52]	; (80089a0 <prvInitialiseTaskLists+0x68>)
 800896c:	f7fe fd0a 	bl	8007384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008970:	480c      	ldr	r0, [pc, #48]	; (80089a4 <prvInitialiseTaskLists+0x6c>)
 8008972:	f7fe fd07 	bl	8007384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008976:	480c      	ldr	r0, [pc, #48]	; (80089a8 <prvInitialiseTaskLists+0x70>)
 8008978:	f7fe fd04 	bl	8007384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800897c:	480b      	ldr	r0, [pc, #44]	; (80089ac <prvInitialiseTaskLists+0x74>)
 800897e:	f7fe fd01 	bl	8007384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008982:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <prvInitialiseTaskLists+0x78>)
 8008984:	4a05      	ldr	r2, [pc, #20]	; (800899c <prvInitialiseTaskLists+0x64>)
 8008986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <prvInitialiseTaskLists+0x7c>)
 800898a:	4a05      	ldr	r2, [pc, #20]	; (80089a0 <prvInitialiseTaskLists+0x68>)
 800898c:	601a      	str	r2, [r3, #0]
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200000b8 	.word	0x200000b8
 800899c:	20000144 	.word	0x20000144
 80089a0:	20000158 	.word	0x20000158
 80089a4:	20000174 	.word	0x20000174
 80089a8:	20000188 	.word	0x20000188
 80089ac:	200001a0 	.word	0x200001a0
 80089b0:	2000016c 	.word	0x2000016c
 80089b4:	20000170 	.word	0x20000170

080089b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089be:	e019      	b.n	80089f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089c0:	f000 faac 	bl	8008f1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <prvCheckTasksWaitingTermination+0x4c>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fd61 	bl	8007498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <prvCheckTasksWaitingTermination+0x50>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3b01      	subs	r3, #1
 80089dc:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <prvCheckTasksWaitingTermination+0x50>)
 80089de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <prvCheckTasksWaitingTermination+0x54>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <prvCheckTasksWaitingTermination+0x54>)
 80089e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089ea:	f000 fac5 	bl	8008f78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f80e 	bl	8008a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <prvCheckTasksWaitingTermination+0x54>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e1      	bne.n	80089c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000188 	.word	0x20000188
 8008a08:	200001b4 	.word	0x200001b4
 8008a0c:	2000019c 	.word	0x2000019c

08008a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d108      	bne.n	8008a34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fc54 	bl	80092d4 <vPortFree>
				vPortFree( pxTCB );
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fc51 	bl	80092d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a32:	e017      	b.n	8008a64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d103      	bne.n	8008a46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fc48 	bl	80092d4 <vPortFree>
	}
 8008a44:	e00e      	b.n	8008a64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d009      	beq.n	8008a64 <prvDeleteTCB+0x54>
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	e7fe      	b.n	8008a62 <prvDeleteTCB+0x52>
	}
 8008a64:	bf00      	nop
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a72:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <prvResetNextTaskUnblockTime+0x44>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <prvResetNextTaskUnblockTime+0x14>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <prvResetNextTaskUnblockTime+0x16>
 8008a80:	2300      	movs	r3, #0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d004      	beq.n	8008a90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a86:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <prvResetNextTaskUnblockTime+0x48>)
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a8e:	e008      	b.n	8008aa2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <prvResetNextTaskUnblockTime+0x44>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	4a05      	ldr	r2, [pc, #20]	; (8008ab4 <prvResetNextTaskUnblockTime+0x48>)
 8008aa0:	6013      	str	r3, [r2, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	2000016c 	.word	0x2000016c
 8008ab4:	200001d4 	.word	0x200001d4

08008ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008abe:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <xTaskGetSchedulerState+0x34>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d102      	bne.n	8008acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	e008      	b.n	8008ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008acc:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <xTaskGetSchedulerState+0x38>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	607b      	str	r3, [r7, #4]
 8008ad8:	e001      	b.n	8008ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ada:	2300      	movs	r3, #0
 8008adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ade:	687b      	ldr	r3, [r7, #4]
	}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	200001c0 	.word	0x200001c0
 8008af0:	200001dc 	.word	0x200001dc

08008af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d06c      	beq.n	8008be4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b0a:	4b39      	ldr	r3, [pc, #228]	; (8008bf0 <xTaskPriorityDisinherit+0xfc>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d009      	beq.n	8008b28 <xTaskPriorityDisinherit+0x34>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e7fe      	b.n	8008b26 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <xTaskPriorityDisinherit+0x50>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	e7fe      	b.n	8008b42 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d044      	beq.n	8008be4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d140      	bne.n	8008be4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fc96 	bl	8007498 <uxListRemove>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d115      	bne.n	8008b9e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b76:	491f      	ldr	r1, [pc, #124]	; (8008bf4 <xTaskPriorityDisinherit+0x100>)
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10a      	bne.n	8008b9e <xTaskPriorityDisinherit+0xaa>
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	43da      	mvns	r2, r3
 8008b94:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <xTaskPriorityDisinherit+0x104>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	4a17      	ldr	r2, [pc, #92]	; (8008bf8 <xTaskPriorityDisinherit+0x104>)
 8008b9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	f1c3 0207 	rsb	r2, r3, #7
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	409a      	lsls	r2, r3
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <xTaskPriorityDisinherit+0x104>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <xTaskPriorityDisinherit+0x104>)
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <xTaskPriorityDisinherit+0x100>)
 8008bd2:	441a      	add	r2, r3
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fe fbff 	bl	80073de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008be4:	697b      	ldr	r3, [r7, #20]
	}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200000b4 	.word	0x200000b4
 8008bf4:	200000b8 	.word	0x200000b8
 8008bf8:	200001bc 	.word	0x200001bc

08008bfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c06:	4b29      	ldr	r3, [pc, #164]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c0c:	4b28      	ldr	r3, [pc, #160]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fc40 	bl	8007498 <uxListRemove>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008c1e:	4b24      	ldr	r3, [pc, #144]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	2201      	movs	r2, #1
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43da      	mvns	r2, r3
 8008c2c:	4b21      	ldr	r3, [pc, #132]	; (8008cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4013      	ands	r3, r2
 8008c32:	4a20      	ldr	r2, [pc, #128]	; (8008cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d10a      	bne.n	8008c54 <prvAddCurrentTaskToDelayedList+0x58>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d007      	beq.n	8008c54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c44:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	481a      	ldr	r0, [pc, #104]	; (8008cb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c4e:	f7fe fbc6 	bl	80073de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c52:	e026      	b.n	8008ca2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4413      	add	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c5c:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d209      	bcs.n	8008c80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c6c:	4b13      	ldr	r3, [pc, #76]	; (8008cbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7fe fbd4 	bl	8007426 <vListInsert>
}
 8008c7e:	e010      	b.n	8008ca2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f7fe fbca 	bl	8007426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c92:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d202      	bcs.n	8008ca2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c9c:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6013      	str	r3, [r2, #0]
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200001b8 	.word	0x200001b8
 8008cb0:	200000b4 	.word	0x200000b4
 8008cb4:	200001bc 	.word	0x200001bc
 8008cb8:	200001a0 	.word	0x200001a0
 8008cbc:	20000170 	.word	0x20000170
 8008cc0:	2000016c 	.word	0x2000016c
 8008cc4:	200001d4 	.word	0x200001d4

08008cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3b04      	subs	r3, #4
 8008cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3b04      	subs	r3, #4
 8008ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 0201 	bic.w	r2, r3, #1
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3b04      	subs	r3, #4
 8008cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cf8:	4a0c      	ldr	r2, [pc, #48]	; (8008d2c <pxPortInitialiseStack+0x64>)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3b14      	subs	r3, #20
 8008d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f06f 0202 	mvn.w	r2, #2
 8008d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3b20      	subs	r3, #32
 8008d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	08008d31 	.word	0x08008d31

08008d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d3a:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <prvTaskExitError+0x50>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d009      	beq.n	8008d58 <prvTaskExitError+0x28>
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	e7fe      	b.n	8008d56 <prvTaskExitError+0x26>
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d6a:	bf00      	nop
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0fc      	beq.n	8008d6c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000028 	.word	0x20000028
	...

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	; (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008de6:	4b44      	ldr	r3, [pc, #272]	; (8008ef8 <xPortStartScheduler+0x118>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a44      	ldr	r2, [pc, #272]	; (8008efc <xPortStartScheduler+0x11c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d109      	bne.n	8008e04 <xPortStartScheduler+0x24>
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	e7fe      	b.n	8008e02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e04:	4b3c      	ldr	r3, [pc, #240]	; (8008ef8 <xPortStartScheduler+0x118>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a3d      	ldr	r2, [pc, #244]	; (8008f00 <xPortStartScheduler+0x120>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d109      	bne.n	8008e22 <xPortStartScheduler+0x42>
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e7fe      	b.n	8008e20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e22:	4b38      	ldr	r3, [pc, #224]	; (8008f04 <xPortStartScheduler+0x124>)
 8008e24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	22ff      	movs	r2, #255	; 0xff
 8008e32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	4b30      	ldr	r3, [pc, #192]	; (8008f08 <xPortStartScheduler+0x128>)
 8008e48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e4a:	4b30      	ldr	r3, [pc, #192]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e4c:	2207      	movs	r2, #7
 8008e4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e50:	e009      	b.n	8008e66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	4a2c      	ldr	r2, [pc, #176]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6e:	2b80      	cmp	r3, #128	; 0x80
 8008e70:	d0ef      	beq.n	8008e52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e72:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1c3 0307 	rsb	r3, r3, #7
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d009      	beq.n	8008e92 <xPortStartScheduler+0xb2>
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60bb      	str	r3, [r7, #8]
 8008e90:	e7fe      	b.n	8008e90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	4a1c      	ldr	r2, [pc, #112]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e9c:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ea4:	4a19      	ldr	r2, [pc, #100]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008ea6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008eb0:	4b17      	ldr	r3, [pc, #92]	; (8008f10 <xPortStartScheduler+0x130>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a16      	ldr	r2, [pc, #88]	; (8008f10 <xPortStartScheduler+0x130>)
 8008eb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ebc:	4b14      	ldr	r3, [pc, #80]	; (8008f10 <xPortStartScheduler+0x130>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a13      	ldr	r2, [pc, #76]	; (8008f10 <xPortStartScheduler+0x130>)
 8008ec2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ec6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ec8:	f000 f8d6 	bl	8009078 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ecc:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <xPortStartScheduler+0x134>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ed2:	f000 f8f5 	bl	80090c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ed6:	4b10      	ldr	r3, [pc, #64]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a0f      	ldr	r2, [pc, #60]	; (8008f18 <xPortStartScheduler+0x138>)
 8008edc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ee0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ee2:	f7ff ff69 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ee6:	f7ff fbad 	bl	8008644 <vTaskSwitchContext>
	prvTaskExitError();
 8008eea:	f7ff ff21 	bl	8008d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	e000ed00 	.word	0xe000ed00
 8008efc:	410fc271 	.word	0x410fc271
 8008f00:	410fc270 	.word	0x410fc270
 8008f04:	e000e400 	.word	0xe000e400
 8008f08:	200001e0 	.word	0x200001e0
 8008f0c:	200001e4 	.word	0x200001e4
 8008f10:	e000ed20 	.word	0xe000ed20
 8008f14:	20000028 	.word	0x20000028
 8008f18:	e000ef34 	.word	0xe000ef34

08008f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <vPortEnterCritical+0x54>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	4a0d      	ldr	r2, [pc, #52]	; (8008f70 <vPortEnterCritical+0x54>)
 8008f3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <vPortEnterCritical+0x54>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d10e      	bne.n	8008f64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <vPortEnterCritical+0x58>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <vPortEnterCritical+0x48>
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	e7fe      	b.n	8008f62 <vPortEnterCritical+0x46>
	}
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20000028 	.word	0x20000028
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f7e:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <vPortExitCritical+0x4c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d109      	bne.n	8008f9a <vPortExitCritical+0x22>
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	607b      	str	r3, [r7, #4]
 8008f98:	e7fe      	b.n	8008f98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <vPortExitCritical+0x4c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	4a08      	ldr	r2, [pc, #32]	; (8008fc4 <vPortExitCritical+0x4c>)
 8008fa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fa4:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <vPortExitCritical+0x4c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <vPortExitCritical+0x3e>
 8008fac:	2300      	movs	r3, #0
 8008fae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000028 	.word	0x20000028
	...

08008fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fd0:	f3ef 8009 	mrs	r0, PSP
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	4b15      	ldr	r3, [pc, #84]	; (8009030 <pxCurrentTCBConst>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	f01e 0f10 	tst.w	lr, #16
 8008fe0:	bf08      	it	eq
 8008fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	6010      	str	r0, [r2, #0]
 8008fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ff4:	f380 8811 	msr	BASEPRI, r0
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f7ff fb20 	bl	8008644 <vTaskSwitchContext>
 8009004:	f04f 0000 	mov.w	r0, #0
 8009008:	f380 8811 	msr	BASEPRI, r0
 800900c:	bc09      	pop	{r0, r3}
 800900e:	6819      	ldr	r1, [r3, #0]
 8009010:	6808      	ldr	r0, [r1, #0]
 8009012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009016:	f01e 0f10 	tst.w	lr, #16
 800901a:	bf08      	it	eq
 800901c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009020:	f380 8809 	msr	PSP, r0
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	f3af 8000 	nop.w

08009030 <pxCurrentTCBConst>:
 8009030:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop

08009038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009050:	f7ff fa3c 	bl	80084cc <xTaskIncrementTick>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <xPortSysTickHandler+0x3c>)
 800905c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	2300      	movs	r3, #0
 8009064:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <vPortSetupTimerInterrupt+0x34>)
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009082:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <vPortSetupTimerInterrupt+0x38>)
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009088:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <vPortSetupTimerInterrupt+0x3c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a0a      	ldr	r2, [pc, #40]	; (80090b8 <vPortSetupTimerInterrupt+0x40>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	099b      	lsrs	r3, r3, #6
 8009094:	4a09      	ldr	r2, [pc, #36]	; (80090bc <vPortSetupTimerInterrupt+0x44>)
 8009096:	3b01      	subs	r3, #1
 8009098:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800909a:	4b04      	ldr	r3, [pc, #16]	; (80090ac <vPortSetupTimerInterrupt+0x34>)
 800909c:	2207      	movs	r2, #7
 800909e:	601a      	str	r2, [r3, #0]
}
 80090a0:	bf00      	nop
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	e000e010 	.word	0xe000e010
 80090b0:	e000e018 	.word	0xe000e018
 80090b4:	2000002c 	.word	0x2000002c
 80090b8:	10624dd3 	.word	0x10624dd3
 80090bc:	e000e014 	.word	0xe000e014

080090c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090d0 <vPortEnableVFP+0x10>
 80090c4:	6801      	ldr	r1, [r0, #0]
 80090c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090ca:	6001      	str	r1, [r0, #0]
 80090cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090ce:	bf00      	nop
 80090d0:	e000ed88 	.word	0xe000ed88

080090d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090da:	f3ef 8305 	mrs	r3, IPSR
 80090de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d913      	bls.n	800910e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090e6:	4a16      	ldr	r2, [pc, #88]	; (8009140 <vPortValidateInterruptPriority+0x6c>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090f0:	4b14      	ldr	r3, [pc, #80]	; (8009144 <vPortValidateInterruptPriority+0x70>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	7afa      	ldrb	r2, [r7, #11]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d209      	bcs.n	800910e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	607b      	str	r3, [r7, #4]
 800910c:	e7fe      	b.n	800910c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <vPortValidateInterruptPriority+0x74>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009116:	4b0d      	ldr	r3, [pc, #52]	; (800914c <vPortValidateInterruptPriority+0x78>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d909      	bls.n	8009132 <vPortValidateInterruptPriority+0x5e>
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	e7fe      	b.n	8009130 <vPortValidateInterruptPriority+0x5c>
	}
 8009132:	bf00      	nop
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	e000e3f0 	.word	0xe000e3f0
 8009144:	200001e0 	.word	0x200001e0
 8009148:	e000ed0c 	.word	0xe000ed0c
 800914c:	200001e4 	.word	0x200001e4

08009150 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08a      	sub	sp, #40	; 0x28
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800915c:	f7ff f90c 	bl	8008378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009160:	4b57      	ldr	r3, [pc, #348]	; (80092c0 <pvPortMalloc+0x170>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009168:	f000 f90c 	bl	8009384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800916c:	4b55      	ldr	r3, [pc, #340]	; (80092c4 <pvPortMalloc+0x174>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4013      	ands	r3, r2
 8009174:	2b00      	cmp	r3, #0
 8009176:	f040 808c 	bne.w	8009292 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01c      	beq.n	80091ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009180:	2208      	movs	r2, #8
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4413      	add	r3, r2
 8009186:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	2b00      	cmp	r3, #0
 8009190:	d013      	beq.n	80091ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f023 0307 	bic.w	r3, r3, #7
 8009198:	3308      	adds	r3, #8
 800919a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d009      	beq.n	80091ba <pvPortMalloc+0x6a>
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e7fe      	b.n	80091b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d068      	beq.n	8009292 <pvPortMalloc+0x142>
 80091c0:	4b41      	ldr	r3, [pc, #260]	; (80092c8 <pvPortMalloc+0x178>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d863      	bhi.n	8009292 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ca:	4b40      	ldr	r3, [pc, #256]	; (80092cc <pvPortMalloc+0x17c>)
 80091cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091ce:	4b3f      	ldr	r3, [pc, #252]	; (80092cc <pvPortMalloc+0x17c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d4:	e004      	b.n	80091e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d903      	bls.n	80091f2 <pvPortMalloc+0xa2>
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f1      	bne.n	80091d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091f2:	4b33      	ldr	r3, [pc, #204]	; (80092c0 <pvPortMalloc+0x170>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d04a      	beq.n	8009292 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2208      	movs	r2, #8
 8009202:	4413      	add	r3, r2
 8009204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	1ad2      	subs	r2, r2, r3
 8009216:	2308      	movs	r3, #8
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	429a      	cmp	r2, r3
 800921c:	d91e      	bls.n	800925c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800921e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4413      	add	r3, r2
 8009224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	2b00      	cmp	r3, #0
 800922e:	d009      	beq.n	8009244 <pvPortMalloc+0xf4>
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	e7fe      	b.n	8009242 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009256:	69b8      	ldr	r0, [r7, #24]
 8009258:	f000 f8f6 	bl	8009448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800925c:	4b1a      	ldr	r3, [pc, #104]	; (80092c8 <pvPortMalloc+0x178>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <pvPortMalloc+0x178>)
 8009268:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800926a:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <pvPortMalloc+0x178>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <pvPortMalloc+0x180>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d203      	bcs.n	800927e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <pvPortMalloc+0x178>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <pvPortMalloc+0x180>)
 800927c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	4b10      	ldr	r3, [pc, #64]	; (80092c4 <pvPortMalloc+0x174>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	431a      	orrs	r2, r3
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009292:	f7ff f87f 	bl	8008394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	f003 0307 	and.w	r3, r3, #7
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <pvPortMalloc+0x164>
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	e7fe      	b.n	80092b2 <pvPortMalloc+0x162>
	return pvReturn;
 80092b4:	69fb      	ldr	r3, [r7, #28]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3728      	adds	r7, #40	; 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20003df0 	.word	0x20003df0
 80092c4:	20003dfc 	.word	0x20003dfc
 80092c8:	20003df4 	.word	0x20003df4
 80092cc:	20003de8 	.word	0x20003de8
 80092d0:	20003df8 	.word	0x20003df8

080092d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d046      	beq.n	8009374 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092e6:	2308      	movs	r3, #8
 80092e8:	425b      	negs	r3, r3
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	4b20      	ldr	r3, [pc, #128]	; (800937c <vPortFree+0xa8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <vPortFree+0x42>
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e7fe      	b.n	8009314 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <vPortFree+0x5e>
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	e7fe      	b.n	8009330 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <vPortFree+0xa8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d019      	beq.n	8009374 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d115      	bne.n	8009374 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	4b0b      	ldr	r3, [pc, #44]	; (800937c <vPortFree+0xa8>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009358:	f7ff f80e 	bl	8008378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <vPortFree+0xac>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4413      	add	r3, r2
 8009366:	4a06      	ldr	r2, [pc, #24]	; (8009380 <vPortFree+0xac>)
 8009368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800936a:	6938      	ldr	r0, [r7, #16]
 800936c:	f000 f86c 	bl	8009448 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009370:	f7ff f810 	bl	8008394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009374:	bf00      	nop
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20003dfc 	.word	0x20003dfc
 8009380:	20003df4 	.word	0x20003df4

08009384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800938a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800938e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009390:	4b27      	ldr	r3, [pc, #156]	; (8009430 <prvHeapInit+0xac>)
 8009392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00c      	beq.n	80093b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3307      	adds	r3, #7
 80093a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <prvHeapInit+0xac>)
 80093b4:	4413      	add	r3, r2
 80093b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093bc:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <prvHeapInit+0xb0>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093c2:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <prvHeapInit+0xb0>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093d0:	2208      	movs	r2, #8
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0307 	bic.w	r3, r3, #7
 80093de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a15      	ldr	r2, [pc, #84]	; (8009438 <prvHeapInit+0xb4>)
 80093e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <prvHeapInit+0xb4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <prvHeapInit+0xb4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <prvHeapInit+0xb4>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4a0a      	ldr	r2, [pc, #40]	; (800943c <prvHeapInit+0xb8>)
 8009412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a09      	ldr	r2, [pc, #36]	; (8009440 <prvHeapInit+0xbc>)
 800941a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800941c:	4b09      	ldr	r3, [pc, #36]	; (8009444 <prvHeapInit+0xc0>)
 800941e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	200001e8 	.word	0x200001e8
 8009434:	20003de8 	.word	0x20003de8
 8009438:	20003df0 	.word	0x20003df0
 800943c:	20003df8 	.word	0x20003df8
 8009440:	20003df4 	.word	0x20003df4
 8009444:	20003dfc 	.word	0x20003dfc

08009448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009450:	4b28      	ldr	r3, [pc, #160]	; (80094f4 <prvInsertBlockIntoFreeList+0xac>)
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e002      	b.n	800945c <prvInsertBlockIntoFreeList+0x14>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d8f7      	bhi.n	8009456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d108      	bne.n	800948a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	441a      	add	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d118      	bne.n	80094d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <prvInsertBlockIntoFreeList+0xb0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d00d      	beq.n	80094c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	441a      	add	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	e008      	b.n	80094d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <prvInsertBlockIntoFreeList+0xb0>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e003      	b.n	80094d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d002      	beq.n	80094e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20003de8 	.word	0x20003de8
 80094f8:	20003df0 	.word	0x20003df0

080094fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4a07      	ldr	r2, [pc, #28]	; (8009528 <vApplicationGetIdleTaskMemory+0x2c>)
 800950c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	4a06      	ldr	r2, [pc, #24]	; (800952c <vApplicationGetIdleTaskMemory+0x30>)
 8009512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2280      	movs	r2, #128	; 0x80
 8009518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	20003e00 	.word	0x20003e00
 800952c:	20003e54 	.word	0x20003e54

08009530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b08e      	sub	sp, #56	; 0x38
 8009534:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009536:	f7f6 ffcb 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800953a:	f000 f837 	bl	80095ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800953e:	f000 f975 	bl	800982c <MX_GPIO_Init>
  MX_I2C1_Init();
 8009542:	f000 f8b5 	bl	80096b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8009546:	f000 f8e1 	bl	800970c <MX_I2S3_Init>
  MX_SPI1_Init();
 800954a:	f000 f90f 	bl	800976c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800954e:	f000 f943 	bl	80097d8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask1, StartDefaultTask1, osPriorityNormal, 0, 128);
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <main+0x70>)
 8009554:	f107 041c 	add.w	r4, r7, #28
 8009558:	461d      	mov	r5, r3
 800955a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800955c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800955e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask1), NULL);
 8009566:	f107 031c 	add.w	r3, r7, #28
 800956a:	2100      	movs	r1, #0
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd fdcc 	bl	800710a <osThreadCreate>
 8009572:	4602      	mov	r2, r0
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <main+0x74>)
 8009576:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 8009578:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <main+0x78>)
 800957a:	463c      	mov	r4, r7
 800957c:	461d      	mov	r5, r3
 800957e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 800958a:	463b      	mov	r3, r7
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f7fd fdbb 	bl	800710a <osThreadCreate>
 8009594:	4602      	mov	r2, r0
 8009596:	4b03      	ldr	r3, [pc, #12]	; (80095a4 <main+0x74>)
 8009598:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800959a:	f7fd fdaf 	bl	80070fc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800959e:	e7fe      	b.n	800959e <main+0x6e>
 80095a0:	0800a840 	.word	0x0800a840
 80095a4:	20004068 	.word	0x20004068
 80095a8:	0800a86c 	.word	0x0800a86c

080095ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b098      	sub	sp, #96	; 0x60
 80095b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80095b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095b6:	2230      	movs	r2, #48	; 0x30
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 f847 	bl	800a64e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095c0:	f107 031c 	add.w	r3, r7, #28
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	609a      	str	r2, [r3, #8]
 80095cc:	60da      	str	r2, [r3, #12]
 80095ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	605a      	str	r2, [r3, #4]
 80095da:	609a      	str	r2, [r3, #8]
 80095dc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80095de:	2300      	movs	r3, #0
 80095e0:	60bb      	str	r3, [r7, #8]
 80095e2:	4b31      	ldr	r3, [pc, #196]	; (80096a8 <SystemClock_Config+0xfc>)
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	4a30      	ldr	r2, [pc, #192]	; (80096a8 <SystemClock_Config+0xfc>)
 80095e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ec:	6413      	str	r3, [r2, #64]	; 0x40
 80095ee:	4b2e      	ldr	r3, [pc, #184]	; (80096a8 <SystemClock_Config+0xfc>)
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095f6:	60bb      	str	r3, [r7, #8]
 80095f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80095fa:	2300      	movs	r3, #0
 80095fc:	607b      	str	r3, [r7, #4]
 80095fe:	4b2b      	ldr	r3, [pc, #172]	; (80096ac <SystemClock_Config+0x100>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a2a      	ldr	r2, [pc, #168]	; (80096ac <SystemClock_Config+0x100>)
 8009604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	4b28      	ldr	r3, [pc, #160]	; (80096ac <SystemClock_Config+0x100>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009616:	2301      	movs	r3, #1
 8009618:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800961a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009620:	2302      	movs	r3, #2
 8009622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009624:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009628:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800962a:	2308      	movs	r3, #8
 800962c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800962e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8009632:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009634:	2302      	movs	r3, #2
 8009636:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009638:	2307      	movs	r3, #7
 800963a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800963c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009640:	4618      	mov	r0, r3
 8009642:	f7f9 fd01 	bl	8003048 <HAL_RCC_OscConfig>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800964c:	f000 fa86 	bl	8009b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009650:	230f      	movs	r3, #15
 8009652:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009654:	2302      	movs	r3, #2
 8009656:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009658:	2300      	movs	r3, #0
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800965c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009666:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009668:	f107 031c 	add.w	r3, r7, #28
 800966c:	2105      	movs	r1, #5
 800966e:	4618      	mov	r0, r3
 8009670:	f7f9 ff2c 	bl	80034cc <HAL_RCC_ClockConfig>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800967a:	f000 fa6f 	bl	8009b5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800967e:	2301      	movs	r3, #1
 8009680:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8009682:	23c0      	movs	r3, #192	; 0xc0
 8009684:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009686:	2302      	movs	r3, #2
 8009688:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800968a:	f107 030c 	add.w	r3, r7, #12
 800968e:	4618      	mov	r0, r3
 8009690:	f7fa f90a 	bl	80038a8 <HAL_RCCEx_PeriphCLKConfig>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800969a:	f000 fa5f 	bl	8009b5c <Error_Handler>
  }
}
 800969e:	bf00      	nop
 80096a0:	3760      	adds	r7, #96	; 0x60
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	40023800 	.word	0x40023800
 80096ac:	40007000 	.word	0x40007000

080096b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80096b4:	4b12      	ldr	r3, [pc, #72]	; (8009700 <MX_I2C1_Init+0x50>)
 80096b6:	4a13      	ldr	r2, [pc, #76]	; (8009704 <MX_I2C1_Init+0x54>)
 80096b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80096ba:	4b11      	ldr	r3, [pc, #68]	; (8009700 <MX_I2C1_Init+0x50>)
 80096bc:	4a12      	ldr	r2, [pc, #72]	; (8009708 <MX_I2C1_Init+0x58>)
 80096be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80096c0:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <MX_I2C1_Init+0x50>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80096c6:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <MX_I2C1_Init+0x50>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80096cc:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <MX_I2C1_Init+0x50>)
 80096ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80096d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <MX_I2C1_Init+0x50>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <MX_I2C1_Init+0x50>)
 80096dc:	2200      	movs	r2, #0
 80096de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <MX_I2C1_Init+0x50>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80096e6:	4b06      	ldr	r3, [pc, #24]	; (8009700 <MX_I2C1_Init+0x50>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80096ec:	4804      	ldr	r0, [pc, #16]	; (8009700 <MX_I2C1_Init+0x50>)
 80096ee:	f7f8 fee3 	bl	80024b8 <HAL_I2C_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80096f8:	f000 fa30 	bl	8009b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80096fc:	bf00      	nop
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	2000406c 	.word	0x2000406c
 8009704:	40005400 	.word	0x40005400
 8009708:	000186a0 	.word	0x000186a0

0800970c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8009710:	4b13      	ldr	r3, [pc, #76]	; (8009760 <MX_I2S3_Init+0x54>)
 8009712:	4a14      	ldr	r2, [pc, #80]	; (8009764 <MX_I2S3_Init+0x58>)
 8009714:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <MX_I2S3_Init+0x54>)
 8009718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800971c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800971e:	4b10      	ldr	r3, [pc, #64]	; (8009760 <MX_I2S3_Init+0x54>)
 8009720:	2200      	movs	r2, #0
 8009722:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <MX_I2S3_Init+0x54>)
 8009726:	2200      	movs	r2, #0
 8009728:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800972a:	4b0d      	ldr	r3, [pc, #52]	; (8009760 <MX_I2S3_Init+0x54>)
 800972c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009730:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8009732:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <MX_I2S3_Init+0x54>)
 8009734:	4a0c      	ldr	r2, [pc, #48]	; (8009768 <MX_I2S3_Init+0x5c>)
 8009736:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8009738:	4b09      	ldr	r3, [pc, #36]	; (8009760 <MX_I2S3_Init+0x54>)
 800973a:	2200      	movs	r2, #0
 800973c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800973e:	4b08      	ldr	r3, [pc, #32]	; (8009760 <MX_I2S3_Init+0x54>)
 8009740:	2200      	movs	r2, #0
 8009742:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <MX_I2S3_Init+0x54>)
 8009746:	2200      	movs	r2, #0
 8009748:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800974a:	4805      	ldr	r0, [pc, #20]	; (8009760 <MX_I2S3_Init+0x54>)
 800974c:	f7f8 ffdc 	bl	8002708 <HAL_I2S_Init>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8009756:	f000 fa01 	bl	8009b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800975a:	bf00      	nop
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20004158 	.word	0x20004158
 8009764:	40003c00 	.word	0x40003c00
 8009768:	00017700 	.word	0x00017700

0800976c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009770:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <MX_SPI1_Init+0x64>)
 8009772:	4a18      	ldr	r2, [pc, #96]	; (80097d4 <MX_SPI1_Init+0x68>)
 8009774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009776:	4b16      	ldr	r3, [pc, #88]	; (80097d0 <MX_SPI1_Init+0x64>)
 8009778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800977c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800977e:	4b14      	ldr	r3, [pc, #80]	; (80097d0 <MX_SPI1_Init+0x64>)
 8009780:	2200      	movs	r2, #0
 8009782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009784:	4b12      	ldr	r3, [pc, #72]	; (80097d0 <MX_SPI1_Init+0x64>)
 8009786:	2200      	movs	r2, #0
 8009788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800978a:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <MX_SPI1_Init+0x64>)
 800978c:	2200      	movs	r2, #0
 800978e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <MX_SPI1_Init+0x64>)
 8009792:	2200      	movs	r2, #0
 8009794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009796:	4b0e      	ldr	r3, [pc, #56]	; (80097d0 <MX_SPI1_Init+0x64>)
 8009798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800979c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800979e:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <MX_SPI1_Init+0x64>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80097a4:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <MX_SPI1_Init+0x64>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <MX_SPI1_Init+0x64>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <MX_SPI1_Init+0x64>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <MX_SPI1_Init+0x64>)
 80097b8:	220a      	movs	r2, #10
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80097bc:	4804      	ldr	r0, [pc, #16]	; (80097d0 <MX_SPI1_Init+0x64>)
 80097be:	f7fa f9b1 	bl	8003b24 <HAL_SPI_Init>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80097c8:	f000 f9c8 	bl	8009b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80097cc:	bf00      	nop
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	200040c0 	.word	0x200040c0
 80097d4:	40013000 	.word	0x40013000

080097d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80097dc:	4b11      	ldr	r3, [pc, #68]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 80097de:	4a12      	ldr	r2, [pc, #72]	; (8009828 <MX_USART2_UART_Init+0x50>)
 80097e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 80097e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80097e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80097ea:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80097f6:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 80097fe:	220c      	movs	r2, #12
 8009800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009802:	4b08      	ldr	r3, [pc, #32]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 8009804:	2200      	movs	r2, #0
 8009806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 800980a:	2200      	movs	r2, #0
 800980c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800980e:	4805      	ldr	r0, [pc, #20]	; (8009824 <MX_USART2_UART_Init+0x4c>)
 8009810:	f7fa f9ec 	bl	8003bec <HAL_UART_Init>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800981a:	f000 f99f 	bl	8009b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800981e:	bf00      	nop
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20004118 	.word	0x20004118
 8009828:	40004400 	.word	0x40004400

0800982c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08c      	sub	sp, #48	; 0x30
 8009830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009832:	f107 031c 	add.w	r3, r7, #28
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	605a      	str	r2, [r3, #4]
 800983c:	609a      	str	r2, [r3, #8]
 800983e:	60da      	str	r2, [r3, #12]
 8009840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009842:	2300      	movs	r3, #0
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	4b71      	ldr	r3, [pc, #452]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	4a70      	ldr	r2, [pc, #448]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 800984c:	f043 0310 	orr.w	r3, r3, #16
 8009850:	6313      	str	r3, [r2, #48]	; 0x30
 8009852:	4b6e      	ldr	r3, [pc, #440]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	4b6a      	ldr	r3, [pc, #424]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009866:	4a69      	ldr	r2, [pc, #420]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009868:	f043 0304 	orr.w	r3, r3, #4
 800986c:	6313      	str	r3, [r2, #48]	; 0x30
 800986e:	4b67      	ldr	r3, [pc, #412]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800987a:	2300      	movs	r3, #0
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	4b63      	ldr	r3, [pc, #396]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	4a62      	ldr	r2, [pc, #392]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 8009884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009888:	6313      	str	r3, [r2, #48]	; 0x30
 800988a:	4b60      	ldr	r3, [pc, #384]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	4b5c      	ldr	r3, [pc, #368]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	4a5b      	ldr	r2, [pc, #364]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098a0:	f043 0301 	orr.w	r3, r3, #1
 80098a4:	6313      	str	r3, [r2, #48]	; 0x30
 80098a6:	4b59      	ldr	r3, [pc, #356]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80098b2:	2300      	movs	r3, #0
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	4b55      	ldr	r3, [pc, #340]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ba:	4a54      	ldr	r2, [pc, #336]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098bc:	f043 0302 	orr.w	r3, r3, #2
 80098c0:	6313      	str	r3, [r2, #48]	; 0x30
 80098c2:	4b52      	ldr	r3, [pc, #328]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	60bb      	str	r3, [r7, #8]
 80098cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	4b4e      	ldr	r3, [pc, #312]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	4a4d      	ldr	r2, [pc, #308]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098d8:	f043 0308 	orr.w	r3, r3, #8
 80098dc:	6313      	str	r3, [r2, #48]	; 0x30
 80098de:	4b4b      	ldr	r3, [pc, #300]	; (8009a0c <MX_GPIO_Init+0x1e0>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	607b      	str	r3, [r7, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80098ea:	2200      	movs	r2, #0
 80098ec:	2108      	movs	r1, #8
 80098ee:	4848      	ldr	r0, [pc, #288]	; (8009a10 <MX_GPIO_Init+0x1e4>)
 80098f0:	f7f7 f946 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80098f4:	2201      	movs	r2, #1
 80098f6:	2101      	movs	r1, #1
 80098f8:	4846      	ldr	r0, [pc, #280]	; (8009a14 <MX_GPIO_Init+0x1e8>)
 80098fa:	f7f7 f941 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80098fe:	2200      	movs	r2, #0
 8009900:	f24f 0110 	movw	r1, #61456	; 0xf010
 8009904:	4844      	ldr	r0, [pc, #272]	; (8009a18 <MX_GPIO_Init+0x1ec>)
 8009906:	f7f7 f93b 	bl	8000b80 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800990a:	2308      	movs	r3, #8
 800990c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800990e:	2301      	movs	r3, #1
 8009910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009912:	2300      	movs	r3, #0
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009916:	2300      	movs	r3, #0
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800991a:	f107 031c 	add.w	r3, r7, #28
 800991e:	4619      	mov	r1, r3
 8009920:	483b      	ldr	r0, [pc, #236]	; (8009a10 <MX_GPIO_Init+0x1e4>)
 8009922:	f7f6 ff7b 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8009926:	2301      	movs	r3, #1
 8009928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800992a:	2301      	movs	r3, #1
 800992c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992e:	2300      	movs	r3, #0
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009932:	2300      	movs	r3, #0
 8009934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009936:	f107 031c 	add.w	r3, r7, #28
 800993a:	4619      	mov	r1, r3
 800993c:	4835      	ldr	r0, [pc, #212]	; (8009a14 <MX_GPIO_Init+0x1e8>)
 800993e:	f7f6 ff6d 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8009942:	2308      	movs	r3, #8
 8009944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009946:	2302      	movs	r3, #2
 8009948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800994a:	2300      	movs	r3, #0
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800994e:	2300      	movs	r3, #0
 8009950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009952:	2305      	movs	r3, #5
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8009956:	f107 031c 	add.w	r3, r7, #28
 800995a:	4619      	mov	r1, r3
 800995c:	482d      	ldr	r0, [pc, #180]	; (8009a14 <MX_GPIO_Init+0x1e8>)
 800995e:	f7f6 ff5d 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009962:	2301      	movs	r3, #1
 8009964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009966:	4b2d      	ldr	r3, [pc, #180]	; (8009a1c <MX_GPIO_Init+0x1f0>)
 8009968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996a:	2300      	movs	r3, #0
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800996e:	f107 031c 	add.w	r3, r7, #28
 8009972:	4619      	mov	r1, r3
 8009974:	482a      	ldr	r0, [pc, #168]	; (8009a20 <MX_GPIO_Init+0x1f4>)
 8009976:	f7f6 ff51 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800997a:	2304      	movs	r3, #4
 800997c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800997e:	2300      	movs	r3, #0
 8009980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009982:	2300      	movs	r3, #0
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8009986:	f107 031c 	add.w	r3, r7, #28
 800998a:	4619      	mov	r1, r3
 800998c:	4825      	ldr	r0, [pc, #148]	; (8009a24 <MX_GPIO_Init+0x1f8>)
 800998e:	f7f6 ff45 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8009992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009998:	2302      	movs	r3, #2
 800999a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800999c:	2300      	movs	r3, #0
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099a0:	2300      	movs	r3, #0
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80099a4:	2305      	movs	r3, #5
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80099a8:	f107 031c 	add.w	r3, r7, #28
 80099ac:	4619      	mov	r1, r3
 80099ae:	481d      	ldr	r0, [pc, #116]	; (8009a24 <MX_GPIO_Init+0x1f8>)
 80099b0:	f7f6 ff34 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80099b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80099b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099ba:	2301      	movs	r3, #1
 80099bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099c2:	2300      	movs	r3, #0
 80099c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099c6:	f107 031c 	add.w	r3, r7, #28
 80099ca:	4619      	mov	r1, r3
 80099cc:	4812      	ldr	r0, [pc, #72]	; (8009a18 <MX_GPIO_Init+0x1ec>)
 80099ce:	f7f6 ff25 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80099d2:	2320      	movs	r3, #32
 80099d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099d6:	2300      	movs	r3, #0
 80099d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80099de:	f107 031c 	add.w	r3, r7, #28
 80099e2:	4619      	mov	r1, r3
 80099e4:	480c      	ldr	r0, [pc, #48]	; (8009a18 <MX_GPIO_Init+0x1ec>)
 80099e6:	f7f6 ff19 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80099ea:	2302      	movs	r3, #2
 80099ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <MX_GPIO_Init+0x1f0>)
 80099f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80099f6:	f107 031c 	add.w	r3, r7, #28
 80099fa:	4619      	mov	r1, r3
 80099fc:	4804      	ldr	r0, [pc, #16]	; (8009a10 <MX_GPIO_Init+0x1e4>)
 80099fe:	f7f6 ff0d 	bl	800081c <HAL_GPIO_Init>

}
 8009a02:	bf00      	nop
 8009a04:	3730      	adds	r7, #48	; 0x30
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	40023800 	.word	0x40023800
 8009a10:	40021000 	.word	0x40021000
 8009a14:	40020800 	.word	0x40020800
 8009a18:	40020c00 	.word	0x40020c00
 8009a1c:	10120000 	.word	0x10120000
 8009a20:	40020000 	.word	0x40020000
 8009a24:	40020400 	.word	0x40020400

08009a28 <StartDefaultTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask1(void const * argument)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
    

                 
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8009a30:	f000 fa9c 	bl	8009f6c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8009a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a38:	4805      	ldr	r0, [pc, #20]	; (8009a50 <StartDefaultTask1+0x28>)
 8009a3a:	f7f7 f8ba 	bl	8000bb2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8009a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009a42:	4803      	ldr	r0, [pc, #12]	; (8009a50 <StartDefaultTask1+0x28>)
 8009a44:	f7f7 f8b5 	bl	8000bb2 <HAL_GPIO_TogglePin>
		  osDelay(50);
 8009a48:	2032      	movs	r0, #50	; 0x32
 8009a4a:	f7fd fbaa 	bl	80071a2 <osDelay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8009a4e:	e7f1      	b.n	8009a34 <StartDefaultTask1+0xc>
 8009a50:	40020c00 	.word	0x40020c00

08009a54 <StartDefaultTask2>:
  }
  /* USER CODE END 5 */
}

void StartDefaultTask2(void const * argument)
{
 8009a54:	b5b0      	push	{r4, r5, r7, lr}
 8009a56:	b090      	sub	sp, #64	; 0x40
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]

   char b1[20] = "Rattapong\r\n";
 8009a5c:	4a3a      	ldr	r2, [pc, #232]	; (8009b48 <StartDefaultTask2+0xf4>)
 8009a5e:	f107 0320 	add.w	r3, r7, #32
 8009a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	605a      	str	r2, [r3, #4]
   char b2[20] = "Whangthamromgwit\r\n";
 8009a72:	4b36      	ldr	r3, [pc, #216]	; (8009b4c <StartDefaultTask2+0xf8>)
 8009a74:	f107 040c 	add.w	r4, r7, #12
 8009a78:	461d      	mov	r5, r3
 8009a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a7e:	682b      	ldr	r3, [r5, #0]
 8009a80:	461a      	mov	r2, r3
 8009a82:	8022      	strh	r2, [r4, #0]
 8009a84:	3402      	adds	r4, #2
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	7023      	strb	r3, [r4, #0]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	77fb      	strb	r3, [r7, #31]
   int st = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   int isPress = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	63bb      	str	r3, [r7, #56]	; 0x38
   int counter = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	637b      	str	r3, [r7, #52]	; 0x34

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8009a9a:	f000 fa67 	bl	8009f6c <MX_USB_HOST_Init>
  /* Infinite loop */
  for(;;)
  {


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	482b      	ldr	r0, [pc, #172]	; (8009b50 <StartDefaultTask2+0xfc>)
 8009aa2:	f7f7 f855 	bl	8000b50 <HAL_GPIO_ReadPin>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d010      	beq.n	8009ace <StartDefaultTask2+0x7a>
		  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		  if (isPress == 0) {
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10f      	bne.n	8009ad2 <StartDefaultTask2+0x7e>
			  isPress = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	63bb      	str	r3, [r7, #56]	; 0x38
			  if (st == 0) {
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <StartDefaultTask2+0x6e>
				  st = 1;
 8009abc:	2301      	movs	r3, #1
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac0:	e007      	b.n	8009ad2 <StartDefaultTask2+0x7e>
			  } else if (st == 1) {
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d104      	bne.n	8009ad2 <StartDefaultTask2+0x7e>
				  st = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009acc:	e001      	b.n	8009ad2 <StartDefaultTask2+0x7e>
			  }
		  }
	  } else {
		  isPress = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	63bb      	str	r3, [r7, #56]	; 0x38
	  }

	  if (st == 0) {
 8009ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d116      	bne.n	8009b06 <StartDefaultTask2+0xb2>
		  if (counter % 1000 == 0) {
 8009ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ada:	4b1e      	ldr	r3, [pc, #120]	; (8009b54 <StartDefaultTask2+0x100>)
 8009adc:	fb83 1302 	smull	r1, r3, r3, r2
 8009ae0:	1199      	asrs	r1, r3, #6
 8009ae2:	17d3      	asrs	r3, r2, #31
 8009ae4:	1acb      	subs	r3, r1, r3
 8009ae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d121      	bne.n	8009b38 <StartDefaultTask2+0xe4>
			  HAL_UART_Transmit(&huart2, b1, sizeof(b1), HAL_MAX_DELAY);
 8009af4:	f107 0120 	add.w	r1, r7, #32
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295
 8009afc:	2214      	movs	r2, #20
 8009afe:	4816      	ldr	r0, [pc, #88]	; (8009b58 <StartDefaultTask2+0x104>)
 8009b00:	f7fa f8c1 	bl	8003c86 <HAL_UART_Transmit>
 8009b04:	e018      	b.n	8009b38 <StartDefaultTask2+0xe4>
		  }
	  } else if (st == 1) {
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d115      	bne.n	8009b38 <StartDefaultTask2+0xe4>
		  if (counter % 500 == 0) {
 8009b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b0e:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <StartDefaultTask2+0x100>)
 8009b10:	fb83 1302 	smull	r1, r3, r3, r2
 8009b14:	1159      	asrs	r1, r3, #5
 8009b16:	17d3      	asrs	r3, r2, #31
 8009b18:	1acb      	subs	r3, r1, r3
 8009b1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d107      	bne.n	8009b38 <StartDefaultTask2+0xe4>
			  HAL_UART_Transmit(&huart2, b2, sizeof(b2), HAL_MAX_DELAY);
 8009b28:	f107 010c 	add.w	r1, r7, #12
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b30:	2214      	movs	r2, #20
 8009b32:	4809      	ldr	r0, [pc, #36]	; (8009b58 <StartDefaultTask2+0x104>)
 8009b34:	f7fa f8a7 	bl	8003c86 <HAL_UART_Transmit>
		  }
	  }

	  counter += 50;
 8009b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3a:	3332      	adds	r3, #50	; 0x32
 8009b3c:	637b      	str	r3, [r7, #52]	; 0x34
	  osDelay(50);
 8009b3e:	2032      	movs	r0, #50	; 0x32
 8009b40:	f7fd fb2f 	bl	80071a2 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8009b44:	e7ab      	b.n	8009a9e <StartDefaultTask2+0x4a>
 8009b46:	bf00      	nop
 8009b48:	0800a888 	.word	0x0800a888
 8009b4c:	0800a89c 	.word	0x0800a89c
 8009b50:	40020000 	.word	0x40020000
 8009b54:	10624dd3 	.word	0x10624dd3
 8009b58:	20004118 	.word	0x20004118

08009b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009b60:	bf00      	nop
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b72:	2300      	movs	r3, #0
 8009b74:	607b      	str	r3, [r7, #4]
 8009b76:	4b12      	ldr	r3, [pc, #72]	; (8009bc0 <HAL_MspInit+0x54>)
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	4a11      	ldr	r2, [pc, #68]	; (8009bc0 <HAL_MspInit+0x54>)
 8009b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b80:	6453      	str	r3, [r2, #68]	; 0x44
 8009b82:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <HAL_MspInit+0x54>)
 8009b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b8e:	2300      	movs	r3, #0
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <HAL_MspInit+0x54>)
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	4a0a      	ldr	r2, [pc, #40]	; (8009bc0 <HAL_MspInit+0x54>)
 8009b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b9e:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <HAL_MspInit+0x54>)
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009baa:	2200      	movs	r2, #0
 8009bac:	210f      	movs	r1, #15
 8009bae:	f06f 0001 	mvn.w	r0, #1
 8009bb2:	f7f6 fdfc 	bl	80007ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	40023800 	.word	0x40023800

08009bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08a      	sub	sp, #40	; 0x28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	609a      	str	r2, [r3, #8]
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a19      	ldr	r2, [pc, #100]	; (8009c48 <HAL_I2C_MspInit+0x84>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d12c      	bne.n	8009c40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009be6:	2300      	movs	r3, #0
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <HAL_I2C_MspInit+0x88>)
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <HAL_I2C_MspInit+0x88>)
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bf6:	4b15      	ldr	r3, [pc, #84]	; (8009c4c <HAL_I2C_MspInit+0x88>)
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	613b      	str	r3, [r7, #16]
 8009c00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8009c02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009c08:	2312      	movs	r3, #18
 8009c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c10:	2300      	movs	r3, #0
 8009c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009c14:	2304      	movs	r3, #4
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c18:	f107 0314 	add.w	r3, r7, #20
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	480c      	ldr	r0, [pc, #48]	; (8009c50 <HAL_I2C_MspInit+0x8c>)
 8009c20:	f7f6 fdfc 	bl	800081c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <HAL_I2C_MspInit+0x88>)
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2c:	4a07      	ldr	r2, [pc, #28]	; (8009c4c <HAL_I2C_MspInit+0x88>)
 8009c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c32:	6413      	str	r3, [r2, #64]	; 0x40
 8009c34:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <HAL_I2C_MspInit+0x88>)
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009c40:	bf00      	nop
 8009c42:	3728      	adds	r7, #40	; 0x28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	40005400 	.word	0x40005400
 8009c4c:	40023800 	.word	0x40023800
 8009c50:	40020400 	.word	0x40020400

08009c54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08a      	sub	sp, #40	; 0x28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c5c:	f107 0314 	add.w	r3, r7, #20
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	605a      	str	r2, [r3, #4]
 8009c66:	609a      	str	r2, [r3, #8]
 8009c68:	60da      	str	r2, [r3, #12]
 8009c6a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a28      	ldr	r2, [pc, #160]	; (8009d14 <HAL_I2S_MspInit+0xc0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d14a      	bne.n	8009d0c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009c76:	2300      	movs	r3, #0
 8009c78:	613b      	str	r3, [r7, #16]
 8009c7a:	4b27      	ldr	r3, [pc, #156]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	4a26      	ldr	r2, [pc, #152]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c84:	6413      	str	r3, [r2, #64]	; 0x40
 8009c86:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	4b20      	ldr	r3, [pc, #128]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9a:	4a1f      	ldr	r2, [pc, #124]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009c9c:	f043 0301 	orr.w	r3, r3, #1
 8009ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60bb      	str	r3, [r7, #8]
 8009cb2:	4b19      	ldr	r3, [pc, #100]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	4a18      	ldr	r2, [pc, #96]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009cb8:	f043 0304 	orr.w	r3, r3, #4
 8009cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8009cbe:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <HAL_I2S_MspInit+0xc4>)
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	60bb      	str	r3, [r7, #8]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8009cca:	2310      	movs	r3, #16
 8009ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cce:	2302      	movs	r3, #2
 8009cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009cda:	2306      	movs	r3, #6
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8009cde:	f107 0314 	add.w	r3, r7, #20
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	480d      	ldr	r0, [pc, #52]	; (8009d1c <HAL_I2S_MspInit+0xc8>)
 8009ce6:	f7f6 fd99 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8009cea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8009cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009cfc:	2306      	movs	r3, #6
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	4619      	mov	r1, r3
 8009d06:	4806      	ldr	r0, [pc, #24]	; (8009d20 <HAL_I2S_MspInit+0xcc>)
 8009d08:	f7f6 fd88 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8009d0c:	bf00      	nop
 8009d0e:	3728      	adds	r7, #40	; 0x28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40003c00 	.word	0x40003c00
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	40020000 	.word	0x40020000
 8009d20:	40020800 	.word	0x40020800

08009d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	; 0x28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d2c:	f107 0314 	add.w	r3, r7, #20
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	605a      	str	r2, [r3, #4]
 8009d36:	609a      	str	r2, [r3, #8]
 8009d38:	60da      	str	r2, [r3, #12]
 8009d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a19      	ldr	r2, [pc, #100]	; (8009da8 <HAL_SPI_MspInit+0x84>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d12b      	bne.n	8009d9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009d46:	2300      	movs	r3, #0
 8009d48:	613b      	str	r3, [r7, #16]
 8009d4a:	4b18      	ldr	r3, [pc, #96]	; (8009dac <HAL_SPI_MspInit+0x88>)
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4e:	4a17      	ldr	r2, [pc, #92]	; (8009dac <HAL_SPI_MspInit+0x88>)
 8009d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d54:	6453      	str	r3, [r2, #68]	; 0x44
 8009d56:	4b15      	ldr	r3, [pc, #84]	; (8009dac <HAL_SPI_MspInit+0x88>)
 8009d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	4b11      	ldr	r3, [pc, #68]	; (8009dac <HAL_SPI_MspInit+0x88>)
 8009d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6a:	4a10      	ldr	r2, [pc, #64]	; (8009dac <HAL_SPI_MspInit+0x88>)
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	6313      	str	r3, [r2, #48]	; 0x30
 8009d72:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <HAL_SPI_MspInit+0x88>)
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8009d7e:	23e0      	movs	r3, #224	; 0xe0
 8009d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d82:	2302      	movs	r3, #2
 8009d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009d8e:	2305      	movs	r3, #5
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d92:	f107 0314 	add.w	r3, r7, #20
 8009d96:	4619      	mov	r1, r3
 8009d98:	4805      	ldr	r0, [pc, #20]	; (8009db0 <HAL_SPI_MspInit+0x8c>)
 8009d9a:	f7f6 fd3f 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009d9e:	bf00      	nop
 8009da0:	3728      	adds	r7, #40	; 0x28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40013000 	.word	0x40013000
 8009dac:	40023800 	.word	0x40023800
 8009db0:	40020000 	.word	0x40020000

08009db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dbc:	f107 0314 	add.w	r3, r7, #20
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	605a      	str	r2, [r3, #4]
 8009dc6:	609a      	str	r2, [r3, #8]
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a19      	ldr	r2, [pc, #100]	; (8009e38 <HAL_UART_MspInit+0x84>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d12b      	bne.n	8009e2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	613b      	str	r3, [r7, #16]
 8009dda:	4b18      	ldr	r3, [pc, #96]	; (8009e3c <HAL_UART_MspInit+0x88>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	4a17      	ldr	r2, [pc, #92]	; (8009e3c <HAL_UART_MspInit+0x88>)
 8009de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009de4:	6413      	str	r3, [r2, #64]	; 0x40
 8009de6:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <HAL_UART_MspInit+0x88>)
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <HAL_UART_MspInit+0x88>)
 8009df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfa:	4a10      	ldr	r2, [pc, #64]	; (8009e3c <HAL_UART_MspInit+0x88>)
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	6313      	str	r3, [r2, #48]	; 0x30
 8009e02:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <HAL_UART_MspInit+0x88>)
 8009e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009e0e:	230c      	movs	r3, #12
 8009e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e12:	2302      	movs	r3, #2
 8009e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e16:	2301      	movs	r3, #1
 8009e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009e1e:	2307      	movs	r3, #7
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e22:	f107 0314 	add.w	r3, r7, #20
 8009e26:	4619      	mov	r1, r3
 8009e28:	4805      	ldr	r0, [pc, #20]	; (8009e40 <HAL_UART_MspInit+0x8c>)
 8009e2a:	f7f6 fcf7 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009e2e:	bf00      	nop
 8009e30:	3728      	adds	r7, #40	; 0x28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	40004400 	.word	0x40004400
 8009e3c:	40023800 	.word	0x40023800
 8009e40:	40020000 	.word	0x40020000

08009e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009e48:	bf00      	nop
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e52:	b480      	push	{r7}
 8009e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e56:	e7fe      	b.n	8009e56 <HardFault_Handler+0x4>

08009e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009e5c:	e7fe      	b.n	8009e5c <MemManage_Handler+0x4>

08009e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009e62:	e7fe      	b.n	8009e62 <BusFault_Handler+0x4>

08009e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009e64:	b480      	push	{r7}
 8009e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009e68:	e7fe      	b.n	8009e68 <UsageFault_Handler+0x4>

08009e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e6e:	bf00      	nop
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e7c:	f7f6 fb7a 	bl	8000574 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009e80:	f7fe fe1a 	bl	8008ab8 <xTaskGetSchedulerState>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d001      	beq.n	8009e8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8009e8a:	f7ff f8d5 	bl	8009038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e8e:	bf00      	nop
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009e98:	4802      	ldr	r0, [pc, #8]	; (8009ea4 <OTG_FS_IRQHandler+0x10>)
 8009e9a:	f7f7 f92b 	bl	80010f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009e9e:	bf00      	nop
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20004578 	.word	0x20004578

08009ea8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009eb0:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <_sbrk+0x50>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <_sbrk+0x16>
		heap_end = &end;
 8009eb8:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <_sbrk+0x50>)
 8009eba:	4a10      	ldr	r2, [pc, #64]	; (8009efc <_sbrk+0x54>)
 8009ebc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <_sbrk+0x50>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009ec4:	4b0c      	ldr	r3, [pc, #48]	; (8009ef8 <_sbrk+0x50>)
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4413      	add	r3, r2
 8009ecc:	466a      	mov	r2, sp
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d907      	bls.n	8009ee2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009ed2:	f000 fb77 	bl	800a5c4 <__errno>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	230c      	movs	r3, #12
 8009eda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	e006      	b.n	8009ef0 <_sbrk+0x48>
	}

	heap_end += incr;
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <_sbrk+0x50>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4413      	add	r3, r2
 8009eea:	4a03      	ldr	r2, [pc, #12]	; (8009ef8 <_sbrk+0x50>)
 8009eec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009eee:	68fb      	ldr	r3, [r7, #12]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20004054 	.word	0x20004054
 8009efc:	20004840 	.word	0x20004840

08009f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009f00:	b480      	push	{r7}
 8009f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009f04:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <SystemInit+0x60>)
 8009f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0a:	4a15      	ldr	r2, [pc, #84]	; (8009f60 <SystemInit+0x60>)
 8009f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009f14:	4b13      	ldr	r3, [pc, #76]	; (8009f64 <SystemInit+0x64>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a12      	ldr	r2, [pc, #72]	; (8009f64 <SystemInit+0x64>)
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009f20:	4b10      	ldr	r3, [pc, #64]	; (8009f64 <SystemInit+0x64>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009f26:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <SystemInit+0x64>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a0e      	ldr	r2, [pc, #56]	; (8009f64 <SystemInit+0x64>)
 8009f2c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <SystemInit+0x64>)
 8009f38:	4a0b      	ldr	r2, [pc, #44]	; (8009f68 <SystemInit+0x68>)
 8009f3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <SystemInit+0x64>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a08      	ldr	r2, [pc, #32]	; (8009f64 <SystemInit+0x64>)
 8009f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <SystemInit+0x64>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009f4e:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <SystemInit+0x60>)
 8009f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009f54:	609a      	str	r2, [r3, #8]
#endif
}
 8009f56:	bf00      	nop
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	e000ed00 	.word	0xe000ed00
 8009f64:	40023800 	.word	0x40023800
 8009f68:	24003010 	.word	0x24003010

08009f6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009f70:	2201      	movs	r2, #1
 8009f72:	490e      	ldr	r1, [pc, #56]	; (8009fac <MX_USB_HOST_Init+0x40>)
 8009f74:	480e      	ldr	r0, [pc, #56]	; (8009fb0 <MX_USB_HOST_Init+0x44>)
 8009f76:	f7fb fc75 	bl	8005864 <USBH_Init>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009f80:	f7ff fdec 	bl	8009b5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009f84:	490b      	ldr	r1, [pc, #44]	; (8009fb4 <MX_USB_HOST_Init+0x48>)
 8009f86:	480a      	ldr	r0, [pc, #40]	; (8009fb0 <MX_USB_HOST_Init+0x44>)
 8009f88:	f7fb fd07 	bl	800599a <USBH_RegisterClass>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f92:	f7ff fde3 	bl	8009b5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009f96:	4806      	ldr	r0, [pc, #24]	; (8009fb0 <MX_USB_HOST_Init+0x44>)
 8009f98:	f7fb fd8c 	bl	8005ab4 <USBH_Start>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009fa2:	f7ff fddb 	bl	8009b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009fa6:	bf00      	nop
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	08009fb9 	.word	0x08009fb9
 8009fb0:	200041a0 	.word	0x200041a0
 8009fb4:	20000008 	.word	0x20000008

08009fb8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d819      	bhi.n	800a000 <USBH_UserProcess+0x48>
 8009fcc:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <USBH_UserProcess+0x1c>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	08009ff1 	.word	0x08009ff1
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	08009ff9 	.word	0x08009ff9
 8009fe4:	08009fe9 	.word	0x08009fe9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009fe8:	4b09      	ldr	r3, [pc, #36]	; (800a010 <USBH_UserProcess+0x58>)
 8009fea:	2203      	movs	r2, #3
 8009fec:	701a      	strb	r2, [r3, #0]
  break;
 8009fee:	e008      	b.n	800a002 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ff0:	4b07      	ldr	r3, [pc, #28]	; (800a010 <USBH_UserProcess+0x58>)
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	701a      	strb	r2, [r3, #0]
  break;
 8009ff6:	e004      	b.n	800a002 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ff8:	4b05      	ldr	r3, [pc, #20]	; (800a010 <USBH_UserProcess+0x58>)
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
  break;
 8009ffe:	e000      	b.n	800a002 <USBH_UserProcess+0x4a>

  default:
  break;
 800a000:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a002:	bf00      	nop
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	20004058 	.word	0x20004058

0800a014 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08a      	sub	sp, #40	; 0x28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a01c:	f107 0314 	add.w	r3, r7, #20
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	605a      	str	r2, [r3, #4]
 800a026:	609a      	str	r2, [r3, #8]
 800a028:	60da      	str	r2, [r3, #12]
 800a02a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a034:	d147      	bne.n	800a0c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03e:	4a24      	ldr	r2, [pc, #144]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a040:	f043 0301 	orr.w	r3, r3, #1
 800a044:	6313      	str	r3, [r2, #48]	; 0x30
 800a046:	4b22      	ldr	r3, [pc, #136]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a052:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a058:	2300      	movs	r3, #0
 800a05a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	4619      	mov	r1, r3
 800a066:	481b      	ldr	r0, [pc, #108]	; (800a0d4 <HAL_HCD_MspInit+0xc0>)
 800a068:	f7f6 fbd8 	bl	800081c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a06c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a072:	2302      	movs	r3, #2
 800a074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a076:	2300      	movs	r3, #0
 800a078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a07a:	2300      	movs	r3, #0
 800a07c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a07e:	230a      	movs	r3, #10
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a082:	f107 0314 	add.w	r3, r7, #20
 800a086:	4619      	mov	r1, r3
 800a088:	4812      	ldr	r0, [pc, #72]	; (800a0d4 <HAL_HCD_MspInit+0xc0>)
 800a08a:	f7f6 fbc7 	bl	800081c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a08e:	4b10      	ldr	r3, [pc, #64]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	4a0f      	ldr	r2, [pc, #60]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a098:	6353      	str	r3, [r2, #52]	; 0x34
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a2:	4a0b      	ldr	r2, [pc, #44]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a0a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0a8:	6453      	str	r3, [r2, #68]	; 0x44
 800a0aa:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <HAL_HCD_MspInit+0xbc>)
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2105      	movs	r1, #5
 800a0ba:	2043      	movs	r0, #67	; 0x43
 800a0bc:	f7f6 fb77 	bl	80007ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0c0:	2043      	movs	r0, #67	; 0x43
 800a0c2:	f7f6 fb90 	bl	80007e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0c6:	bf00      	nop
 800a0c8:	3728      	adds	r7, #40	; 0x28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	40020000 	.word	0x40020000

0800a0d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fc f837 	bl	800615a <USBH_LL_IncTimer>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a102:	4618      	mov	r0, r3
 800a104:	f7fc f87c 	bl	8006200 <USBH_LL_Connect>
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fc f8a2 	bl	8006268 <USBH_LL_Disconnect>
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
 800a138:	4613      	mov	r3, r2
 800a13a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a142:	4618      	mov	r0, r3
 800a144:	f7fc f8e0 	bl	8006308 <USBH_LL_NotifyURBChange>
#endif
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fc f825 	bl	80061ae <USBH_LL_PortEnabled>
} 
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fc f825 	bl	80061ca <USBH_LL_PortDisabled>
} 
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a196:	2b01      	cmp	r3, #1
 800a198:	d12a      	bne.n	800a1f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a19a:	4a18      	ldr	r2, [pc, #96]	; (800a1fc <USBH_LL_Init+0x74>)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a15      	ldr	r2, [pc, #84]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1aa:	4b14      	ldr	r3, [pc, #80]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a1b2:	4b12      	ldr	r3, [pc, #72]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1b4:	2208      	movs	r2, #8
 800a1b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a1b8:	4b10      	ldr	r3, [pc, #64]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1be:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a1c4:	4b0d      	ldr	r3, [pc, #52]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a1d0:	480a      	ldr	r0, [pc, #40]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1d2:	f7f6 fd09 	bl	8000be8 <HAL_HCD_Init>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a1dc:	f7ff fcbe 	bl	8009b5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a1e0:	4806      	ldr	r0, [pc, #24]	; (800a1fc <USBH_LL_Init+0x74>)
 800a1e2:	f7f7 f905 	bl	80013f0 <HAL_HCD_GetCurrentFrame>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7fb ffa6 	bl	800613c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20004578 	.word	0x20004578

0800a200 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a216:	4618      	mov	r0, r3
 800a218:	f7f7 f872 	bl	8001300 <HAL_HCD_Start>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f95c 	bl	800a4e0 <USBH_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f7 f87a 	bl	8001346 <HAL_HCD_Stop>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f941 	bl	800a4e0 <USBH_Get_USB_Status>
 800a25e:	4603      	mov	r3, r0
 800a260:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800a262:	7bbb      	ldrb	r3, [r7, #14]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a274:	2301      	movs	r3, #1
 800a276:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f7 f8c4 	bl	800140c <HAL_HCD_GetCurrentSpeed>
 800a284:	4603      	mov	r3, r0
 800a286:	2b01      	cmp	r3, #1
 800a288:	d007      	beq.n	800a29a <USBH_LL_GetSpeed+0x2e>
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d302      	bcc.n	800a294 <USBH_LL_GetSpeed+0x28>
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d006      	beq.n	800a2a0 <USBH_LL_GetSpeed+0x34>
 800a292:	e008      	b.n	800a2a6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
    break;
 800a298:	e008      	b.n	800a2ac <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a29a:	2301      	movs	r3, #1
 800a29c:	73fb      	strb	r3, [r7, #15]
    break;
 800a29e:	e005      	b.n	800a2ac <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a4:	e002      	b.n	800a2ac <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2aa:	bf00      	nop
  }
  return  speed;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7f7 f857 	bl	8001380 <HAL_HCD_ResetPort>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 f901 	bl	800a4e0 <USBH_Get_USB_Status>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	4611      	mov	r1, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7f7 f85f 	bl	80013c6 <HAL_HCD_HC_GetXferCount>
 800a308:	4603      	mov	r3, r0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a312:	b590      	push	{r4, r7, lr}
 800a314:	b089      	sub	sp, #36	; 0x24
 800a316:	af04      	add	r7, sp, #16
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	4608      	mov	r0, r1
 800a31c:	4611      	mov	r1, r2
 800a31e:	461a      	mov	r2, r3
 800a320:	4603      	mov	r3, r0
 800a322:	70fb      	strb	r3, [r7, #3]
 800a324:	460b      	mov	r3, r1
 800a326:	70bb      	strb	r3, [r7, #2]
 800a328:	4613      	mov	r3, r2
 800a32a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a33a:	787c      	ldrb	r4, [r7, #1]
 800a33c:	78ba      	ldrb	r2, [r7, #2]
 800a33e:	78f9      	ldrb	r1, [r7, #3]
 800a340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a342:	9302      	str	r3, [sp, #8]
 800a344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	4623      	mov	r3, r4
 800a352:	f7f6 fcab 	bl	8000cac <HAL_HCD_HC_Init>
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 f8bf 	bl	800a4e0 <USBH_Get_USB_Status>
 800a362:	4603      	mov	r3, r0
 800a364:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a366:	7bbb      	ldrb	r3, [r7, #14]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd90      	pop	{r4, r7, pc}

0800a370 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f6 fd24 	bl	8000ddc <HAL_HCD_HC_Halt>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f8a0 	bl	800a4e0 <USBH_Get_USB_Status>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a3ae:	b590      	push	{r4, r7, lr}
 800a3b0:	b089      	sub	sp, #36	; 0x24
 800a3b2:	af04      	add	r7, sp, #16
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	4603      	mov	r3, r0
 800a3be:	70fb      	strb	r3, [r7, #3]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70bb      	strb	r3, [r7, #2]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a3d6:	787c      	ldrb	r4, [r7, #1]
 800a3d8:	78ba      	ldrb	r2, [r7, #2]
 800a3da:	78f9      	ldrb	r1, [r7, #3]
 800a3dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	f7f6 fd17 	bl	8000e24 <HAL_HCD_HC_SubmitRequest>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 f86f 	bl	800a4e0 <USBH_Get_USB_Status>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a406:	7bbb      	ldrb	r3, [r7, #14]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd90      	pop	{r4, r7, pc}

0800a410 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f7f6 ffb8 	bl	800139c <HAL_HCD_HC_GetURBState>
 800a42c:	4603      	mov	r3, r0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d103      	bne.n	800a454 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 f872 	bl	800a538 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a454:	20c8      	movs	r0, #200	; 0xc8
 800a456:	f7f6 f8ad 	bl	80005b4 <HAL_Delay>
  return USBH_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
 800a470:	4613      	mov	r3, r2
 800a472:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a47a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a47c:	78fa      	ldrb	r2, [r7, #3]
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	4613      	mov	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	00db      	lsls	r3, r3, #3
 800a488:	440b      	add	r3, r1
 800a48a:	333b      	adds	r3, #59	; 0x3b
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a492:	78fa      	ldrb	r2, [r7, #3]
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	440b      	add	r3, r1
 800a4a0:	3350      	adds	r3, #80	; 0x50
 800a4a2:	78ba      	ldrb	r2, [r7, #2]
 800a4a4:	701a      	strb	r2, [r3, #0]
 800a4a6:	e009      	b.n	800a4bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a4a8:	78fa      	ldrb	r2, [r7, #3]
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	440b      	add	r3, r1
 800a4b6:	3351      	adds	r3, #81	; 0x51
 800a4b8:	78ba      	ldrb	r2, [r7, #2]
 800a4ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7f6 f86e 	bl	80005b4 <HAL_Delay>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d817      	bhi.n	800a524 <USBH_Get_USB_Status+0x44>
 800a4f4:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <USBH_Get_USB_Status+0x1c>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a50d 	.word	0x0800a50d
 800a500:	0800a513 	.word	0x0800a513
 800a504:	0800a519 	.word	0x0800a519
 800a508:	0800a51f 	.word	0x0800a51f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
    break;
 800a510:	e00b      	b.n	800a52a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a512:	2302      	movs	r3, #2
 800a514:	73fb      	strb	r3, [r7, #15]
    break;
 800a516:	e008      	b.n	800a52a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a518:	2301      	movs	r3, #1
 800a51a:	73fb      	strb	r3, [r7, #15]
    break;
 800a51c:	e005      	b.n	800a52a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a51e:	2302      	movs	r3, #2
 800a520:	73fb      	strb	r3, [r7, #15]
    break;
 800a522:	e002      	b.n	800a52a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	73fb      	strb	r3, [r7, #15]
    break;
 800a528:	bf00      	nop
  }
  return usb_status;
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a546:	79fb      	ldrb	r3, [r7, #7]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
 800a550:	e001      	b.n	800a556 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	461a      	mov	r2, r3
 800a55a:	2101      	movs	r1, #1
 800a55c:	4803      	ldr	r0, [pc, #12]	; (800a56c <MX_DriverVbusFS+0x34>)
 800a55e:	f7f6 fb0f 	bl	8000b80 <HAL_GPIO_WritePin>
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	40020800 	.word	0x40020800

0800a570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a570:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a5a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a576:	e003      	b.n	800a580 <LoopCopyDataInit>

0800a578 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a57a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a57c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a57e:	3104      	adds	r1, #4

0800a580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a580:	480b      	ldr	r0, [pc, #44]	; (800a5b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a582:	4b0c      	ldr	r3, [pc, #48]	; (800a5b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a584:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a586:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a588:	d3f6      	bcc.n	800a578 <CopyDataInit>
  ldr  r2, =_sbss
 800a58a:	4a0b      	ldr	r2, [pc, #44]	; (800a5b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a58c:	e002      	b.n	800a594 <LoopFillZerobss>

0800a58e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a58e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a590:	f842 3b04 	str.w	r3, [r2], #4

0800a594 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a594:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a596:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a598:	d3f9      	bcc.n	800a58e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a59a:	f7ff fcb1 	bl	8009f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a59e:	f000 f817 	bl	800a5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a5a2:	f7fe ffc5 	bl	8009530 <main>
  bx  lr    
 800a5a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a5a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a5ac:	0800a8d8 	.word	0x0800a8d8
  ldr  r0, =_sdata
 800a5b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a5b4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800a5b8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800a5bc:	20004840 	.word	0x20004840

0800a5c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a5c0:	e7fe      	b.n	800a5c0 <ADC_IRQHandler>
	...

0800a5c4 <__errno>:
 800a5c4:	4b01      	ldr	r3, [pc, #4]	; (800a5cc <__errno+0x8>)
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20000030 	.word	0x20000030

0800a5d0 <__libc_init_array>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4e0d      	ldr	r6, [pc, #52]	; (800a608 <__libc_init_array+0x38>)
 800a5d4:	4c0d      	ldr	r4, [pc, #52]	; (800a60c <__libc_init_array+0x3c>)
 800a5d6:	1ba4      	subs	r4, r4, r6
 800a5d8:	10a4      	asrs	r4, r4, #2
 800a5da:	2500      	movs	r5, #0
 800a5dc:	42a5      	cmp	r5, r4
 800a5de:	d109      	bne.n	800a5f4 <__libc_init_array+0x24>
 800a5e0:	4e0b      	ldr	r6, [pc, #44]	; (800a610 <__libc_init_array+0x40>)
 800a5e2:	4c0c      	ldr	r4, [pc, #48]	; (800a614 <__libc_init_array+0x44>)
 800a5e4:	f000 f8f6 	bl	800a7d4 <_init>
 800a5e8:	1ba4      	subs	r4, r4, r6
 800a5ea:	10a4      	asrs	r4, r4, #2
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	42a5      	cmp	r5, r4
 800a5f0:	d105      	bne.n	800a5fe <__libc_init_array+0x2e>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5f8:	4798      	blx	r3
 800a5fa:	3501      	adds	r5, #1
 800a5fc:	e7ee      	b.n	800a5dc <__libc_init_array+0xc>
 800a5fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a602:	4798      	blx	r3
 800a604:	3501      	adds	r5, #1
 800a606:	e7f2      	b.n	800a5ee <__libc_init_array+0x1e>
 800a608:	0800a8d0 	.word	0x0800a8d0
 800a60c:	0800a8d0 	.word	0x0800a8d0
 800a610:	0800a8d0 	.word	0x0800a8d0
 800a614:	0800a8d4 	.word	0x0800a8d4

0800a618 <malloc>:
 800a618:	4b02      	ldr	r3, [pc, #8]	; (800a624 <malloc+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f000 b86d 	b.w	800a6fc <_malloc_r>
 800a622:	bf00      	nop
 800a624:	20000030 	.word	0x20000030

0800a628 <free>:
 800a628:	4b02      	ldr	r3, [pc, #8]	; (800a634 <free+0xc>)
 800a62a:	4601      	mov	r1, r0
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	f000 b817 	b.w	800a660 <_free_r>
 800a632:	bf00      	nop
 800a634:	20000030 	.word	0x20000030

0800a638 <memcpy>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	1e43      	subs	r3, r0, #1
 800a63c:	440a      	add	r2, r1
 800a63e:	4291      	cmp	r1, r2
 800a640:	d100      	bne.n	800a644 <memcpy+0xc>
 800a642:	bd10      	pop	{r4, pc}
 800a644:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64c:	e7f7      	b.n	800a63e <memcpy+0x6>

0800a64e <memset>:
 800a64e:	4402      	add	r2, r0
 800a650:	4603      	mov	r3, r0
 800a652:	4293      	cmp	r3, r2
 800a654:	d100      	bne.n	800a658 <memset+0xa>
 800a656:	4770      	bx	lr
 800a658:	f803 1b01 	strb.w	r1, [r3], #1
 800a65c:	e7f9      	b.n	800a652 <memset+0x4>
	...

0800a660 <_free_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4605      	mov	r5, r0
 800a664:	2900      	cmp	r1, #0
 800a666:	d045      	beq.n	800a6f4 <_free_r+0x94>
 800a668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a66c:	1f0c      	subs	r4, r1, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bfb8      	it	lt
 800a672:	18e4      	addlt	r4, r4, r3
 800a674:	f000 f8ac 	bl	800a7d0 <__malloc_lock>
 800a678:	4a1f      	ldr	r2, [pc, #124]	; (800a6f8 <_free_r+0x98>)
 800a67a:	6813      	ldr	r3, [r2, #0]
 800a67c:	4610      	mov	r0, r2
 800a67e:	b933      	cbnz	r3, 800a68e <_free_r+0x2e>
 800a680:	6063      	str	r3, [r4, #4]
 800a682:	6014      	str	r4, [r2, #0]
 800a684:	4628      	mov	r0, r5
 800a686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68a:	f000 b8a2 	b.w	800a7d2 <__malloc_unlock>
 800a68e:	42a3      	cmp	r3, r4
 800a690:	d90c      	bls.n	800a6ac <_free_r+0x4c>
 800a692:	6821      	ldr	r1, [r4, #0]
 800a694:	1862      	adds	r2, r4, r1
 800a696:	4293      	cmp	r3, r2
 800a698:	bf04      	itt	eq
 800a69a:	681a      	ldreq	r2, [r3, #0]
 800a69c:	685b      	ldreq	r3, [r3, #4]
 800a69e:	6063      	str	r3, [r4, #4]
 800a6a0:	bf04      	itt	eq
 800a6a2:	1852      	addeq	r2, r2, r1
 800a6a4:	6022      	streq	r2, [r4, #0]
 800a6a6:	6004      	str	r4, [r0, #0]
 800a6a8:	e7ec      	b.n	800a684 <_free_r+0x24>
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	b10a      	cbz	r2, 800a6b4 <_free_r+0x54>
 800a6b0:	42a2      	cmp	r2, r4
 800a6b2:	d9fa      	bls.n	800a6aa <_free_r+0x4a>
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	1858      	adds	r0, r3, r1
 800a6b8:	42a0      	cmp	r0, r4
 800a6ba:	d10b      	bne.n	800a6d4 <_free_r+0x74>
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	4401      	add	r1, r0
 800a6c0:	1858      	adds	r0, r3, r1
 800a6c2:	4282      	cmp	r2, r0
 800a6c4:	6019      	str	r1, [r3, #0]
 800a6c6:	d1dd      	bne.n	800a684 <_free_r+0x24>
 800a6c8:	6810      	ldr	r0, [r2, #0]
 800a6ca:	6852      	ldr	r2, [r2, #4]
 800a6cc:	605a      	str	r2, [r3, #4]
 800a6ce:	4401      	add	r1, r0
 800a6d0:	6019      	str	r1, [r3, #0]
 800a6d2:	e7d7      	b.n	800a684 <_free_r+0x24>
 800a6d4:	d902      	bls.n	800a6dc <_free_r+0x7c>
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	e7d3      	b.n	800a684 <_free_r+0x24>
 800a6dc:	6820      	ldr	r0, [r4, #0]
 800a6de:	1821      	adds	r1, r4, r0
 800a6e0:	428a      	cmp	r2, r1
 800a6e2:	bf04      	itt	eq
 800a6e4:	6811      	ldreq	r1, [r2, #0]
 800a6e6:	6852      	ldreq	r2, [r2, #4]
 800a6e8:	6062      	str	r2, [r4, #4]
 800a6ea:	bf04      	itt	eq
 800a6ec:	1809      	addeq	r1, r1, r0
 800a6ee:	6021      	streq	r1, [r4, #0]
 800a6f0:	605c      	str	r4, [r3, #4]
 800a6f2:	e7c7      	b.n	800a684 <_free_r+0x24>
 800a6f4:	bd38      	pop	{r3, r4, r5, pc}
 800a6f6:	bf00      	nop
 800a6f8:	2000405c 	.word	0x2000405c

0800a6fc <_malloc_r>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	1ccd      	adds	r5, r1, #3
 800a700:	f025 0503 	bic.w	r5, r5, #3
 800a704:	3508      	adds	r5, #8
 800a706:	2d0c      	cmp	r5, #12
 800a708:	bf38      	it	cc
 800a70a:	250c      	movcc	r5, #12
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	4606      	mov	r6, r0
 800a710:	db01      	blt.n	800a716 <_malloc_r+0x1a>
 800a712:	42a9      	cmp	r1, r5
 800a714:	d903      	bls.n	800a71e <_malloc_r+0x22>
 800a716:	230c      	movs	r3, #12
 800a718:	6033      	str	r3, [r6, #0]
 800a71a:	2000      	movs	r0, #0
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	f000 f857 	bl	800a7d0 <__malloc_lock>
 800a722:	4a21      	ldr	r2, [pc, #132]	; (800a7a8 <_malloc_r+0xac>)
 800a724:	6814      	ldr	r4, [r2, #0]
 800a726:	4621      	mov	r1, r4
 800a728:	b991      	cbnz	r1, 800a750 <_malloc_r+0x54>
 800a72a:	4c20      	ldr	r4, [pc, #128]	; (800a7ac <_malloc_r+0xb0>)
 800a72c:	6823      	ldr	r3, [r4, #0]
 800a72e:	b91b      	cbnz	r3, 800a738 <_malloc_r+0x3c>
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f83d 	bl	800a7b0 <_sbrk_r>
 800a736:	6020      	str	r0, [r4, #0]
 800a738:	4629      	mov	r1, r5
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 f838 	bl	800a7b0 <_sbrk_r>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d124      	bne.n	800a78e <_malloc_r+0x92>
 800a744:	230c      	movs	r3, #12
 800a746:	6033      	str	r3, [r6, #0]
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 f842 	bl	800a7d2 <__malloc_unlock>
 800a74e:	e7e4      	b.n	800a71a <_malloc_r+0x1e>
 800a750:	680b      	ldr	r3, [r1, #0]
 800a752:	1b5b      	subs	r3, r3, r5
 800a754:	d418      	bmi.n	800a788 <_malloc_r+0x8c>
 800a756:	2b0b      	cmp	r3, #11
 800a758:	d90f      	bls.n	800a77a <_malloc_r+0x7e>
 800a75a:	600b      	str	r3, [r1, #0]
 800a75c:	50cd      	str	r5, [r1, r3]
 800a75e:	18cc      	adds	r4, r1, r3
 800a760:	4630      	mov	r0, r6
 800a762:	f000 f836 	bl	800a7d2 <__malloc_unlock>
 800a766:	f104 000b 	add.w	r0, r4, #11
 800a76a:	1d23      	adds	r3, r4, #4
 800a76c:	f020 0007 	bic.w	r0, r0, #7
 800a770:	1ac3      	subs	r3, r0, r3
 800a772:	d0d3      	beq.n	800a71c <_malloc_r+0x20>
 800a774:	425a      	negs	r2, r3
 800a776:	50e2      	str	r2, [r4, r3]
 800a778:	e7d0      	b.n	800a71c <_malloc_r+0x20>
 800a77a:	428c      	cmp	r4, r1
 800a77c:	684b      	ldr	r3, [r1, #4]
 800a77e:	bf16      	itet	ne
 800a780:	6063      	strne	r3, [r4, #4]
 800a782:	6013      	streq	r3, [r2, #0]
 800a784:	460c      	movne	r4, r1
 800a786:	e7eb      	b.n	800a760 <_malloc_r+0x64>
 800a788:	460c      	mov	r4, r1
 800a78a:	6849      	ldr	r1, [r1, #4]
 800a78c:	e7cc      	b.n	800a728 <_malloc_r+0x2c>
 800a78e:	1cc4      	adds	r4, r0, #3
 800a790:	f024 0403 	bic.w	r4, r4, #3
 800a794:	42a0      	cmp	r0, r4
 800a796:	d005      	beq.n	800a7a4 <_malloc_r+0xa8>
 800a798:	1a21      	subs	r1, r4, r0
 800a79a:	4630      	mov	r0, r6
 800a79c:	f000 f808 	bl	800a7b0 <_sbrk_r>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d0cf      	beq.n	800a744 <_malloc_r+0x48>
 800a7a4:	6025      	str	r5, [r4, #0]
 800a7a6:	e7db      	b.n	800a760 <_malloc_r+0x64>
 800a7a8:	2000405c 	.word	0x2000405c
 800a7ac:	20004060 	.word	0x20004060

0800a7b0 <_sbrk_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4c06      	ldr	r4, [pc, #24]	; (800a7cc <_sbrk_r+0x1c>)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	f7ff fb74 	bl	8009ea8 <_sbrk>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_sbrk_r+0x1a>
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_sbrk_r+0x1a>
 800a7c8:	602b      	str	r3, [r5, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	2000483c 	.word	0x2000483c

0800a7d0 <__malloc_lock>:
 800a7d0:	4770      	bx	lr

0800a7d2 <__malloc_unlock>:
 800a7d2:	4770      	bx	lr

0800a7d4 <_init>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_fini>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	bf00      	nop
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr
