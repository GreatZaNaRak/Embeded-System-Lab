
Lab4-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008adc  08008adc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae4  08008ae4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae4  08008ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000094  08008b80  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08008b80  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e789  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e7b  00000000  00000000  0003e84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  000426c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  00043fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026232  00000000  00000000  00045710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015c78  00000000  00000000  0006b942  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8428  00000000  00000000  000815ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001599e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dc0  00000000  00000000  00159a60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a6c 	.word	0x08008a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08008a6c 	.word	0x08008a6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fd07 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 f8bc 	bl	8007730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd1f 	bl	8001026 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fce7 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000002c 	.word	0x2000002c
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000d4 	.word	0x200000d4

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000d4 	.word	0x200000d4

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f007 f85a 	bl	8007780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa92 	bl	8000c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <HAL_ADC_Start+0x1a>
 8000746:	2302      	movs	r3, #2
 8000748:	e0a5      	b.n	8000896 <HAL_ADC_Start+0x166>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d018      	beq.n	8000792 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <HAL_ADC_Start+0x174>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <HAL_ADC_Start+0x178>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000784:	e002      	b.n	800078c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d179      	bne.n	8000894 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ADC_Start+0x17c>)
 80007fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d12a      	bne.n	800086c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_ADC_Start+0x180>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d015      	beq.n	800084c <HAL_ADC_Start+0x11c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_ADC_Start+0x184>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d105      	bne.n	8000836 <HAL_ADC_Start+0x106>
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_ADC_Start+0x17c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_Start+0x188>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d129      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_ADC_Start+0x17c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d823      	bhi.n	8000894 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11c      	bne.n	8000894 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	e013      	b.n	8000894 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_ADC_Start+0x180>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10e      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d107      	bne.n	8000894 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	2000002c 	.word	0x2000002c
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	40012300 	.word	0x40012300
 80008b0:	40012000 	.word	0x40012000
 80008b4:	40012100 	.word	0x40012100
 80008b8:	40012200 	.word	0x40012200

080008bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d8:	d113      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e8:	d10b      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f043 0220 	orr.w	r2, r3, #32
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e05c      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000902:	f7ff fea3 	bl	800064c <HAL_GetTick>
 8000906:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000908:	e01a      	b.n	8000940 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d016      	beq.n	8000940 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <HAL_ADC_PollForConversion+0x6c>
 8000918:	f7ff fe98 	bl	800064c <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d20b      	bcs.n	8000940 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f043 0204 	orr.w	r2, r3, #4
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e03d      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1dd      	bne.n	800090a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f06f 0212 	mvn.w	r2, #18
 8000956:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d123      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000976:	2b00      	cmp	r3, #0
 8000978:	d11f      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000992:	2b00      	cmp	r3, #0
 8000994:	d111      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d105      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d101      	bne.n	80009fc <HAL_ADC_ConfigChannel+0x1c>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e105      	b.n	8000c08 <HAL_ADC_ConfigChannel+0x228>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b09      	cmp	r3, #9
 8000a0a:	d925      	bls.n	8000a58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68d9      	ldr	r1, [r3, #12]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b1e      	subs	r3, #30
 8000a22:	2207      	movs	r2, #7
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	400a      	ands	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68d9      	ldr	r1, [r3, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	4603      	mov	r3, r0
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4403      	add	r3, r0
 8000a4a:	3b1e      	subs	r3, #30
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	e022      	b.n	8000a9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6919      	ldr	r1, [r3, #16]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	400a      	ands	r2, r1
 8000a7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6919      	ldr	r1, [r3, #16]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	4603      	mov	r3, r0
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4403      	add	r3, r0
 8000a94:	409a      	lsls	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d824      	bhi.n	8000af0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3b05      	subs	r3, #5
 8000ab8:	221f      	movs	r2, #31
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	3b05      	subs	r3, #5
 8000ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	e04c      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d824      	bhi.n	8000b42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	3b23      	subs	r3, #35	; 0x23
 8000b0a:	221f      	movs	r2, #31
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43da      	mvns	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	400a      	ands	r2, r1
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	3b23      	subs	r3, #35	; 0x23
 8000b34:	fa00 f203 	lsl.w	r2, r0, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b40:	e023      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	3b41      	subs	r3, #65	; 0x41
 8000b54:	221f      	movs	r2, #31
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	400a      	ands	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b41      	subs	r3, #65	; 0x41
 8000b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_ADC_ConfigChannel+0x234>)
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d105      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d123      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b10      	cmp	r3, #16
 8000bbc:	d003      	beq.n	8000bc6 <HAL_ADC_ConfigChannel+0x1e6>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b11      	cmp	r3, #17
 8000bc4:	d11b      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d111      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_ConfigChannel+0x23c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_ADC_ConfigChannel+0x240>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	0c9a      	lsrs	r2, r3, #18
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf0:	e002      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40012300 	.word	0x40012300
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	2000002c 	.word	0x2000002c
 8000c20:	431bde83 	.word	0x431bde83

08000c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c2c:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <ADC_Init+0x1f0>)
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	021a      	lsls	r2, r3, #8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6859      	ldr	r1, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6899      	ldr	r1, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	4a58      	ldr	r2, [pc, #352]	; (8000e18 <ADC_Init+0x1f4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d022      	beq.n	8000d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6899      	ldr	r1, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6899      	ldr	r1, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e00f      	b.n	8000d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0202 	bic.w	r2, r2, #2
 8000d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e1b      	ldrb	r3, [r3, #24]
 8000d3c:	005a      	lsls	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01b      	beq.n	8000d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	035a      	lsls	r2, r3, #13
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	e007      	b.n	8000d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	051a      	lsls	r2, r3, #20
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dda:	025a      	lsls	r2, r3, #9
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6899      	ldr	r1, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	029a      	lsls	r2, r3, #10
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	609a      	str	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40012300 	.word	0x40012300
 8000e18:	0f000001 	.word	0x0f000001

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x4a>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b12      	cmp	r3, #18
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	69b9      	ldr	r1, [r7, #24]
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0203 	and.w	r2, r3, #3
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d00b      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111a:	2b11      	cmp	r3, #17
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b12      	cmp	r3, #18
 8001124:	d130      	bne.n	8001188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 0201 	and.w	r2, r3, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x310>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x324>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x328>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4934      	ldr	r1, [pc, #208]	; (800134c <HAL_GPIO_Init+0x30c>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001286:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_GPIO_Init+0x330>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	3724      	adds	r7, #36	; 0x24
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	b08f      	sub	sp, #60	; 0x3c
 80013aa:	af0a      	add	r7, sp, #40	; 0x28
 80013ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e054      	b.n	8001462 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f006 fc78 	bl	8007cc8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 ff30 	bl	800525c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	687e      	ldr	r6, [r7, #4]
 8001404:	466d      	mov	r5, sp
 8001406:	f106 0410 	add.w	r4, r6, #16
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001416:	e885 0003 	stmia.w	r5, {r0, r1}
 800141a:	1d33      	adds	r3, r6, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f003 feaa 	bl	8005178 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f003 ff27 	bl	800527e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	687e      	ldr	r6, [r7, #4]
 8001438:	466d      	mov	r5, sp
 800143a:	f106 0410 	add.w	r4, r6, #16
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144a:	e885 0003 	stmia.w	r5, {r0, r1}
 800144e:	1d33      	adds	r3, r6, #4
 8001450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f004 f83a 	bl	80054cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b089      	sub	sp, #36	; 0x24
 800146e:	af04      	add	r7, sp, #16
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	4608      	mov	r0, r1
 8001474:	4611      	mov	r1, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4603      	mov	r3, r0
 800147a:	70fb      	strb	r3, [r7, #3]
 800147c:	460b      	mov	r3, r1
 800147e:	70bb      	strb	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_HCD_HC_Init+0x28>
 800148e:	2302      	movs	r3, #2
 8001490:	e07f      	b.n	8001592 <HAL_HCD_HC_Init+0x128>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	333d      	adds	r3, #61	; 0x3d
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3338      	adds	r3, #56	; 0x38
 80014be:	787a      	ldrb	r2, [r7, #1]
 80014c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3340      	adds	r3, #64	; 0x40
 80014d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3339      	adds	r3, #57	; 0x39
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	333f      	adds	r3, #63	; 0x3f
 80014fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	78bb      	ldrb	r3, [r7, #2]
 8001504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	333a      	adds	r3, #58	; 0x3a
 8001518:	4602      	mov	r2, r0
 800151a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800151c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da0a      	bge.n	800153a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	333b      	adds	r3, #59	; 0x3b
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e009      	b.n	800154e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	333b      	adds	r3, #59	; 0x3b
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	333c      	adds	r3, #60	; 0x3c
 800155e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001562:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	787c      	ldrb	r4, [r7, #1]
 800156a:	78ba      	ldrb	r2, [r7, #2]
 800156c:	78f9      	ldrb	r1, [r7, #3]
 800156e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4623      	mov	r3, r4
 8001580:	f004 f8e4 	bl	800574c <USB_HC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}

0800159a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_HCD_HC_Halt+0x1e>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e00f      	b.n	80015d8 <HAL_HCD_HC_Halt+0x3e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fb1e 	bl	8005c0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70bb      	strb	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	333b      	adds	r3, #59	; 0x3b
 800160a:	78ba      	ldrb	r2, [r7, #2]
 800160c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	333f      	adds	r3, #63	; 0x3f
 800161e:	787a      	ldrb	r2, [r7, #1]
 8001620:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001622:	7c3b      	ldrb	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3342      	adds	r3, #66	; 0x42
 8001638:	2203      	movs	r2, #3
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e009      	b.n	8001652 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3342      	adds	r3, #66	; 0x42
 800164e:	2202      	movs	r2, #2
 8001650:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001652:	787b      	ldrb	r3, [r7, #1]
 8001654:	2b03      	cmp	r3, #3
 8001656:	f200 80d6 	bhi.w	8001806 <HAL_HCD_HC_SubmitRequest+0x226>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_HCD_HC_SubmitRequest+0x80>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001671 	.word	0x08001671
 8001664:	080017f1 	.word	0x080017f1
 8001668:	080016dd 	.word	0x080016dd
 800166c:	08001767 	.word	0x08001767
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001670:	7c3b      	ldrb	r3, [r7, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f040 80c9 	bne.w	800180a <HAL_HCD_HC_SubmitRequest+0x22a>
 8001678:	78bb      	ldrb	r3, [r7, #2]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80c5 	bne.w	800180a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001680:	8b3b      	ldrh	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3351      	adds	r3, #81	; 0x51
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3351      	adds	r3, #81	; 0x51
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3342      	adds	r3, #66	; 0x42
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016c4:	e0a1      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e096      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d120      	bne.n	8001724 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3351      	adds	r3, #81	; 0x51
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3342      	adds	r3, #66	; 0x42
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800170c:	e07e      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3342      	adds	r3, #66	; 0x42
 800171e:	2202      	movs	r2, #2
 8001720:	701a      	strb	r2, [r3, #0]
      break;
 8001722:	e073      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3350      	adds	r3, #80	; 0x50
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3342      	adds	r3, #66	; 0x42
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
      break;
 800174e:	e05d      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3342      	adds	r3, #66	; 0x42
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
      break;
 8001764:	e052      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d120      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3351      	adds	r3, #81	; 0x51
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001796:	e039      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3342      	adds	r3, #66	; 0x42
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e02e      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3350      	adds	r3, #80	; 0x50
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10a      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3342      	adds	r3, #66	; 0x42
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      break;
 80017d8:	e018      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e00d      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3342      	adds	r3, #66	; 0x42
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      break;
 8001804:	e002      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800180a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3344      	adds	r3, #68	; 0x44
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	8b39      	ldrh	r1, [r7, #24]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4403      	add	r3, r0
 8001830:	3348      	adds	r3, #72	; 0x48
 8001832:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	335c      	adds	r3, #92	; 0x5c
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	334c      	adds	r3, #76	; 0x4c
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	3339      	adds	r3, #57	; 0x39
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	335d      	adds	r3, #93	; 0x5d
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	3338      	adds	r3, #56	; 0x38
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	18d1      	adds	r1, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	f004 f85e 	bl	8005960 <USB_HC_StartXfer>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop

080018b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fdbd 	bl	8005446 <USB_GetMode>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	f040 80f1 	bne.w	8001ab6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fda1 	bl	8005420 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80e7 	beq.w	8001ab4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fd98 	bl	8005420 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018fa:	d104      	bne.n	8001906 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fd88 	bl	8005420 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800191a:	d104      	bne.n	8001926 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fd78 	bl	8005420 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fd68 	bl	8005420 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d103      	bne.n	8001962 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fd5a 	bl	8005420 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001976:	d117      	bne.n	80019a8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001986:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800198a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f006 fa19 	bl	8007dc4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fe53 	bl	8005644 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 fd37 	bl	8005420 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d102      	bne.n	80019c4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f001 f8ac 	bl	8002b1c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fd29 	bl	8005420 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d106      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f006 f9d7 	bl	8007d8c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2208      	movs	r2, #8
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fd18 	bl	8005420 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019fa:	d138      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 f8f1 	bl	8005be8 <USB_HC_ReadInterrupt>
 8001a06:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e025      	b.n	8001a5a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d018      	beq.n	8001a54 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a38:	d106      	bne.n	8001a48 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f8b3 	bl	8001bac <HCD_HC_IN_IRQHandler>
 8001a46:	e005      	b.n	8001a54 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fc43 	bl	80022da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3d4      	bcc.n	8001a0e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fcd4 	bl	8005420 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d101      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x1d6>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_HCD_IRQHandler+0x1d8>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d014      	beq.n	8001ab6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0210 	bic.w	r2, r2, #16
 8001a9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 ff91 	bl	80029c4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0210 	orr.w	r2, r2, #16
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	e000      	b.n	8001ab6 <HAL_HCD_IRQHandler+0x206>
      return;
 8001ab4:	bf00      	nop
    }
  }
}
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_HCD_Start+0x16>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e013      	b.n	8001afa <HAL_HCD_Start+0x3e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fbab 	bl	800523a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fde4 	bl	80056b8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_HCD_Stop+0x16>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e00d      	b.n	8001b34 <HAL_HCD_Stop+0x32>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 f9ab 	bl	8005e80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	335c      	adds	r3, #92	; 0x5c
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	334c      	adds	r3, #76	; 0x4c
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fdc4 	bl	800572a <USB_GetCurrentFrame>
 8001ba2:	4603      	mov	r3, r0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d119      	bne.n	8001c10 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2304      	movs	r3, #4
 8001bec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	0151      	lsls	r1, r2, #5
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	440a      	add	r2, r1
 8001c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	60d3      	str	r3, [r2, #12]
 8001c0e:	e095      	b.n	8001d3c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d109      	bne.n	8001c3a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2320      	movs	r3, #32
 8001c36:	6093      	str	r3, [r2, #8]
 8001c38:	e080      	b.n	8001d3c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d134      	bne.n	8001cba <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	0151      	lsls	r1, r2, #5
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	440a      	add	r2, r1
 8001c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	335d      	adds	r3, #93	; 0x5d
 8001c80:	2205      	movs	r2, #5
 8001c82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	461a      	mov	r2, r3
 8001c92:	2310      	movs	r3, #16
 8001c94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 ffa9 	bl	8005c0a <USB_HC_Halt>
 8001cb8:	e040      	b.n	8001d3c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d134      	bne.n	8001d3c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	0151      	lsls	r1, r2, #5
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 ff84 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2310      	movs	r3, #16
 8001d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	335d      	adds	r3, #93	; 0x5d
 8001d24:	2208      	movs	r2, #8
 8001d26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d52:	d122      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	0151      	lsls	r1, r2, #5
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	440a      	add	r2, r1
 8001d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ff43 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	461a      	mov	r2, r3
 8001d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d98:	e29b      	b.n	80022d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	f040 80c1 	bne.w	8001f34 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01b      	beq.n	8001df2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3348      	adds	r3, #72	; 0x48
 8001dca:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	0159      	lsls	r1, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dde:	1ad1      	subs	r1, r2, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4403      	add	r3, r0
 8001dee:	334c      	adds	r3, #76	; 0x4c
 8001df0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	335d      	adds	r3, #93	; 0x5d
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3358      	adds	r3, #88	; 0x58
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	461a      	mov	r2, r3
 8001e28:	2301      	movs	r3, #1
 8001e2a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	333f      	adds	r3, #63	; 0x3f
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	333f      	adds	r3, #63	; 0x3f
 8001e52:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d121      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	0151      	lsls	r1, r2, #5
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	440a      	add	r2, r1
 8001e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fec1 	bl	8005c0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	2310      	movs	r3, #16
 8001e98:	6093      	str	r3, [r2, #8]
 8001e9a:	e034      	b.n	8001f06 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	333f      	adds	r3, #63	; 0x3f
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d129      	bne.n	8001f06 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	0151      	lsls	r1, r2, #5
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	440a      	add	r2, r1
 8001ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ecc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ed0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	335c      	adds	r3, #92	; 0x5c
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	b2d8      	uxtb	r0, r3
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	335c      	adds	r3, #92	; 0x5c
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4601      	mov	r1, r0
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f005 ff6d 	bl	8007de0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	3350      	adds	r3, #80	; 0x50
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f083 0301 	eor.w	r3, r3, #1
 8001f1c:	b2d8      	uxtb	r0, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3350      	adds	r3, #80	; 0x50
 8001f2e:	4602      	mov	r2, r0
 8001f30:	701a      	strb	r2, [r3, #0]
}
 8001f32:	e1ce      	b.n	80022d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	f040 80f1 	bne.w	800212e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	0151      	lsls	r1, r2, #5
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	440a      	add	r2, r1
 8001f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f66:	f023 0302 	bic.w	r3, r3, #2
 8001f6a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	335d      	adds	r3, #93	; 0x5d
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10a      	bne.n	8001f98 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	335c      	adds	r3, #92	; 0x5c
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e0b0      	b.n	80020fa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	335d      	adds	r3, #93	; 0x5d
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d10a      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	335c      	adds	r3, #92	; 0x5c
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e09a      	b.n	80020fa <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	335d      	adds	r3, #93	; 0x5d
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d00a      	beq.n	8001ff0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	335d      	adds	r3, #93	; 0x5d
 8001fea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d156      	bne.n	800209e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3358      	adds	r3, #88	; 0x58
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4403      	add	r3, r0
 8002012:	3358      	adds	r3, #88	; 0x58
 8002014:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3358      	adds	r3, #88	; 0x58
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d914      	bls.n	8002056 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	3358      	adds	r3, #88	; 0x58
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	335c      	adds	r3, #92	; 0x5c
 8002050:	2204      	movs	r2, #4
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e009      	b.n	800206a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	335c      	adds	r3, #92	; 0x5c
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002080:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002088:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02d      	b.n	80020fa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	335d      	adds	r3, #93	; 0x5d
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d122      	bne.n	80020fa <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2202      	movs	r2, #2
 80020c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	2302      	movs	r3, #2
 800210a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	335c      	adds	r3, #92	; 0x5c
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4601      	mov	r1, r0
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f005 fe5a 	bl	8007de0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800212c:	e0d1      	b.n	80022d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d13e      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	440a      	add	r2, r1
 800215a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3358      	adds	r3, #88	; 0x58
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c59      	adds	r1, r3, #1
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4403      	add	r3, r0
 8002186:	3358      	adds	r3, #88	; 0x58
 8002188:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	335d      	adds	r3, #93	; 0x5d
 800219a:	2206      	movs	r2, #6
 800219c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fd2e 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	461a      	mov	r2, r3
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	6093      	str	r3, [r2, #8]
}
 80021c0:	e087      	b.n	80022d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d17c      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	333f      	adds	r3, #63	; 0x3f
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d122      	bne.n	8002234 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	3358      	adds	r3, #88	; 0x58
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	0151      	lsls	r1, r2, #5
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	440a      	add	r2, r1
 8002218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fcec 	bl	8005c0a <USB_HC_Halt>
 8002232:	e045      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	333f      	adds	r3, #63	; 0x3f
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	333f      	adds	r3, #63	; 0x3f
 800225a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800225c:	2b02      	cmp	r3, #2
 800225e:	d12f      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	3358      	adds	r3, #88	; 0x58
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d121      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	335d      	adds	r3, #93	; 0x5d
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	0151      	lsls	r1, r2, #5
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	440a      	add	r2, r1
 80022a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fca5 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2310      	movs	r3, #16
 80022d0:	6093      	str	r3, [r2, #8]
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d119      	bne.n	800233e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	2304      	movs	r3, #4
 800231a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	0151      	lsls	r1, r2, #5
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	440a      	add	r2, r1
 8002332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800233c:	e33e      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d141      	bne.n	80023d8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2320      	movs	r3, #32
 8002364:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	333d      	adds	r3, #61	; 0x3d
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 831f 	bne.w	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	333d      	adds	r3, #61	; 0x3d
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	335c      	adds	r3, #92	; 0x5c
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	0151      	lsls	r1, r2, #5
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fc1a 	bl	8005c0a <USB_HC_Halt>
}
 80023d6:	e2f1      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d13f      	bne.n	800246e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	335d      	adds	r3, #93	; 0x5d
 80023fe:	2204      	movs	r2, #4
 8002400:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	333d      	adds	r3, #61	; 0x3d
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3358      	adds	r3, #88	; 0x58
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	0151      	lsls	r1, r2, #5
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	440a      	add	r2, r1
 8002440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fbd8 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	2340      	movs	r3, #64	; 0x40
 800246a:	6093      	str	r3, [r2, #8]
}
 800246c:	e2a6      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	d122      	bne.n	80024cc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	0151      	lsls	r1, r2, #5
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	440a      	add	r2, r1
 800249c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fbaa 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c8:	6093      	str	r3, [r2, #8]
}
 80024ca:	e277      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d135      	bne.n	800254e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3358      	adds	r3, #88	; 0x58
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	0151      	lsls	r1, r2, #5
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	440a      	add	r2, r1
 800250c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fb72 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	461a      	mov	r2, r3
 8002534:	2301      	movs	r3, #1
 8002536:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	335d      	adds	r3, #93	; 0x5d
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
}
 800254c:	e236      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d12b      	bne.n	80025bc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2308      	movs	r3, #8
 8002574:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	0151      	lsls	r1, r2, #5
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	440a      	add	r2, r1
 800258c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fb32 	bl	8005c0a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	335d      	adds	r3, #93	; 0x5d
 80025b6:	2205      	movs	r2, #5
 80025b8:	701a      	strb	r2, [r3, #0]
}
 80025ba:	e1ff      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d155      	bne.n	800267e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3358      	adds	r3, #88	; 0x58
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	335d      	adds	r3, #93	; 0x5d
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	333d      	adds	r3, #61	; 0x3d
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d114      	bne.n	800263a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	333c      	adds	r3, #60	; 0x3c
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	333d      	adds	r3, #61	; 0x3d
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	0151      	lsls	r1, r2, #5
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	440a      	add	r2, r1
 8002650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fad0 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	461a      	mov	r2, r3
 8002678:	2310      	movs	r3, #16
 800267a:	6093      	str	r3, [r2, #8]
}
 800267c:	e19e      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d12b      	bne.n	80026ec <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 faa3 	bl	8005c0a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	335d      	adds	r3, #93	; 0x5d
 80026d4:	2206      	movs	r2, #6
 80026d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	6093      	str	r3, [r2, #8]
}
 80026ea:	e167      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	d135      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	0151      	lsls	r1, r2, #5
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	440a      	add	r2, r1
 800271a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fa6b 	bl	8005c0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	2310      	movs	r3, #16
 8002744:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	335d      	adds	r3, #93	; 0x5d
 800276a:	2208      	movs	r2, #8
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	e125      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	f040 811a 	bne.w	80029bc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	0151      	lsls	r1, r2, #5
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	440a      	add	r2, r1
 800279e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a2:	f023 0302 	bic.w	r3, r3, #2
 80027a6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	335d      	adds	r3, #93	; 0x5d
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d137      	bne.n	800282e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	335c      	adds	r3, #92	; 0x5c
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	333f      	adds	r3, #63	; 0x3f
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d00b      	beq.n	8002800 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	333f      	adds	r3, #63	; 0x3f
 80027f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	f040 80c5 	bne.w	800298a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	3351      	adds	r3, #81	; 0x51
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2d8      	uxtb	r0, r3
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3351      	adds	r3, #81	; 0x51
 8002828:	4602      	mov	r2, r0
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e0ad      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	335d      	adds	r3, #93	; 0x5d
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d10a      	bne.n	800285a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	335c      	adds	r3, #92	; 0x5c
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e097      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	335d      	adds	r3, #93	; 0x5d
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d10a      	bne.n	8002886 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	335c      	adds	r3, #92	; 0x5c
 8002880:	2202      	movs	r2, #2
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e081      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	335d      	adds	r3, #93	; 0x5d
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d10a      	bne.n	80028b2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	335c      	adds	r3, #92	; 0x5c
 80028ac:	2205      	movs	r2, #5
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e06b      	b.n	800298a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	335d      	adds	r3, #93	; 0x5d
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d00a      	beq.n	80028de <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	335d      	adds	r3, #93	; 0x5d
 80028d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d155      	bne.n	800298a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3358      	adds	r3, #88	; 0x58
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c59      	adds	r1, r3, #1
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4403      	add	r3, r0
 8002900:	3358      	adds	r3, #88	; 0x58
 8002902:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	3358      	adds	r3, #88	; 0x58
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d914      	bls.n	8002944 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3358      	adds	r3, #88	; 0x58
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	335c      	adds	r3, #92	; 0x5c
 800293e:	2204      	movs	r2, #4
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e009      	b.n	8002958 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	335c      	adds	r3, #92	; 0x5c
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800296e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002976:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2302      	movs	r3, #2
 800299a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	b2d8      	uxtb	r0, r3
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	4601      	mov	r1, r0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fa12 	bl	8007de0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	0c5b      	lsrs	r3, r3, #17
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d003      	beq.n	8002a08 <HCD_RXQLVL_IRQHandler+0x44>
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	f000 8082 	beq.w	8002b0a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a06:	e083      	b.n	8002b10 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d07f      	beq.n	8002b0e <HCD_RXQLVL_IRQHandler+0x14a>
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3344      	adds	r3, #68	; 0x44
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d074      	beq.n	8002b0e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	3344      	adds	r3, #68	; 0x44
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f002 fcc5 	bl	80053ce <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3344      	adds	r3, #68	; 0x44
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	18d1      	adds	r1, r2, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4403      	add	r3, r0
 8002a68:	3344      	adds	r3, #68	; 0x44
 8002a6a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	334c      	adds	r3, #76	; 0x4c
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	18d1      	adds	r1, r2, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4403      	add	r3, r0
 8002a90:	334c      	adds	r3, #76	; 0x4c
 8002a92:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HCD_RXQLVL_IRQHandler+0x154>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d031      	beq.n	8002b0e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ac0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3350      	adds	r3, #80	; 0x50
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	f083 0301 	eor.w	r3, r3, #1
 8002af2:	b2d8      	uxtb	r0, r3
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	3350      	adds	r3, #80	; 0x50
 8002b04:	4602      	mov	r2, r0
 8002b06:	701a      	strb	r2, [r3, #0]
      break;
 8002b08:	e001      	b.n	8002b0e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b0e:	bf00      	nop
  }
}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	1ff80000 	.word	0x1ff80000

08002b1c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b48:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d113      	bne.n	8002b7c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10a      	bne.n	8002b74 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b6c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f005 f91a 	bl	8007da8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d147      	bne.n	8002c16 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d129      	bne.n	8002bec <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d113      	bne.n	8002bc8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ba6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002baa:	d106      	bne.n	8002bba <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fd46 	bl	8005644 <USB_InitFSLSPClkSel>
 8002bb8:	e011      	b.n	8002bde <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fd3f 	bl	8005644 <USB_InitFSLSPClkSel>
 8002bc6:	e00a      	b.n	8002bde <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bdc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 f90c 	bl	8007dfc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f005 f8df 	bl	8007da8 <HAL_HCD_Connect_Callback>
 8002bea:	e014      	b.n	8002c16 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f005 f913 	bl	8007e18 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c04:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d103      	bne.n	8002c28 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f043 0320 	orr.w	r3, r3, #32
 8002c26:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e10f      	b.n	8002e6e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f004 fdd0 	bl	8007808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c80:	f001 f9ac 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8002c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4a7b      	ldr	r2, [pc, #492]	; (8002e78 <HAL_I2C_Init+0x23c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d807      	bhi.n	8002ca0 <HAL_I2C_Init+0x64>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a7a      	ldr	r2, [pc, #488]	; (8002e7c <HAL_I2C_Init+0x240>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e006      	b.n	8002cae <HAL_I2C_Init+0x72>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a77      	ldr	r2, [pc, #476]	; (8002e80 <HAL_I2C_Init+0x244>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0db      	b.n	8002e6e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a72      	ldr	r2, [pc, #456]	; (8002e84 <HAL_I2C_Init+0x248>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a64      	ldr	r2, [pc, #400]	; (8002e78 <HAL_I2C_Init+0x23c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d802      	bhi.n	8002cf0 <HAL_I2C_Init+0xb4>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3301      	adds	r3, #1
 8002cee:	e009      	b.n	8002d04 <HAL_I2C_Init+0xc8>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_I2C_Init+0x24c>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	3301      	adds	r3, #1
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4956      	ldr	r1, [pc, #344]	; (8002e78 <HAL_I2C_Init+0x23c>)
 8002d20:	428b      	cmp	r3, r1
 8002d22:	d80d      	bhi.n	8002d40 <HAL_I2C_Init+0x104>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1e59      	subs	r1, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	bf38      	it	cc
 8002d3c:	2304      	movcc	r3, #4
 8002d3e:	e04f      	b.n	8002de0 <HAL_I2C_Init+0x1a4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d111      	bne.n	8002d6c <HAL_I2C_Init+0x130>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e012      	b.n	8002d92 <HAL_I2C_Init+0x156>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	0099      	lsls	r1, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Init+0x15e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e022      	b.n	8002de0 <HAL_I2C_Init+0x1a4>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10e      	bne.n	8002dc0 <HAL_I2C_Init+0x184>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e58      	subs	r0, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	440b      	add	r3, r1
 8002db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	e00f      	b.n	8002de0 <HAL_I2C_Init+0x1a4>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e58      	subs	r0, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	0099      	lsls	r1, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	6809      	ldr	r1, [r1, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6911      	ldr	r1, [r2, #16]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68d2      	ldr	r2, [r2, #12]
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	000186a0 	.word	0x000186a0
 8002e7c:	001e847f 	.word	0x001e847f
 8002e80:	003d08ff 	.word	0x003d08ff
 8002e84:	431bde83 	.word	0x431bde83
 8002e88:	10624dd3 	.word	0x10624dd3

08002e8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e128      	b.n	80030f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a90      	ldr	r2, [pc, #576]	; (80030f8 <HAL_I2S_Init+0x26c>)
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f004 fced 	bl	8007898 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ed4:	f023 030f 	bic.w	r3, r3, #15
 8002ed8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d060      	beq.n	8002fac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e001      	b.n	8002efc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d802      	bhi.n	8002f0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f001 f970 	bl	80041f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f10:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1a:	d125      	bne.n	8002f68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	3305      	adds	r3, #5
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e01f      	b.n	8002f86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	3305      	adds	r3, #5
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e00e      	b.n	8002f86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	461a      	mov	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	3305      	adds	r3, #5
 8002f84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4a5c      	ldr	r2, [pc, #368]	; (80030fc <HAL_I2S_Init+0x270>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	08db      	lsrs	r3, r3, #3
 8002f90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e003      	b.n	8002fb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fac:	2302      	movs	r3, #2
 8002fae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d902      	bls.n	8002fc0 <HAL_I2S_Init+0x134>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2bff      	cmp	r3, #255	; 0xff
 8002fbe:	d907      	bls.n	8002fd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0210 	orr.w	r2, r3, #16
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e08f      	b.n	80030f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	ea42 0103 	orr.w	r1, r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fee:	f023 030f 	bic.w	r3, r3, #15
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6851      	ldr	r1, [r2, #4]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68d2      	ldr	r2, [r2, #12]
 8003000:	4311      	orrs	r1, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6992      	ldr	r2, [r2, #24]
 8003006:	430a      	orrs	r2, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003012:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d161      	bne.n	80030e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a38      	ldr	r2, [pc, #224]	; (8003100 <HAL_I2S_Init+0x274>)
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a37      	ldr	r2, [pc, #220]	; (8003104 <HAL_I2S_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_I2S_Init+0x1a4>
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_I2S_Init+0x27c>)
 800302e:	e001      	b.n	8003034 <HAL_I2S_Init+0x1a8>
 8003030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4932      	ldr	r1, [pc, #200]	; (8003104 <HAL_I2S_Init+0x278>)
 800303c:	428a      	cmp	r2, r1
 800303e:	d101      	bne.n	8003044 <HAL_I2S_Init+0x1b8>
 8003040:	4a31      	ldr	r2, [pc, #196]	; (8003108 <HAL_I2S_Init+0x27c>)
 8003042:	e001      	b.n	8003048 <HAL_I2S_Init+0x1bc>
 8003044:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003048:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800304c:	f023 030f 	bic.w	r3, r3, #15
 8003050:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_I2S_Init+0x278>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_I2S_Init+0x1d4>
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_I2S_Init+0x27c>)
 800305e:	e001      	b.n	8003064 <HAL_I2S_Init+0x1d8>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003064:	2202      	movs	r2, #2
 8003066:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a25      	ldr	r2, [pc, #148]	; (8003104 <HAL_I2S_Init+0x278>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_I2S_Init+0x1ea>
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_I2S_Init+0x27c>)
 8003074:	e001      	b.n	800307a <HAL_I2S_Init+0x1ee>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003086:	d003      	beq.n	8003090 <HAL_I2S_Init+0x204>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e001      	b.n	800309c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	b299      	uxth	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030b2:	4303      	orrs	r3, r0
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	430b      	orrs	r3, r1
 80030b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b29a      	uxth	r2, r3
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <HAL_I2S_Init+0x278>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_I2S_Init+0x24c>
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_I2S_Init+0x27c>)
 80030d6:	e001      	b.n	80030dc <HAL_I2S_Init+0x250>
 80030d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030dc:	897a      	ldrh	r2, [r7, #10]
 80030de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	08003203 	.word	0x08003203
 80030fc:	cccccccd 	.word	0xcccccccd
 8003100:	08003319 	.word	0x08003319
 8003104:	40003800 	.word	0x40003800
 8003108:	40003400 	.word	0x40003400

0800310c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10e      	bne.n	800319c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800318c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffb8 	bl	800310c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	b292      	uxth	r2, r2
 80031b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10e      	bne.n	80031fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff93 	bl	8003120 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b04      	cmp	r3, #4
 800321c:	d13a      	bne.n	8003294 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d109      	bne.n	800323c <I2S_IRQHandler+0x3a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d102      	bne.n	800323c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffb4 	bl	80031a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d126      	bne.n	8003294 <I2S_IRQHandler+0x92>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d11f      	bne.n	8003294 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003262:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff50 	bl	8003134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d136      	bne.n	800330e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d109      	bne.n	80032be <I2S_IRQHandler+0xbc>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d102      	bne.n	80032be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff45 	bl	8003148 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d122      	bne.n	800330e <I2S_IRQHandler+0x10c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d11b      	bne.n	800330e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff13 	bl	8003134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4aa2      	ldr	r2, [pc, #648]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003332:	4ba2      	ldr	r3, [pc, #648]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003334:	e001      	b.n	800333a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a9b      	ldr	r2, [pc, #620]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003350:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003352:	e001      	b.n	8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003364:	d004      	beq.n	8003370 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 8099 	bne.w	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d107      	bne.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f925 	bl	80035d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f9c8 	bl	8003734 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d13a      	bne.n	8003424 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d035      	beq.n	8003424 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7e      	ldr	r2, [pc, #504]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033c2:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033c4:	e001      	b.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4979      	ldr	r1, [pc, #484]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d2:	428b      	cmp	r3, r1
 80033d4:	d101      	bne.n	80033da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033d6:	4b79      	ldr	r3, [pc, #484]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033d8:	e001      	b.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f043 0202 	orr.w	r2, r3, #2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fe88 	bl	8003134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	f040 80be 	bne.w	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80b8 	beq.w	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800344a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a59      	ldr	r2, [pc, #356]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003458:	e001      	b.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800345a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4954      	ldr	r1, [pc, #336]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003466:	428b      	cmp	r3, r1
 8003468:	d101      	bne.n	800346e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800346c:	e001      	b.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003472:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003476:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fe4a 	bl	8003134 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034a0:	e084      	b.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d107      	bne.n	80034bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8be 	bl	8003638 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f8fd 	bl	80036d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b40      	cmp	r3, #64	; 0x40
 80034de:	d12f      	bne.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02a      	beq.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d101      	bne.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003506:	e001      	b.n	800350c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4929      	ldr	r1, [pc, #164]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003514:	428b      	cmp	r3, r1
 8003516:	d101      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800351a:	e001      	b.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003524:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f043 0202 	orr.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fdfa 	bl	8003134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d131      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02c      	beq.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4912      	ldr	r1, [pc, #72]	; (80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800356e:	428b      	cmp	r3, r1
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800357e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800358e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f043 0204 	orr.w	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fdc5 	bl	8003134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035aa:	e000      	b.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ac:	bf00      	nop
}
 80035ae:	bf00      	nop
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40003800 	.word	0x40003800
 80035bc:	40003400 	.word	0x40003400

080035c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c99      	adds	r1, r3, #2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6251      	str	r1, [r2, #36]	; 0x24
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d113      	bne.n	800362e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003614:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ffc9 	bl	80035c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c99      	adds	r1, r3, #2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6251      	str	r1, [r2, #36]	; 0x24
 800364a:	8819      	ldrh	r1, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <I2SEx_TxISR_I2SExt+0x22>
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <I2SEx_TxISR_I2SExt+0x94>)
 8003658:	e001      	b.n	800365e <I2SEx_TxISR_I2SExt+0x26>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	460a      	mov	r2, r1
 8003660:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d121      	bne.n	80036be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <I2SEx_TxISR_I2SExt+0x50>
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <I2SEx_TxISR_I2SExt+0x94>)
 8003686:	e001      	b.n	800368c <I2SEx_TxISR_I2SExt+0x54>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	490d      	ldr	r1, [pc, #52]	; (80036c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d101      	bne.n	800369c <I2SEx_TxISR_I2SExt+0x64>
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <I2SEx_TxISR_I2SExt+0x94>)
 800369a:	e001      	b.n	80036a0 <I2SEx_TxISR_I2SExt+0x68>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff81 	bl	80035c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40003800 	.word	0x40003800
 80036cc:	40003400 	.word	0x40003400

080036d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68d8      	ldr	r0, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	1c99      	adds	r1, r3, #2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036e8:	b282      	uxth	r2, r0
 80036ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d113      	bne.n	800372c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003712:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff4a 	bl	80035c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <I2SEx_RxISR_I2SExt+0x16>
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003748:	e001      	b.n	800374e <I2SEx_RxISR_I2SExt+0x1a>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	68d8      	ldr	r0, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	1c99      	adds	r1, r3, #2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	62d1      	str	r1, [r2, #44]	; 0x2c
 800375a:	b282      	uxth	r2, r0
 800375c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <I2SEx_RxISR_I2SExt+0x90>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <I2SEx_RxISR_I2SExt+0x50>
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003782:	e001      	b.n	8003788 <I2SEx_RxISR_I2SExt+0x54>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	490d      	ldr	r1, [pc, #52]	; (80037c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d101      	bne.n	8003798 <I2SEx_RxISR_I2SExt+0x64>
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003796:	e001      	b.n	800379c <I2SEx_RxISR_I2SExt+0x68>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff03 	bl	80035c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40003800 	.word	0x40003800
 80037c8:	40003400 	.word	0x40003400

080037cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e22d      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d075      	beq.n	80038d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ea:	4ba3      	ldr	r3, [pc, #652]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d00c      	beq.n	8003810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4ba0      	ldr	r3, [pc, #640]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d112      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4b9d      	ldr	r3, [pc, #628]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380e:	d10b      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	4b99      	ldr	r3, [pc, #612]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d157      	bne.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e208      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x74>
 8003832:	4b91      	ldr	r3, [pc, #580]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a90      	ldr	r2, [pc, #576]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x98>
 800384a:	4b8b      	ldr	r3, [pc, #556]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a8a      	ldr	r2, [pc, #552]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a87      	ldr	r2, [pc, #540]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003864:	4b84      	ldr	r3, [pc, #528]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a83      	ldr	r2, [pc, #524]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b81      	ldr	r3, [pc, #516]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a80      	ldr	r2, [pc, #512]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fc fee2 	bl	800064c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800388c:	f7fc fede 	bl	800064c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1cd      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b76      	ldr	r3, [pc, #472]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xc0>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fc fece 	bl	800064c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fc feca 	bl	800064c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1b9      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d063      	beq.n	80039aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b62      	ldr	r3, [pc, #392]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11c      	bne.n	8003934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b5f      	ldr	r3, [pc, #380]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x152>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e18d      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4952      	ldr	r1, [pc, #328]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	e03a      	b.n	80039aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCC_OscConfig+0x2b0>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fc fe83 	bl	800064c <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394a:	f7fc fe7f 	bl	800064c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e16e      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	4b46      	ldr	r3, [pc, #280]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b43      	ldr	r3, [pc, #268]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4940      	ldr	r1, [pc, #256]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_OscConfig+0x2b0>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fc fe62 	bl	800064c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398c:	f7fc fe5e 	bl	800064c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e14d      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d030      	beq.n	8003a18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x2b4>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fc fe42 	bl	800064c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fc fe3e 	bl	800064c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e12d      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x200>
 80039ea:	e015      	b.n	8003a18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCC_OscConfig+0x2b4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fc fe2b 	bl	800064c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fc fe27 	bl	800064c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e116      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a0 	beq.w	8003b66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x2b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d121      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_RCC_OscConfig+0x2b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_RCC_OscConfig+0x2b8>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fc fded 	bl	800064c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e011      	b.n	8003a9a <HAL_RCC_OscConfig+0x2ce>
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	42470000 	.word	0x42470000
 8003a80:	42470e80 	.word	0x42470e80
 8003a84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fc fde0 	bl	800064c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0cf      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCC_OscConfig+0x478>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x2f0>
 8003aae:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a65      	ldr	r2, [pc, #404]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	e01c      	b.n	8003af6 <HAL_RCC_OscConfig+0x32a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x312>
 8003ac4:	4b60      	ldr	r3, [pc, #384]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a5f      	ldr	r2, [pc, #380]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	4b5d      	ldr	r3, [pc, #372]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	e00b      	b.n	8003af6 <HAL_RCC_OscConfig+0x32a>
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a59      	ldr	r2, [pc, #356]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	4b57      	ldr	r3, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a56      	ldr	r2, [pc, #344]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d015      	beq.n	8003b2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fc fda5 	bl	800064c <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fc fda1 	bl	800064c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e08e      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ee      	beq.n	8003b06 <HAL_RCC_OscConfig+0x33a>
 8003b28:	e014      	b.n	8003b54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2a:	f7fc fd8f 	bl	800064c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fc fd8b 	bl	800064c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e078      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	4b3f      	ldr	r3, [pc, #252]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ee      	bne.n	8003b32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d064      	beq.n	8003c38 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d05c      	beq.n	8003c34 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d141      	bne.n	8003c06 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b32      	ldr	r3, [pc, #200]	; (8003c4c <HAL_RCC_OscConfig+0x480>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fc fd60 	bl	800064c <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fc fd5c 	bl	800064c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e04b      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	491d      	ldr	r1, [pc, #116]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <HAL_RCC_OscConfig+0x480>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fc fd35 	bl	800064c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fc fd31 	bl	800064c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e020      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x41a>
 8003c04:	e018      	b.n	8003c38 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_RCC_OscConfig+0x480>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fc fd1e 	bl	800064c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fc fd1a 	bl	800064c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e009      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <HAL_RCC_OscConfig+0x47c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x448>
 8003c32:	e001      	b.n	8003c38 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40007000 	.word	0x40007000
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	42470060 	.word	0x42470060

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0ca      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_ClockConfig+0x1b4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d90c      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <HAL_RCC_ClockConfig+0x1b4>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_RCC_ClockConfig+0x1b4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0b6      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca4:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a57      	ldr	r2, [pc, #348]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cbc:	4b52      	ldr	r3, [pc, #328]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a51      	ldr	r2, [pc, #324]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	494c      	ldr	r1, [pc, #304]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d044      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d119      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07d      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06d      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1e:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e065      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4933      	ldr	r1, [pc, #204]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d40:	f7fc fc84 	bl	800064c <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fc fc80 	bl	800064c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e04d      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 020c 	and.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1eb      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d70:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_ClockConfig+0x1b4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d20c      	bcs.n	8003d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCC_ClockConfig+0x1b4>)
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCC_ClockConfig+0x1b4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e030      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da4:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4915      	ldr	r1, [pc, #84]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	490d      	ldr	r1, [pc, #52]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dd6:	f000 f81d 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
 8003dea:	fa21 f303 	lsr.w	r3, r1, r3
 8003dee:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f7fc fbe6 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023c00 	.word	0x40023c00
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	08008a90 	.word	0x08008a90
 8003e10:	2000002c 	.word	0x2000002c

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d007      	beq.n	8003e46 <HAL_RCC_GetSysClockFreq+0x32>
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d008      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x38>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 80b4 	bne.w	8003fa8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e40:	4b5e      	ldr	r3, [pc, #376]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e42:	60bb      	str	r3, [r7, #8]
       break;
 8003e44:	e0b3      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e46:	4b5e      	ldr	r3, [pc, #376]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e48:	60bb      	str	r3, [r7, #8]
      break;
 8003e4a:	e0b0      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e4c:	4b5a      	ldr	r3, [pc, #360]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e56:	4b58      	ldr	r3, [pc, #352]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04a      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e62:	4b55      	ldr	r3, [pc, #340]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	f04f 0400 	mov.w	r4, #0
 8003e6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	ea03 0501 	and.w	r5, r3, r1
 8003e78:	ea04 0602 	and.w	r6, r4, r2
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	4632      	mov	r2, r6
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	f04f 0400 	mov.w	r4, #0
 8003e88:	0154      	lsls	r4, r2, #5
 8003e8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e8e:	014b      	lsls	r3, r1, #5
 8003e90:	4619      	mov	r1, r3
 8003e92:	4622      	mov	r2, r4
 8003e94:	1b49      	subs	r1, r1, r5
 8003e96:	eb62 0206 	sbc.w	r2, r2, r6
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	f04f 0400 	mov.w	r4, #0
 8003ea2:	0194      	lsls	r4, r2, #6
 8003ea4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ea8:	018b      	lsls	r3, r1, #6
 8003eaa:	1a5b      	subs	r3, r3, r1
 8003eac:	eb64 0402 	sbc.w	r4, r4, r2
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	00e2      	lsls	r2, r4, #3
 8003eba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ebe:	00d9      	lsls	r1, r3, #3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	195b      	adds	r3, r3, r5
 8003ec6:	eb44 0406 	adc.w	r4, r4, r6
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	0262      	lsls	r2, r4, #9
 8003ed4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ed8:	0259      	lsls	r1, r3, #9
 8003eda:	460b      	mov	r3, r1
 8003edc:	4614      	mov	r4, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f04f 0400 	mov.w	r4, #0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	f7fc f9c8 	bl	8000280 <__aeabi_uldivmod>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e049      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef8:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	f04f 0400 	mov.w	r4, #0
 8003f02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	ea03 0501 	and.w	r5, r3, r1
 8003f0e:	ea04 0602 	and.w	r6, r4, r2
 8003f12:	4629      	mov	r1, r5
 8003f14:	4632      	mov	r2, r6
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	f04f 0400 	mov.w	r4, #0
 8003f1e:	0154      	lsls	r4, r2, #5
 8003f20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f24:	014b      	lsls	r3, r1, #5
 8003f26:	4619      	mov	r1, r3
 8003f28:	4622      	mov	r2, r4
 8003f2a:	1b49      	subs	r1, r1, r5
 8003f2c:	eb62 0206 	sbc.w	r2, r2, r6
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	f04f 0400 	mov.w	r4, #0
 8003f38:	0194      	lsls	r4, r2, #6
 8003f3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f3e:	018b      	lsls	r3, r1, #6
 8003f40:	1a5b      	subs	r3, r3, r1
 8003f42:	eb64 0402 	sbc.w	r4, r4, r2
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	00e2      	lsls	r2, r4, #3
 8003f50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f54:	00d9      	lsls	r1, r3, #3
 8003f56:	460b      	mov	r3, r1
 8003f58:	4614      	mov	r4, r2
 8003f5a:	195b      	adds	r3, r3, r5
 8003f5c:	eb44 0406 	adc.w	r4, r4, r6
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	02a2      	lsls	r2, r4, #10
 8003f6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f6e:	0299      	lsls	r1, r3, #10
 8003f70:	460b      	mov	r3, r1
 8003f72:	4614      	mov	r4, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	4621      	mov	r1, r4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f04f 0400 	mov.w	r4, #0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	f7fc f97d 	bl	8000280 <__aeabi_uldivmod>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	3301      	adds	r3, #1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	60bb      	str	r3, [r7, #8]
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003faa:	60bb      	str	r3, [r7, #8]
      break;
 8003fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fae:	68bb      	ldr	r3, [r7, #8]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200

08003fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	2000002c 	.word	0x2000002c

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fe0:	f7ff fff0 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4601      	mov	r1, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0a9b      	lsrs	r3, r3, #10
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff2:	5cd3      	ldrb	r3, [r2, r3]
 8003ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	08008aa0 	.word	0x08008aa0

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004008:	f7ff ffdc 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 800400c:	4601      	mov	r1, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0b5b      	lsrs	r3, r3, #13
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4a03      	ldr	r2, [pc, #12]	; (8004028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40023800 	.word	0x40023800
 8004028:	08008aa0 	.word	0x08008aa0

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004050:	2b00      	cmp	r3, #0
 8004052:	d035      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004054:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800405a:	f7fc faf7 	bl	800064c <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004062:	f7fc faf3 	bl	800064c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0b0      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004074:	4b5b      	ldr	r3, [pc, #364]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	019a      	lsls	r2, r3, #6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	071b      	lsls	r3, r3, #28
 800408c:	4955      	ldr	r1, [pc, #340]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004094:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800409a:	f7fc fad7 	bl	800064c <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040a2:	f7fc fad3 	bl	800064c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e090      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b4:	4b4b      	ldr	r3, [pc, #300]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8083 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	4b44      	ldr	r3, [pc, #272]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a43      	ldr	r2, [pc, #268]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
 80040de:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3e      	ldr	r2, [pc, #248]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040f6:	f7fc faa9 	bl	800064c <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040fe:	f7fc faa5 	bl	800064c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e062      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004110:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004124:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d02f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d028      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004144:	4b29      	ldr	r3, [pc, #164]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004150:	4a24      	ldr	r2, [pc, #144]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d114      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004162:	f7fc fa73 	bl	800064c <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004168:	e00a      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fc fa6f 	bl	800064c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e02a      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ee      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004198:	d10d      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ae:	490d      	ldr	r1, [pc, #52]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]
 80041b4:	e005      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041c0:	6093      	str	r3, [r2, #8]
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ce:	4905      	ldr	r1, [pc, #20]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	42470068 	.word	0x42470068
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40007000 	.word	0x40007000
 80041ec:	42470e40 	.word	0x42470e40

080041f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d13d      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004216:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800421e:	2b01      	cmp	r3, #1
 8004220:	d12f      	bne.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004224:	617b      	str	r3, [r7, #20]
          break;
 8004226:	e02f      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d108      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423e:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e007      	b.n	8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800426e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004272:	0f1b      	lsrs	r3, r3, #28
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
          break;
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
          break;
 8004286:	bf00      	nop
        }
      }
      break;
 8004288:	bf00      	nop
    }
  }
  return frequency;
 800428a:	697b      	ldr	r3, [r7, #20]
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40023800 	.word	0x40023800
 800429c:	00bb8000 	.word	0x00bb8000
 80042a0:	007a1200 	.word	0x007a1200
 80042a4:	00f42400 	.word	0x00f42400

080042a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e056      	b.n	8004368 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f003 fb47 	bl	8007968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	ea42 0103 	orr.w	r1, r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	f003 0104 	and.w	r1, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004356:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e01d      	b.n	80043be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f003 fb2e 	bl	80079f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f000 fa14 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d007      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d122      	bne.n	800446a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d11b      	bne.n	800446a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f06f 0202 	mvn.w	r2, #2
 800443a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f9a5 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004456:	e005      	b.n	8004464 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f997 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9a8 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d122      	bne.n	80044be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d11b      	bne.n	80044be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0204 	mvn.w	r2, #4
 800448e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f97b 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80044aa:	e005      	b.n	80044b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f96d 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f97e 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d122      	bne.n	8004512 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d11b      	bne.n	8004512 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f06f 0208 	mvn.w	r2, #8
 80044e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f951 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80044fe:	e005      	b.n	800450c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f943 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f954 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d122      	bne.n	8004566 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d11b      	bne.n	8004566 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0210 	mvn.w	r2, #16
 8004536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2208      	movs	r2, #8
 800453c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f927 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004552:	e005      	b.n	8004560 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f919 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f92a 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10e      	bne.n	8004592 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d107      	bne.n	8004592 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0201 	mvn.w	r2, #1
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f002 fd45 	bl	800701c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d10e      	bne.n	80045be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d107      	bne.n	80045be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fa98 	bl	8004aee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d10e      	bne.n	80045ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8ef 	bl	80047c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d10e      	bne.n	8004616 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d107      	bne.n	8004616 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0220 	mvn.w	r2, #32
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa62 	bl	8004ada <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_TIM_ConfigClockSource+0x18>
 8004632:	2302      	movs	r3, #2
 8004634:	e0a6      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x166>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004654:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d067      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x120>
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d80b      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x6c>
 8004672:	2b10      	cmp	r3, #16
 8004674:	d073      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x140>
 8004676:	2b10      	cmp	r3, #16
 8004678:	d802      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x62>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d06f      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800467e:	e078      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004680:	2b20      	cmp	r3, #32
 8004682:	d06c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x140>
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d06a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004688:	e073      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800468a:	2b70      	cmp	r3, #112	; 0x70
 800468c:	d00d      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x8c>
 800468e:	2b70      	cmp	r3, #112	; 0x70
 8004690:	d804      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x7e>
 8004692:	2b50      	cmp	r3, #80	; 0x50
 8004694:	d033      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xe0>
 8004696:	2b60      	cmp	r3, #96	; 0x60
 8004698:	d041      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800469a:	e06a      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d066      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0x152>
 80046a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a6:	d017      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80046a8:	e063      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6899      	ldr	r1, [r3, #8]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f000 f9a9 	bl	8004a10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	609a      	str	r2, [r3, #8]
      break;
 80046d6:	e04c      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6899      	ldr	r1, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f000 f992 	bl	8004a10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e039      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 f906 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2150      	movs	r1, #80	; 0x50
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f95f 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800471c:	e029      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 f925 	bl	800497a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2160      	movs	r1, #96	; 0x60
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f94f 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800473c:	e019      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 f8e6 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f93f 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800475c:	e009      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 f936 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800476e:	e000      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a40      	ldr	r2, [pc, #256]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d00f      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3d      	ldr	r2, [pc, #244]	; (80048f4 <TIM_Base_SetConfig+0x118>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3c      	ldr	r2, [pc, #240]	; (80048f8 <TIM_Base_SetConfig+0x11c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <TIM_Base_SetConfig+0x120>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3a      	ldr	r2, [pc, #232]	; (8004900 <TIM_Base_SetConfig+0x124>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d108      	bne.n	800482e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d02b      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483c:	d027      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2c      	ldr	r2, [pc, #176]	; (80048f4 <TIM_Base_SetConfig+0x118>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d023      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2b      	ldr	r2, [pc, #172]	; (80048f8 <TIM_Base_SetConfig+0x11c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01f      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <TIM_Base_SetConfig+0x120>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01b      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a29      	ldr	r2, [pc, #164]	; (8004900 <TIM_Base_SetConfig+0x124>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d017      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a28      	ldr	r2, [pc, #160]	; (8004904 <TIM_Base_SetConfig+0x128>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <TIM_Base_SetConfig+0x12c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00f      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_Base_SetConfig+0x130>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_Base_SetConfig+0x134>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <TIM_Base_SetConfig+0x138>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a23      	ldr	r2, [pc, #140]	; (8004918 <TIM_Base_SetConfig+0x13c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d103      	bne.n	80048dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	615a      	str	r2, [r3, #20]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40010400 	.word	0x40010400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800
 8004910:	40001800 	.word	0x40001800
 8004914:	40001c00 	.word	0x40001c00
 8004918:	40002000 	.word	0x40002000

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0210 	bic.w	r2, r3, #16
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e032      	b.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e03f      	b.n	8004b94 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f002 ff8d 	bl	8007a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2224      	movs	r2, #36	; 0x24
 8004b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f90c 	bl	8004d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	f040 8083 	bne.w	8004cc4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_UART_Transmit+0x2e>
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e07b      	b.n	8004cc6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x40>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e074      	b.n	8004cc6 <HAL_UART_Transmit+0x12a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2221      	movs	r2, #33	; 0x21
 8004bee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bf2:	f7fb fd2b 	bl	800064c <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c04:	e042      	b.n	8004c8c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d122      	bne.n	8004c64 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f850 	bl	8004cce <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e046      	b.n	8004cc6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3302      	adds	r3, #2
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	e017      	b.n	8004c8c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	e013      	b.n	8004c8c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f82d 	bl	8004cce <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e023      	b.n	8004cc6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	60ba      	str	r2, [r7, #8]
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1b7      	bne.n	8004c06 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2140      	movs	r1, #64	; 0x40
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f814 	bl	8004cce <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e00a      	b.n	8004cc6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cde:	e02c      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d028      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8004cee:	f7fb fcad 	bl	800064c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d21d      	bcs.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00f      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d0c3      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004da4:	f023 030c 	bic.w	r3, r3, #12
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	f040 80e4 	bne.w	8004f9c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4aab      	ldr	r2, [pc, #684]	; (8005088 <UART_SetConfig+0x324>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <UART_SetConfig+0x84>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4aaa      	ldr	r2, [pc, #680]	; (800508c <UART_SetConfig+0x328>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d16c      	bne.n	8004ec2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004de8:	f7ff f90c 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004dec:	4602      	mov	r2, r0
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009a      	lsls	r2, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	4aa3      	ldr	r2, [pc, #652]	; (8005090 <UART_SetConfig+0x32c>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	011c      	lsls	r4, r3, #4
 8004e0c:	f7ff f8fa 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009a      	lsls	r2, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e26:	f7ff f8ed 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	4a93      	ldr	r2, [pc, #588]	; (8005090 <UART_SetConfig+0x32c>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2264      	movs	r2, #100	; 0x64
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	1aeb      	subs	r3, r5, r3
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	3332      	adds	r3, #50	; 0x32
 8004e54:	4a8e      	ldr	r2, [pc, #568]	; (8005090 <UART_SetConfig+0x32c>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e62:	441c      	add	r4, r3
 8004e64:	f7ff f8ce 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009a      	lsls	r2, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e7e:	f7ff f8c1 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009a      	lsls	r2, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	4a7d      	ldr	r2, [pc, #500]	; (8005090 <UART_SetConfig+0x32c>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2264      	movs	r2, #100	; 0x64
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	1aeb      	subs	r3, r5, r3
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	3332      	adds	r3, #50	; 0x32
 8004eac:	4a78      	ldr	r2, [pc, #480]	; (8005090 <UART_SetConfig+0x32c>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 0207 	and.w	r2, r3, #7
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4422      	add	r2, r4
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	e154      	b.n	800516c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ec2:	f7ff f88b 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009a      	lsls	r2, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	4a6c      	ldr	r2, [pc, #432]	; (8005090 <UART_SetConfig+0x32c>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	011c      	lsls	r4, r3, #4
 8004ee6:	f7ff f879 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009a      	lsls	r2, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f00:	f7ff f86c 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009a      	lsls	r2, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	4a5d      	ldr	r2, [pc, #372]	; (8005090 <UART_SetConfig+0x32c>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	2264      	movs	r2, #100	; 0x64
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	1aeb      	subs	r3, r5, r3
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	3332      	adds	r3, #50	; 0x32
 8004f2e:	4a58      	ldr	r2, [pc, #352]	; (8005090 <UART_SetConfig+0x32c>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f3c:	441c      	add	r4, r3
 8004f3e:	f7ff f84d 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009a      	lsls	r2, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f58:	f7ff f840 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	4a47      	ldr	r2, [pc, #284]	; (8005090 <UART_SetConfig+0x32c>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	2264      	movs	r2, #100	; 0x64
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
 8004f80:	1aeb      	subs	r3, r5, r3
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	3332      	adds	r3, #50	; 0x32
 8004f86:	4a42      	ldr	r2, [pc, #264]	; (8005090 <UART_SetConfig+0x32c>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	f003 0207 	and.w	r2, r3, #7
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4422      	add	r2, r4
 8004f98:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004f9a:	e0e7      	b.n	800516c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a39      	ldr	r2, [pc, #228]	; (8005088 <UART_SetConfig+0x324>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <UART_SetConfig+0x24c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a38      	ldr	r2, [pc, #224]	; (800508c <UART_SetConfig+0x328>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d171      	bne.n	8005094 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004fb0:	f7ff f828 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	4a31      	ldr	r2, [pc, #196]	; (8005090 <UART_SetConfig+0x32c>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	011c      	lsls	r4, r3, #4
 8004fd4:	f7ff f816 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009a      	lsls	r2, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	fbb2 f5f3 	udiv	r5, r2, r3
 8004fee:	f7ff f809 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009a      	lsls	r2, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <UART_SetConfig+0x32c>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2264      	movs	r2, #100	; 0x64
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	1aeb      	subs	r3, r5, r3
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	3332      	adds	r3, #50	; 0x32
 800501c:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <UART_SetConfig+0x32c>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005028:	441c      	add	r4, r3
 800502a:	f7fe ffeb 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 800502e:	4602      	mov	r2, r0
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009a      	lsls	r2, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	fbb2 f5f3 	udiv	r5, r2, r3
 8005044:	f7fe ffde 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8005048:	4602      	mov	r2, r0
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009a      	lsls	r2, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <UART_SetConfig+0x32c>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	2264      	movs	r2, #100	; 0x64
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	1aeb      	subs	r3, r5, r3
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	3332      	adds	r3, #50	; 0x32
 8005072:	4a07      	ldr	r2, [pc, #28]	; (8005090 <UART_SetConfig+0x32c>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	f003 020f 	and.w	r2, r3, #15
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4422      	add	r2, r4
 8005084:	609a      	str	r2, [r3, #8]
 8005086:	e071      	b.n	800516c <UART_SetConfig+0x408>
 8005088:	40011000 	.word	0x40011000
 800508c:	40011400 	.word	0x40011400
 8005090:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005094:	f7fe ffa2 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005098:	4602      	mov	r2, r0
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009a      	lsls	r2, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	4a31      	ldr	r2, [pc, #196]	; (8005174 <UART_SetConfig+0x410>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	011c      	lsls	r4, r3, #4
 80050b8:	f7fe ff90 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009a      	lsls	r2, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80050d2:	f7fe ff83 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 80050d6:	4602      	mov	r2, r0
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009a      	lsls	r2, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <UART_SetConfig+0x410>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2264      	movs	r2, #100	; 0x64
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	1aeb      	subs	r3, r5, r3
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	3332      	adds	r3, #50	; 0x32
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <UART_SetConfig+0x410>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510c:	441c      	add	r4, r3
 800510e:	f7fe ff65 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005112:	4602      	mov	r2, r0
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009a      	lsls	r2, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	fbb2 f5f3 	udiv	r5, r2, r3
 8005128:	f7fe ff58 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 800512c:	4602      	mov	r2, r0
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009a      	lsls	r2, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <UART_SetConfig+0x410>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	2264      	movs	r2, #100	; 0x64
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	1aeb      	subs	r3, r5, r3
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	3332      	adds	r3, #50	; 0x32
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <UART_SetConfig+0x410>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4422      	add	r2, r4
 8005168:	609a      	str	r2, [r3, #8]
}
 800516a:	e7ff      	b.n	800516c <UART_SetConfig+0x408>
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bdb0      	pop	{r4, r5, r7, pc}
 8005174:	51eb851f 	.word	0x51eb851f

08005178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005178:	b084      	sub	sp, #16
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	f107 001c 	add.w	r0, r7, #28
 8005186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2b01      	cmp	r3, #1
 800518e:	d122      	bne.n	80051d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f94a 	bl	8005464 <USB_CoreReset>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	e01a      	b.n	800520c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f93e 	bl	8005464 <USB_CoreReset>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
 80051fe:	e005      	b.n	800520c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b01      	cmp	r3, #1
 8005210:	d10b      	bne.n	800522a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f043 0206 	orr.w	r2, r3, #6
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005236:	b004      	add	sp, #16
 8005238:	4770      	bx	lr

0800523a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f023 0201 	bic.w	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d106      	bne.n	80052aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]
 80052a8:	e00b      	b.n	80052c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	e001      	b.n	80052c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e003      	b.n	80052ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052c2:	2032      	movs	r0, #50	; 0x32
 80052c4:	f7fb f9ce 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	019b      	lsls	r3, r3, #6
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <USB_FlushTxFifo+0x48>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e006      	b.n	800530e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b20      	cmp	r3, #32
 800530a:	d0f0      	beq.n	80052ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	00030d40 	.word	0x00030d40

08005320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2210      	movs	r2, #16
 8005330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3301      	adds	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a09      	ldr	r2, [pc, #36]	; (8005360 <USB_FlushRxFifo+0x40>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e006      	b.n	8005352 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d0f0      	beq.n	8005332 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	00030d40 	.word	0x00030d40

08005364 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005364:	b480      	push	{r7}
 8005366:	b089      	sub	sp, #36	; 0x24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	460b      	mov	r3, r1
 8005374:	71fb      	strb	r3, [r7, #7]
 8005376:	4613      	mov	r3, r2
 8005378:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11a      	bne.n	80053c0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800538a:	88bb      	ldrh	r3, [r7, #4]
 800538c:	3303      	adds	r3, #3
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	e00f      	b.n	80053b8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	031a      	lsls	r2, r3, #12
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a4:	461a      	mov	r2, r3
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3304      	adds	r3, #4
 80053b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d3eb      	bcc.n	8005398 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b089      	sub	sp, #36	; 0x24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	4613      	mov	r3, r2
 80053da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	3303      	adds	r3, #3
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	e00b      	b.n	800540a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3304      	adds	r3, #4
 8005402:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	3301      	adds	r3, #1
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d3ef      	bcc.n	80053f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3724      	adds	r7, #36	; 0x24
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0301 	and.w	r3, r3, #1
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <USB_CoreReset+0x64>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e01b      	b.n	80054ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	daf2      	bge.n	8005470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <USB_CoreReset+0x64>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e006      	b.n	80054ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d0f0      	beq.n	800549a <USB_CoreReset+0x36>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	00030d40 	.word	0x00030d40

080054cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054cc:	b084      	sub	sp, #16
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	f107 001c 	add.w	r0, r7, #28
 80054da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d018      	beq.n	8005550 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2b03      	cmp	r3, #3
 8005522:	d10a      	bne.n	800553a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005532:	f043 0304 	orr.w	r3, r3, #4
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e014      	b.n	8005564 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005548:	f023 0304 	bic.w	r3, r3, #4
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e009      	b.n	8005564 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800555e:	f023 0304 	bic.w	r3, r3, #4
 8005562:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005564:	2110      	movs	r1, #16
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff feb4 	bl	80052d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fed7 	bl	8005320 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e015      	b.n	80055a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	461a      	mov	r2, r3
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d3e5      	bcc.n	8005578 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80055ac:	2101      	movs	r1, #1
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f882 	bl	80056b8 <USB_DriveVbus>

  HAL_Delay(200U);
 80055b4:	20c8      	movs	r0, #200	; 0xc8
 80055b6:	f7fb f855 	bl	8000664 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a14      	ldr	r2, [pc, #80]	; (8005630 <USB_HostInit+0x164>)
 80055e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a13      	ldr	r2, [pc, #76]	; (8005634 <USB_HostInit+0x168>)
 80055e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80055ea:	e009      	b.n	8005600 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a10      	ldr	r2, [pc, #64]	; (8005638 <USB_HostInit+0x16c>)
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <USB_HostInit+0x170>)
 80055fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d105      	bne.n	8005612 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f043 0210 	orr.w	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <USB_HostInit+0x174>)
 8005618:	4313      	orrs	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800562a:	b004      	add	sp, #16
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	01000200 	.word	0x01000200
 8005634:	00e00300 	.word	0x00e00300
 8005638:	00600080 	.word	0x00600080
 800563c:	004000e0 	.word	0x004000e0
 8005640:	a3200008 	.word	0xa3200008

08005644 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568c:	461a      	mov	r2, r3
 800568e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005692:	6053      	str	r3, [r2, #4]
 8005694:	e009      	b.n	80056aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d106      	bne.n	80056aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a2:	461a      	mov	r2, r3
 80056a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80056a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <USB_DriveVbus+0x44>
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d106      	bne.n	80056fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	d109      	bne.n	800571c <USB_DriveVbus+0x64>
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	b29b      	uxth	r3, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4603      	mov	r3, r0
 800575c:	70fb      	strb	r3, [r7, #3]
 800575e:	460b      	mov	r3, r1
 8005760:	70bb      	strb	r3, [r7, #2]
 8005762:	4613      	mov	r3, r2
 8005764:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005782:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005786:	2b03      	cmp	r3, #3
 8005788:	d87e      	bhi.n	8005888 <USB_HC_Init+0x13c>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <USB_HC_Init+0x44>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a1 	.word	0x080057a1
 8005794:	0800584b 	.word	0x0800584b
 8005798:	080057a1 	.word	0x080057a1
 800579c:	0800580d 	.word	0x0800580d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80057b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da10      	bge.n	80057de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057da:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80057dc:	e057      	b.n	800588e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d051      	beq.n	800588e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005808:	60d3      	str	r3, [r2, #12]
      break;
 800580a:	e040      	b.n	800588e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005818:	461a      	mov	r2, r3
 800581a:	f240 639d 	movw	r3, #1693	; 0x69d
 800581e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005820:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	da34      	bge.n	8005892 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	440a      	add	r2, r1
 800583e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005846:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005848:	e023      	b.n	8005892 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	461a      	mov	r2, r3
 8005858:	f240 2325 	movw	r3, #549	; 0x225
 800585c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800585e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005862:	2b00      	cmp	r3, #0
 8005864:	da17      	bge.n	8005896 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	440a      	add	r2, r1
 800587c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005880:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005884:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005886:	e006      	b.n	8005896 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
      break;
 800588c:	e004      	b.n	8005898 <USB_HC_Init+0x14c>
      break;
 800588e:	bf00      	nop
 8005890:	e002      	b.n	8005898 <USB_HC_Init+0x14c>
      break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <USB_HC_Init+0x14c>
      break;
 8005896:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	2101      	movs	r1, #1
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058b2:	4313      	orrs	r3, r2
 80058b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da03      	bge.n	80058d2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	e001      	b.n	80058d6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80058d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e001      	b.n	80058ea <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ea:	787b      	ldrb	r3, [r7, #1]
 80058ec:	059b      	lsls	r3, r3, #22
 80058ee:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058f2:	78bb      	ldrb	r3, [r7, #2]
 80058f4:	02db      	lsls	r3, r3, #11
 80058f6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005900:	049b      	lsls	r3, r3, #18
 8005902:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005906:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800590a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800590e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	0159      	lsls	r1, r3, #5
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	440b      	add	r3, r1
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005926:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005928:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800592c:	2b03      	cmp	r3, #3
 800592e:	d10f      	bne.n	8005950 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	440a      	add	r2, r1
 8005946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	; 0x30
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800597c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d028      	beq.n	80059dc <USB_HC_StartXfer+0x7c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	791b      	ldrb	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d124      	bne.n	80059dc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <USB_HC_StartXfer+0x50>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	795b      	ldrb	r3, [r3, #5]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d107      	bne.n	80059b0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	4619      	mov	r1, r3
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fa2e 	bl	8005e08 <USB_DoPing>
      return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e112      	b.n	8005bd6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d112      	bne.n	80059dc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80059d4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d018      	beq.n	8005a16 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	8912      	ldrh	r2, [r2, #8]
 80059ec:	4413      	add	r3, r2
 80059ee:	3b01      	subs	r3, #1
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	8912      	ldrh	r2, [r2, #8]
 80059f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059fc:	8b7b      	ldrh	r3, [r7, #26]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d90b      	bls.n	8005a1a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005a02:	8b7b      	ldrh	r3, [r7, #26]
 8005a04:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	8912      	ldrh	r2, [r2, #8]
 8005a0c:	fb02 f203 	mul.w	r2, r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	611a      	str	r2, [r3, #16]
 8005a14:	e001      	b.n	8005a1a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005a16:	2301      	movs	r3, #1
 8005a18:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	78db      	ldrb	r3, [r3, #3]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	8912      	ldrh	r2, [r2, #8]
 8005a28:	fb02 f203 	mul.w	r2, r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a3a:	04d9      	lsls	r1, r3, #19
 8005a3c:	4b68      	ldr	r3, [pc, #416]	; (8005be0 <USB_HC_StartXfer+0x280>)
 8005a3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	7a9b      	ldrb	r3, [r3, #10]
 8005a46:	075b      	lsls	r3, r3, #29
 8005a48:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a4c:	69f9      	ldr	r1, [r7, #28]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	6a39      	ldr	r1, [r7, #32]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	460a      	mov	r2, r1
 8005a74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	7e7b      	ldrb	r3, [r7, #25]
 8005abe:	075b      	lsls	r3, r3, #29
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	0148      	lsls	r0, r1, #5
 8005ac4:	6a39      	ldr	r1, [r7, #32]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a41      	ldr	r2, [pc, #260]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005ae0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ae2:	4b40      	ldr	r3, [pc, #256]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aea:	4a3e      	ldr	r2, [pc, #248]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005aec:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d006      	beq.n	8005b04 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	4a39      	ldr	r2, [pc, #228]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e005      	b.n	8005b10 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b04:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b0c:	4a35      	ldr	r2, [pc, #212]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005b0e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b10:	4b34      	ldr	r3, [pc, #208]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b18:	4a32      	ldr	r2, [pc, #200]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005b1a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b2e      	ldr	r3, [pc, #184]	; (8005be4 <USB_HC_StartXfer+0x284>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d14e      	bne.n	8005bd4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	78db      	ldrb	r3, [r3, #3]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d14a      	bne.n	8005bd4 <USB_HC_StartXfer+0x274>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d046      	beq.n	8005bd4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	79db      	ldrb	r3, [r3, #7]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d830      	bhi.n	8005bb0 <USB_HC_StartXfer+0x250>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <USB_HC_StartXfer+0x1f4>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005b65 	.word	0x08005b65
 8005b60:	08005b89 	.word	0x08005b89
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b6e:	8afa      	ldrh	r2, [r7, #22]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d91c      	bls.n	8005bb4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	619a      	str	r2, [r3, #24]
          }
          break;
 8005b86:	e015      	b.n	8005bb4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b92:	8afa      	ldrh	r2, [r7, #22]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d90a      	bls.n	8005bb8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]
          }
          break;
 8005bae:	e003      	b.n	8005bb8 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <USB_HC_StartXfer+0x25a>
          break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <USB_HC_StartXfer+0x25a>
          break;
 8005bb8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68d9      	ldr	r1, [r3, #12]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	785a      	ldrb	r2, [r3, #1]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	b298      	uxth	r0, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4603      	mov	r3, r0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fbc8 	bl	8005364 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3728      	adds	r7, #40	; 0x28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	1ff80000 	.word	0x1ff80000
 8005be4:	200000b0 	.word	0x200000b0

08005be8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	b29b      	uxth	r3, r3
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	0c9b      	lsrs	r3, r3, #18
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <USB_HC_Halt+0x3a>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d16c      	bne.n	8005d1e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c62:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d143      	bne.n	8005cf8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cdc:	d81d      	bhi.n	8005d1a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf4:	d0ec      	beq.n	8005cd0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cf6:	e080      	b.n	8005dfa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d18:	e06f      	b.n	8005dfa <USB_HC_Halt+0x1f0>
          break;
 8005d1a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d1c:	e06d      	b.n	8005dfa <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d143      	bne.n	8005dd6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dac:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	3301      	adds	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dba:	d81d      	bhi.n	8005df8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd2:	d0ec      	beq.n	8005dae <USB_HC_Halt+0x1a4>
 8005dd4:	e011      	b.n	8005dfa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e000      	b.n	8005dfa <USB_HC_Halt+0x1f0>
          break;
 8005df8:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	04da      	lsls	r2, r3, #19
 8005e24:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <USB_DoPing+0x74>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	461a      	mov	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	1ff80000 	.word	0x1ff80000

08005e80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff f9e3 	bl	800525c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e96:	2110      	movs	r1, #16
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff fa1b 	bl	80052d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fa3e 	bl	8005320 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e01f      	b.n	8005eea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ed0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b0f      	cmp	r3, #15
 8005eee:	d9dc      	bls.n	8005eaa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	e034      	b.n	8005f60 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3301      	adds	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f3c:	d80c      	bhi.n	8005f58 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f54:	d0ec      	beq.n	8005f30 <USB_StopHost+0xb0>
 8005f56:	e000      	b.n	8005f5a <USB_StopHost+0xda>
        break;
 8005f58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d9c7      	bls.n	8005ef6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff f95c 	bl	800523a <USB_EnableGlobalInt>

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af04      	add	r7, sp, #16
 8005f92:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005f94:	2302      	movs	r3, #2
 8005f96:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005f98:	2301      	movs	r3, #1
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fc3a 	bl	8006818 <USBH_FindInterface>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	2bff      	cmp	r3, #255	; 0xff
 8005fac:	f000 812a 	beq.w	8006204 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fc13 	bl	80067e0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005fc0:	2050      	movs	r0, #80	; 0x50
 8005fc2:	f002 f935 	bl	8008230 <malloc>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	211a      	movs	r1, #26
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b25b      	sxtb	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da15      	bge.n	8006018 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	211a      	movs	r1, #26
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	211a      	movs	r1, #26
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	4413      	add	r3, r2
 800600e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 ff9f 	bl	8006f62 <USBH_AllocPipe>
 8006024:	4603      	mov	r3, r0
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	7819      	ldrb	r1, [r3, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	7858      	ldrb	r0, [r3, #1]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	8952      	ldrh	r2, [r2, #10]
 8006044:	9202      	str	r2, [sp, #8]
 8006046:	2203      	movs	r2, #3
 8006048:	9201      	str	r2, [sp, #4]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	4623      	mov	r3, r4
 800604e:	4602      	mov	r2, r0
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 ff57 	bl	8006f04 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2200      	movs	r2, #0
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 f816 	bl	8008090 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006064:	2300      	movs	r3, #0
 8006066:	2200      	movs	r2, #0
 8006068:	210a      	movs	r1, #10
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fbd4 	bl	8006818 <USBH_FindInterface>
 8006070:	4603      	mov	r3, r0
 8006072:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2bff      	cmp	r3, #255	; 0xff
 8006078:	f000 80c4 	beq.w	8006204 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	211a      	movs	r1, #26
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	4413      	add	r3, r2
 8006088:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b25b      	sxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	da16      	bge.n	80060c2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	211a      	movs	r1, #26
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	211a      	movs	r1, #26
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060ba:	881a      	ldrh	r2, [r3, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	835a      	strh	r2, [r3, #26]
 80060c0:	e015      	b.n	80060ee <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	211a      	movs	r1, #26
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	211a      	movs	r1, #26
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	211a      	movs	r1, #26
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	b25b      	sxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	da16      	bge.n	8006134 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	211a      	movs	r1, #26
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	4413      	add	r3, r2
 8006112:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	211a      	movs	r1, #26
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	4413      	add	r3, r2
 8006128:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	835a      	strh	r2, [r3, #26]
 8006132:	e015      	b.n	8006160 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	211a      	movs	r1, #26
 800613a:	fb01 f303 	mul.w	r3, r1, r3
 800613e:	4413      	add	r3, r2
 8006140:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	211a      	movs	r1, #26
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	4413      	add	r3, r2
 8006156:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	7b9b      	ldrb	r3, [r3, #14]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fefb 	bl	8006f62 <USBH_AllocPipe>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	7bdb      	ldrb	r3, [r3, #15]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fef1 	bl	8006f62 <USBH_AllocPipe>
 8006180:	4603      	mov	r3, r0
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	7b59      	ldrb	r1, [r3, #13]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	7b98      	ldrb	r0, [r3, #14]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	8b12      	ldrh	r2, [r2, #24]
 80061a0:	9202      	str	r2, [sp, #8]
 80061a2:	2202      	movs	r2, #2
 80061a4:	9201      	str	r2, [sp, #4]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	4623      	mov	r3, r4
 80061aa:	4602      	mov	r2, r0
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fea9 	bl	8006f04 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	7b19      	ldrb	r1, [r3, #12]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	7bd8      	ldrb	r0, [r3, #15]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	8b52      	ldrh	r2, [r2, #26]
 80061ca:	9202      	str	r2, [sp, #8]
 80061cc:	2202      	movs	r2, #2
 80061ce:	9201      	str	r2, [sp, #4]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	4623      	mov	r3, r4
 80061d4:	4602      	mov	r2, r0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fe94 	bl	8006f04 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	7b5b      	ldrb	r3, [r3, #13]
 80061e8:	2200      	movs	r2, #0
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 ff4f 	bl	8008090 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	7b1b      	ldrb	r3, [r3, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 ff48 	bl	8008090 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bd90      	pop	{r4, r7, pc}

0800620e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fe87 	bl	8006f42 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 feaf 	bl	8006f9e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	7b1b      	ldrb	r3, [r3, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fe74 	bl	8006f42 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	7b1b      	ldrb	r3, [r3, #12]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fe9c 	bl	8006f9e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	7b5b      	ldrb	r3, [r3, #13]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00e      	beq.n	8006292 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	7b5b      	ldrb	r3, [r3, #13]
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fe61 	bl	8006f42 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	7b5b      	ldrb	r3, [r3, #13]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fe89 	bl	8006f9e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 ffca 	bl	8008240 <free>
    phost->pActiveClass->pData = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062b2:	2200      	movs	r2, #0
 80062b4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80062c8:	2302      	movs	r3, #2
 80062ca:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	3340      	adds	r3, #64	; 0x40
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8b2 	bl	8006446 <GetLineCoding>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062f2:	2102      	movs	r1, #2
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
  }
  return status;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006324:	2b04      	cmp	r3, #4
 8006326:	d877      	bhi.n	8006418 <USBH_CDC_Process+0x114>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <USBH_CDC_Process+0x2c>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006345 	.word	0x08006345
 8006334:	0800634b 	.word	0x0800634b
 8006338:	0800637b 	.word	0x0800637b
 800633c:	080063ef 	.word	0x080063ef
 8006340:	080063fd 	.word	0x080063fd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
    break;
 8006348:	e06d      	b.n	8006426 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f897 	bl	8006484 <SetLineCoding>
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006368:	e058      	b.n	800641c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d055      	beq.n	800641c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2204      	movs	r2, #4
 8006374:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006378:	e050      	b.n	800641c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3340      	adds	r3, #64	; 0x40
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f860 	bl	8006446 <GetLineCoding>
 8006386:	4603      	mov	r3, r0
 8006388:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d126      	bne.n	80063de <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	791b      	ldrb	r3, [r3, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d13b      	bne.n	8006420 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d133      	bne.n	8006420 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d12b      	bne.n	8006420 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d124      	bne.n	8006420 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f95a 	bl	8006690 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80063dc:	e020      	b.n	8006420 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d01d      	beq.n	8006420 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2204      	movs	r2, #4
 80063e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80063ec:	e018      	b.n	8006420 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f867 	bl	80064c2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f8dc 	bl	80065b2 <CDC_ProcessReception>
    break;
 80063fa:	e014      	b.n	8006426 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80063fc:	2100      	movs	r1, #0
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fb08 	bl	8006a14 <USBH_ClrFeature>
 8006404:	4603      	mov	r3, r0
 8006406:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006416:	e005      	b.n	8006424 <USBH_CDC_Process+0x120>

  default:
    break;
 8006418:	bf00      	nop
 800641a:	e004      	b.n	8006426 <USBH_CDC_Process+0x122>
    break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <USBH_CDC_Process+0x122>
    break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <USBH_CDC_Process+0x122>
    break;
 8006424:	bf00      	nop

  }

  return status;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	22a1      	movs	r2, #161	; 0xa1
 8006454:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2221      	movs	r2, #33	; 0x21
 800645a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2207      	movs	r2, #7
 800646c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2207      	movs	r2, #7
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 faf1 	bl	8006a5c <USBH_CtlReq>
 800647a:	4603      	mov	r3, r0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2221      	movs	r2, #33	; 0x21
 8006492:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2207      	movs	r2, #7
 80064aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2207      	movs	r2, #7
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fad2 	bl	8006a5c <USBH_CtlReq>
 80064b8:	4603      	mov	r3, r0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af02      	add	r7, sp, #8
 80064c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d002      	beq.n	80064e8 <CDC_ProcessTransmission+0x26>
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d025      	beq.n	8006532 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80064e6:	e060      	b.n	80065aa <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	8b12      	ldrh	r2, [r2, #24]
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d90c      	bls.n	800650e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	69d9      	ldr	r1, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8b1a      	ldrh	r2, [r3, #24]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	7b58      	ldrb	r0, [r3, #13]
 8006500:	2301      	movs	r3, #1
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	4603      	mov	r3, r0
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fcb9 	bl	8006e7e <USBH_BulkSendData>
 800650c:	e00c      	b.n	8006528 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	7b58      	ldrb	r0, [r3, #13]
 800651c:	2301      	movs	r3, #1
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	4603      	mov	r3, r0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fcab 	bl	8006e7e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006530:	e03b      	b.n	80065aa <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7b5b      	ldrb	r3, [r3, #13]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fd7f 	bl	800803c <USBH_LL_GetURBState>
 800653e:	4603      	mov	r3, r0
 8006540:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d128      	bne.n	800659a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	8b12      	ldrh	r2, [r2, #24]
 8006550:	4293      	cmp	r3, r2
 8006552:	d90e      	bls.n	8006572 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	8b12      	ldrh	r2, [r2, #24]
 800655c:	1a9a      	subs	r2, r3, r2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	8b12      	ldrh	r2, [r2, #24]
 800656a:	441a      	add	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	61da      	str	r2, [r3, #28]
 8006570:	e002      	b.n	8006578 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006588:	e00e      	b.n	80065a8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f868 	bl	8006668 <USBH_CDC_TransmitCallback>
    break;
 8006598:	e006      	b.n	80065a8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	2b02      	cmp	r3, #2
 800659e:	d103      	bne.n	80065a8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80065a8:	bf00      	nop
  }
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d002      	beq.n	80065d8 <CDC_ProcessReception+0x26>
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00e      	beq.n	80065f4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80065d6:	e043      	b.n	8006660 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	6a19      	ldr	r1, [r3, #32]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	8b5a      	ldrh	r2, [r3, #26]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	7b1b      	ldrb	r3, [r3, #12]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc6f 	bl	8006ec8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2204      	movs	r2, #4
 80065ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80065f2:	e035      	b.n	8006660 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	7b1b      	ldrb	r3, [r3, #12]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fd1e 	bl	800803c <USBH_LL_GetURBState>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d129      	bne.n	800665e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	7b1b      	ldrb	r3, [r3, #12]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fc81 	bl	8007f18 <USBH_LL_GetLastXferSize>
 8006616:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d016      	beq.n	8006650 <CDC_ProcessReception+0x9e>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	8b5b      	ldrh	r3, [r3, #26]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4293      	cmp	r3, r2
 800662c:	d910      	bls.n	8006650 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6a1a      	ldr	r2, [r3, #32]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	441a      	add	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800664e:	e006      	b.n	800665e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f80f 	bl	800667c <USBH_CDC_ReceiveCallback>
    break;
 800665e:	bf00      	nop
  }
}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066b8:	2302      	movs	r3, #2
 80066ba:	e019      	b.n	80066f0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	79fa      	ldrb	r2, [r7, #7]
 80066c0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f80f 	bl	80066f8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f001 fba3 	bl	8007e34 <USBH_LL_Init>

  return USBH_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006704:	e008      	b.n	8006718 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	32e0      	adds	r2, #224	; 0xe0
 800670c:	2100      	movs	r1, #0
 800670e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b0e      	cmp	r3, #14
 800671c:	d9f3      	bls.n	8006706 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e009      	b.n	8006738 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800672e:	2200      	movs	r2, #0
 8006730:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800673e:	d3f1      	bcc.n	8006724 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2240      	movs	r2, #64	; 0x40
 8006764:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d017      	beq.n	80067ce <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10f      	bne.n	80067c8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	33dc      	adds	r3, #220	; 0xdc
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
 80067c6:	e004      	b.n	80067d2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067c8:	2302      	movs	r3, #2
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	e001      	b.n	80067d2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067ce:	2302      	movs	r3, #2
 80067d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d204      	bcs.n	8006806 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006804:	e001      	b.n	800680a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006806:	2302      	movs	r3, #2
 8006808:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	70fb      	strb	r3, [r7, #3]
 800682a:	460b      	mov	r3, r1
 800682c:	70bb      	strb	r3, [r7, #2]
 800682e:	4613      	mov	r3, r2
 8006830:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006840:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006842:	e025      	b.n	8006890 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	221a      	movs	r2, #26
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	3308      	adds	r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	3302      	adds	r3, #2
 8006854:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	795b      	ldrb	r3, [r3, #5]
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	429a      	cmp	r2, r3
 800685e:	d002      	beq.n	8006866 <USBH_FindInterface+0x4e>
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	2bff      	cmp	r3, #255	; 0xff
 8006864:	d111      	bne.n	800688a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800686a:	78ba      	ldrb	r2, [r7, #2]
 800686c:	429a      	cmp	r2, r3
 800686e:	d002      	beq.n	8006876 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006870:	78bb      	ldrb	r3, [r7, #2]
 8006872:	2bff      	cmp	r3, #255	; 0xff
 8006874:	d109      	bne.n	800688a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800687a:	787a      	ldrb	r2, [r7, #1]
 800687c:	429a      	cmp	r2, r3
 800687e:	d002      	beq.n	8006886 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006880:	787b      	ldrb	r3, [r7, #1]
 8006882:	2bff      	cmp	r3, #255	; 0xff
 8006884:	d101      	bne.n	800688a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	e006      	b.n	8006898 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	3301      	adds	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d9d6      	bls.n	8006844 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006896:	23ff      	movs	r3, #255	; 0xff
}
 8006898:	4618      	mov	r0, r3
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fafd 	bl	8007eac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80068b2:	2101      	movs	r1, #1
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fbd4 	bl	8008062 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f804 	bl	8006906 <USBH_HandleSof>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b0b      	cmp	r3, #11
 8006916:	d10a      	bne.n	800692e <USBH_HandleSof+0x28>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
  }
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006946:	bf00      	nop
}
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006962:	bf00      	nop
}
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10f      	bne.n	80069a0 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006998:	2104      	movs	r1, #4
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
 800699e:	e007      	b.n	80069b0 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d102      	bne.n	80069b0 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fa8d 	bl	8007ee2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	791b      	ldrb	r3, [r3, #4]
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fae5 	bl	8006f9e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	795b      	ldrb	r3, [r3, #5]
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fadf 	bl	8006f9e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069f8:	2105      	movs	r1, #5
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 fa54 	bl	8007eac <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2203      	movs	r2, #3
 8006a08:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d10f      	bne.n	8006a48 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f805 	bl	8006a5c <USBH_CtlReq>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d002      	beq.n	8006a7c <USBH_CtlReq+0x20>
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d00f      	beq.n	8006a9a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006a7a:	e034      	b.n	8006ae6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2202      	movs	r2, #2
 8006a92:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006a94:	2301      	movs	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
    break;
 8006a98:	e025      	b.n	8006ae6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f828 	bl	8006af0 <USBH_HandleControl>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d108      	bne.n	8006abc <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]
    break;
 8006aba:	e013      	b.n	8006ae4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d108      	bne.n	8006ad4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	75fb      	strb	r3, [r7, #23]
    break;
 8006ad2:	e007      	b.n	8006ae4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d104      	bne.n	8006ae4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	75fb      	strb	r3, [r7, #23]
    break;
 8006ae4:	bf00      	nop
  }
  return status;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7e1b      	ldrb	r3, [r3, #24]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	2b0a      	cmp	r3, #10
 8006b08:	f200 814c 	bhi.w	8006da4 <USBH_HandleControl+0x2b4>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <USBH_HandleControl+0x24>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b41 	.word	0x08006b41
 8006b18:	08006b5b 	.word	0x08006b5b
 8006b1c:	08006bc5 	.word	0x08006bc5
 8006b20:	08006beb 	.word	0x08006beb
 8006b24:	08006c23 	.word	0x08006c23
 8006b28:	08006c4f 	.word	0x08006c4f
 8006b2c:	08006ca1 	.word	0x08006ca1
 8006b30:	08006cc3 	.word	0x08006cc3
 8006b34:	08006cff 	.word	0x08006cff
 8006b38:	08006d27 	.word	0x08006d27
 8006b3c:	08006d65 	.word	0x08006d65
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f103 0110 	add.w	r1, r3, #16
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	795b      	ldrb	r3, [r3, #5]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f939 	bl	8006dc4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	761a      	strb	r2, [r3, #24]
    break;
 8006b58:	e12f      	b.n	8006dba <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fa6b 	bl	800803c <USBH_LL_GetURBState>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d11e      	bne.n	8006bae <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7c1b      	ldrb	r3, [r3, #16]
 8006b74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b78:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8adb      	ldrh	r3, [r3, #22]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006b82:	7b7b      	ldrb	r3, [r7, #13]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d103      	bne.n	8006b90 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b8e:	e10b      	b.n	8006da8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2205      	movs	r2, #5
 8006b94:	761a      	strb	r2, [r3, #24]
    break;
 8006b96:	e107      	b.n	8006da8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006b98:	7b7b      	ldrb	r3, [r7, #13]
 8006b9a:	2b80      	cmp	r3, #128	; 0x80
 8006b9c:	d103      	bne.n	8006ba6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2209      	movs	r2, #9
 8006ba2:	761a      	strb	r2, [r3, #24]
    break;
 8006ba4:	e100      	b.n	8006da8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2207      	movs	r2, #7
 8006baa:	761a      	strb	r2, [r3, #24]
    break;
 8006bac:	e0fc      	b.n	8006da8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d003      	beq.n	8006bbc <USBH_HandleControl+0xcc>
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	f040 80f6 	bne.w	8006da8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	220b      	movs	r2, #11
 8006bc0:	761a      	strb	r2, [r3, #24]
    break;
 8006bc2:	e0f1      	b.n	8006da8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6899      	ldr	r1, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	899a      	ldrh	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	791b      	ldrb	r3, [r3, #4]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f930 	bl	8006e42 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2204      	movs	r2, #4
 8006be6:	761a      	strb	r2, [r3, #24]
    break;
 8006be8:	e0e7      	b.n	8006dba <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	791b      	ldrb	r3, [r3, #4]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fa23 	bl	800803c <USBH_LL_GetURBState>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d102      	bne.n	8006c06 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2209      	movs	r2, #9
 8006c04:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b05      	cmp	r3, #5
 8006c0a:	d102      	bne.n	8006c12 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c10:	e0cc      	b.n	8006dac <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	f040 80c9 	bne.w	8006dac <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	220b      	movs	r2, #11
 8006c1e:	761a      	strb	r2, [r3, #24]
    break;
 8006c20:	e0c4      	b.n	8006dac <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6899      	ldr	r1, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	899a      	ldrh	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7958      	ldrb	r0, [r3, #5]
 8006c2e:	2301      	movs	r3, #1
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4603      	mov	r3, r0
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8df 	bl	8006df8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2206      	movs	r2, #6
 8006c4a:	761a      	strb	r2, [r3, #24]
    break;
 8006c4c:	e0b5      	b.n	8006dba <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	795b      	ldrb	r3, [r3, #5]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 f9f1 	bl	800803c <USBH_LL_GetURBState>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d103      	bne.n	8006c6c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2207      	movs	r2, #7
 8006c68:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c6a:	e0a1      	b.n	8006db0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d105      	bne.n	8006c7e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	220c      	movs	r2, #12
 8006c76:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7c:	e098      	b.n	8006db0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d103      	bne.n	8006c8c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2205      	movs	r2, #5
 8006c88:	761a      	strb	r2, [r3, #24]
    break;
 8006c8a:	e091      	b.n	8006db0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	f040 808e 	bne.w	8006db0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	220b      	movs	r2, #11
 8006c98:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c9e:	e087      	b.n	8006db0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	791b      	ldrb	r3, [r3, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f8ca 	bl	8006e42 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	761a      	strb	r2, [r3, #24]

    break;
 8006cc0:	e07b      	b.n	8006dba <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	791b      	ldrb	r3, [r3, #4]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 f9b7 	bl	800803c <USBH_LL_GetURBState>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	220d      	movs	r2, #13
 8006cdc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ce2:	e067      	b.n	8006db4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d103      	bne.n	8006cf2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	220b      	movs	r2, #11
 8006cee:	761a      	strb	r2, [r3, #24]
    break;
 8006cf0:	e060      	b.n	8006db4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b05      	cmp	r3, #5
 8006cf6:	d15d      	bne.n	8006db4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006cfc:	e05a      	b.n	8006db4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	795a      	ldrb	r2, [r3, #5]
 8006d02:	2301      	movs	r3, #1
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	4613      	mov	r3, r2
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f873 	bl	8006df8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	220a      	movs	r2, #10
 8006d22:	761a      	strb	r2, [r3, #24]
    break;
 8006d24:	e049      	b.n	8006dba <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	795b      	ldrb	r3, [r3, #5]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f985 	bl	800803c <USBH_LL_GetURBState>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d105      	bne.n	8006d48 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	220d      	movs	r2, #13
 8006d44:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006d46:	e037      	b.n	8006db8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d103      	bne.n	8006d56 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2209      	movs	r2, #9
 8006d52:	761a      	strb	r2, [r3, #24]
    break;
 8006d54:	e030      	b.n	8006db8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d12d      	bne.n	8006db8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	220b      	movs	r2, #11
 8006d60:	761a      	strb	r2, [r3, #24]
    break;
 8006d62:	e029      	b.n	8006db8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7e5b      	ldrb	r3, [r3, #25]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	765a      	strb	r2, [r3, #25]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7e5b      	ldrb	r3, [r3, #25]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d809      	bhi.n	8006d8c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f8b2 	bl	8007ee2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006d8a:	e016      	b.n	8006dba <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d92:	2106      	movs	r1, #6
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	73fb      	strb	r3, [r7, #15]
    break;
 8006da2:	e00a      	b.n	8006dba <USBH_HandleControl+0x2ca>

  default:
    break;
 8006da4:	bf00      	nop
 8006da6:	e008      	b.n	8006dba <USBH_HandleControl+0x2ca>
    break;
 8006da8:	bf00      	nop
 8006daa:	e006      	b.n	8006dba <USBH_HandleControl+0x2ca>
    break;
 8006dac:	bf00      	nop
 8006dae:	e004      	b.n	8006dba <USBH_HandleControl+0x2ca>
    break;
 8006db0:	bf00      	nop
 8006db2:	e002      	b.n	8006dba <USBH_HandleControl+0x2ca>
    break;
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <USBH_HandleControl+0x2ca>
    break;
 8006db8:	bf00      	nop
  }
  return status;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af04      	add	r7, sp, #16
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006dd2:	79f9      	ldrb	r1, [r7, #7]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9303      	str	r3, [sp, #12]
 8006dd8:	2308      	movs	r3, #8
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	2300      	movs	r3, #0
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	2200      	movs	r2, #0
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 f8f6 	bl	8007fda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af04      	add	r7, sp, #16
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	460b      	mov	r3, r1
 8006e08:	80fb      	strh	r3, [r7, #6]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e1c:	7979      	ldrb	r1, [r7, #5]
 8006e1e:	7e3b      	ldrb	r3, [r7, #24]
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f001 f8d1 	bl	8007fda <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b088      	sub	sp, #32
 8006e46:	af04      	add	r7, sp, #16
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	460b      	mov	r3, r1
 8006e52:	80fb      	strh	r3, [r7, #6]
 8006e54:	4613      	mov	r3, r2
 8006e56:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006e58:	7979      	ldrb	r1, [r7, #5]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	2301      	movs	r3, #1
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f001 f8b3 	bl	8007fda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006e74:	2300      	movs	r3, #0

}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b088      	sub	sp, #32
 8006e82:	af04      	add	r7, sp, #16
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	80fb      	strh	r3, [r7, #6]
 8006e90:	4613      	mov	r3, r2
 8006e92:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ea2:	7979      	ldrb	r1, [r7, #5]
 8006ea4:	7e3b      	ldrb	r3, [r7, #24]
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 f88e 	bl	8007fda <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	80fb      	strh	r3, [r7, #6]
 8006eda:	4613      	mov	r3, r2
 8006edc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ede:	7979      	ldrb	r1, [r7, #5]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9303      	str	r3, [sp, #12]
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	9302      	str	r3, [sp, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	2301      	movs	r3, #1
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f001 f870 	bl	8007fda <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af04      	add	r7, sp, #16
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	70fb      	strb	r3, [r7, #3]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70bb      	strb	r3, [r7, #2]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006f1e:	7878      	ldrb	r0, [r7, #1]
 8006f20:	78ba      	ldrb	r2, [r7, #2]
 8006f22:	78f9      	ldrb	r1, [r7, #3]
 8006f24:	8b3b      	ldrh	r3, [r7, #24]
 8006f26:	9302      	str	r3, [sp, #8]
 8006f28:	7d3b      	ldrb	r3, [r7, #20]
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	7c3b      	ldrb	r3, [r7, #16]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	4603      	mov	r3, r0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f803 	bl	8007f3e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006f38:	2300      	movs	r3, #0

}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 f822 	bl	8007f9c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006f58:	2300      	movs	r3, #0

}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f831 	bl	8006fd6 <USBH_GetFreePipe>
 8006f74:	4603      	mov	r3, r0
 8006f76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d007      	beq.n	8006f92 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	89fa      	ldrh	r2, [r7, #14]
 8006f86:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	32e0      	adds	r2, #224	; 0xe0
 8006f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006f92:	89fb      	ldrh	r3, [r7, #14]
 8006f94:	b2db      	uxtb	r3, r3
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	2b0a      	cmp	r3, #10
 8006fae:	d80b      	bhi.n	8006fc8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32e0      	adds	r2, #224	; 0xe0
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	78fa      	ldrb	r2, [r7, #3]
 8006fbc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32e0      	adds	r2, #224	; 0xe0
 8006fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
 8006fe6:	e00e      	b.n	8007006 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006fe8:	7bfa      	ldrb	r2, [r7, #15]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	32e0      	adds	r2, #224	; 0xe0
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	e007      	b.n	8007010 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	3301      	adds	r3, #1
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	2b0a      	cmp	r3, #10
 800700a:	d9ed      	bls.n	8006fe8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800700c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIM_PeriodElapsedCallback>:
int check = 0;
int serial =0;
float max = 5000;
float min = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

	float pwm = (1 - ((max-serial)/(max-min))) * 100;
 8007024:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8007026:	ed93 7a00 	vldr	s14, [r3]
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007036:	ee77 6a67 	vsub.f32	s13, s14, s15
 800703a:	4b1f      	ldr	r3, [pc, #124]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800703c:	ed93 7a00 	vldr	s14, [r3]
 8007040:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8007042:	edd3 7a00 	vldr	s15, [r3]
 8007046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800704a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007056:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80070c4 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800705a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800705e:	edc7 7a03 	vstr	s15, [r7, #12]
	lightPow = pwm;
 8007062:	edd7 7a03 	vldr	s15, [r7, #12]
 8007066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800706a:	ee17 2a90 	vmov	r2, s15
 800706e:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8007070:	601a      	str	r2, [r3, #0]
		if(cnt<=lightPow){
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	dc06      	bgt.n	800708c <HAL_TIM_PeriodElapsedCallback+0x70>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800707e:	2201      	movs	r2, #1
 8007080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007084:	4812      	ldr	r0, [pc, #72]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007086:	f7fa f975 	bl	8001374 <HAL_GPIO_WritePin>
 800708a:	e005      	b.n	8007098 <HAL_TIM_PeriodElapsedCallback+0x7c>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800708c:	2200      	movs	r2, #0
 800708e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007092:	480f      	ldr	r0, [pc, #60]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007094:	f7fa f96e 	bl	8001374 <HAL_GPIO_WritePin>
		}
	if(cnt == 100){
 8007098:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b64      	cmp	r3, #100	; 0x64
 800709e:	d102      	bne.n	80070a6 <HAL_TIM_PeriodElapsedCallback+0x8a>
		cnt = 0;
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
	}

	cnt++;
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	4a07      	ldr	r2, [pc, #28]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80070ae:	6013      	str	r3, [r2, #0]


}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000028 	.word	0x20000028
 80070bc:	200000bc 	.word	0x200000bc
 80070c0:	200000c0 	.word	0x200000c0
 80070c4:	42c80000 	.word	0x42c80000
 80070c8:	200000b8 	.word	0x200000b8
 80070cc:	200000b4 	.word	0x200000b4
 80070d0:	40020c00 	.word	0x40020c00

080070d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070da:	f7f9 fa51 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070de:	f000 f843 	bl	8007168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070e2:	f000 fa1f 	bl	8007524 <MX_GPIO_Init>
  MX_I2C1_Init();
 80070e6:	f000 f913 	bl	8007310 <MX_I2C1_Init>
  MX_I2S3_Init();
 80070ea:	f000 f93f 	bl	800736c <MX_I2S3_Init>
  MX_SPI1_Init();
 80070ee:	f000 f96d 	bl	80073cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80070f2:	f000 fd95 	bl	8007c20 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80070f6:	f000 f99f 	bl	8007438 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80070fa:	f000 f9e9 	bl	80074d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80070fe:	f000 f8b5 	bl	800726c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8007102:	4814      	ldr	r0, [pc, #80]	; (8007154 <main+0x80>)
 8007104:	f7fd f95f 	bl	80043c6 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8007108:	4813      	ldr	r0, [pc, #76]	; (8007158 <main+0x84>)
 800710a:	f7f9 fb11 	bl	8000730 <HAL_ADC_Start>
	      if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800710e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007112:	4811      	ldr	r0, [pc, #68]	; (8007158 <main+0x84>)
 8007114:	f7f9 fbd2 	bl	80008bc <HAL_ADC_PollForConversion>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f4      	bne.n	8007108 <main+0x34>
	      	serial = HAL_ADC_GetValue(&hadc1);
 800711e:	480e      	ldr	r0, [pc, #56]	; (8007158 <main+0x84>)
 8007120:	f7f9 fc50 	bl	80009c4 <HAL_ADC_GetValue>
 8007124:	4603      	mov	r3, r0
 8007126:	461a      	mov	r2, r3
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <main+0x88>)
 800712a:	601a      	str	r2, [r3, #0]
	      	char pData[20];
	      	sprintf(pData, "%d\n\r",serial);
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <main+0x88>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	1d3b      	adds	r3, r7, #4
 8007132:	490b      	ldr	r1, [pc, #44]	; (8007160 <main+0x8c>)
 8007134:	4618      	mov	r0, r3
 8007136:	f001 f94b 	bl	80083d0 <siprintf>
	      	HAL_UART_Transmit(&huart2, pData, strlen(pData), 1000);
 800713a:	1d3b      	adds	r3, r7, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7f9 f847 	bl	80001d0 <strlen>
 8007142:	4603      	mov	r3, r0
 8007144:	b29a      	uxth	r2, r3
 8007146:	1d39      	adds	r1, r7, #4
 8007148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800714c:	4805      	ldr	r0, [pc, #20]	; (8007164 <main+0x90>)
 800714e:	f7fd fd25 	bl	8004b9c <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8007152:	e7d9      	b.n	8007108 <main+0x34>
 8007154:	2000012c 	.word	0x2000012c
 8007158:	2000016c 	.word	0x2000016c
 800715c:	200000bc 	.word	0x200000bc
 8007160:	08008a88 	.word	0x08008a88
 8007164:	2000020c 	.word	0x2000020c

08007168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b098      	sub	sp, #96	; 0x60
 800716c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800716e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007172:	2230      	movs	r2, #48	; 0x30
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f001 f86a 	bl	8008250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800717c:	f107 031c 	add.w	r3, r7, #28
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	609a      	str	r2, [r3, #8]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <SystemClock_Config+0xfc>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	4a30      	ldr	r2, [pc, #192]	; (8007264 <SystemClock_Config+0xfc>)
 80071a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a8:	6413      	str	r3, [r2, #64]	; 0x40
 80071aa:	4b2e      	ldr	r3, [pc, #184]	; (8007264 <SystemClock_Config+0xfc>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071b6:	2300      	movs	r3, #0
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <SystemClock_Config+0x100>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <SystemClock_Config+0x100>)
 80071c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	4b28      	ldr	r3, [pc, #160]	; (8007268 <SystemClock_Config+0x100>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071dc:	2302      	movs	r3, #2
 80071de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80071e6:	2308      	movs	r3, #8
 80071e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80071ea:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80071ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80071f0:	2302      	movs	r3, #2
 80071f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80071f4:	2307      	movs	r3, #7
 80071f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fc fae5 	bl	80037cc <HAL_RCC_OscConfig>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007208:	f000 fa8a 	bl	8007720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800720c:	230f      	movs	r3, #15
 800720e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007210:	2302      	movs	r3, #2
 8007212:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007214:	2300      	movs	r3, #0
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800721e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007224:	f107 031c 	add.w	r3, r7, #28
 8007228:	2105      	movs	r1, #5
 800722a:	4618      	mov	r0, r3
 800722c:	f7fc fd10 	bl	8003c50 <HAL_RCC_ClockConfig>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007236:	f000 fa73 	bl	8007720 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800723a:	2301      	movs	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800723e:	23c0      	movs	r3, #192	; 0xc0
 8007240:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007242:	2302      	movs	r3, #2
 8007244:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4618      	mov	r0, r3
 800724c:	f7fc feee 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007256:	f000 fa63 	bl	8007720 <Error_Handler>
  }
}
 800725a:	bf00      	nop
 800725c:	3760      	adds	r7, #96	; 0x60
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800
 8007268:	40007000 	.word	0x40007000

0800726c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007272:	463b      	mov	r3, r7
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <MX_ADC1_Init+0x98>)
 8007280:	4a21      	ldr	r2, [pc, #132]	; (8007308 <MX_ADC1_Init+0x9c>)
 8007282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <MX_ADC1_Init+0x98>)
 8007286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800728a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800728c:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <MX_ADC1_Init+0x98>)
 800728e:	2200      	movs	r2, #0
 8007290:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <MX_ADC1_Init+0x98>)
 8007294:	2200      	movs	r2, #0
 8007296:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <MX_ADC1_Init+0x98>)
 800729a:	2200      	movs	r2, #0
 800729c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800729e:	4b19      	ldr	r3, [pc, #100]	; (8007304 <MX_ADC1_Init+0x98>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <MX_ADC1_Init+0x98>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80072ac:	4b15      	ldr	r3, [pc, #84]	; (8007304 <MX_ADC1_Init+0x98>)
 80072ae:	4a17      	ldr	r2, [pc, #92]	; (800730c <MX_ADC1_Init+0xa0>)
 80072b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80072b2:	4b14      	ldr	r3, [pc, #80]	; (8007304 <MX_ADC1_Init+0x98>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80072b8:	4b12      	ldr	r3, [pc, #72]	; (8007304 <MX_ADC1_Init+0x98>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80072be:	4b11      	ldr	r3, [pc, #68]	; (8007304 <MX_ADC1_Init+0x98>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <MX_ADC1_Init+0x98>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80072cc:	480d      	ldr	r0, [pc, #52]	; (8007304 <MX_ADC1_Init+0x98>)
 80072ce:	f7f9 f9eb 	bl	80006a8 <HAL_ADC_Init>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80072d8:	f000 fa22 	bl	8007720 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80072dc:	2301      	movs	r3, #1
 80072de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80072e0:	2301      	movs	r3, #1
 80072e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072e8:	463b      	mov	r3, r7
 80072ea:	4619      	mov	r1, r3
 80072ec:	4805      	ldr	r0, [pc, #20]	; (8007304 <MX_ADC1_Init+0x98>)
 80072ee:	f7f9 fb77 	bl	80009e0 <HAL_ADC_ConfigChannel>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80072f8:	f000 fa12 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	2000016c 	.word	0x2000016c
 8007308:	40012000 	.word	0x40012000
 800730c:	0f000001 	.word	0x0f000001

08007310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007314:	4b12      	ldr	r3, [pc, #72]	; (8007360 <MX_I2C1_Init+0x50>)
 8007316:	4a13      	ldr	r2, [pc, #76]	; (8007364 <MX_I2C1_Init+0x54>)
 8007318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <MX_I2C1_Init+0x50>)
 800731c:	4a12      	ldr	r2, [pc, #72]	; (8007368 <MX_I2C1_Init+0x58>)
 800731e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <MX_I2C1_Init+0x50>)
 8007322:	2200      	movs	r2, #0
 8007324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <MX_I2C1_Init+0x50>)
 8007328:	2200      	movs	r2, #0
 800732a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <MX_I2C1_Init+0x50>)
 800732e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007334:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <MX_I2C1_Init+0x50>)
 8007336:	2200      	movs	r2, #0
 8007338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <MX_I2C1_Init+0x50>)
 800733c:	2200      	movs	r2, #0
 800733e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <MX_I2C1_Init+0x50>)
 8007342:	2200      	movs	r2, #0
 8007344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007346:	4b06      	ldr	r3, [pc, #24]	; (8007360 <MX_I2C1_Init+0x50>)
 8007348:	2200      	movs	r2, #0
 800734a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800734c:	4804      	ldr	r0, [pc, #16]	; (8007360 <MX_I2C1_Init+0x50>)
 800734e:	f7fb fc75 	bl	8002c3c <HAL_I2C_Init>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007358:	f000 f9e2 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	200000d8 	.word	0x200000d8
 8007364:	40005400 	.word	0x40005400
 8007368:	000186a0 	.word	0x000186a0

0800736c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <MX_I2S3_Init+0x54>)
 8007372:	4a14      	ldr	r2, [pc, #80]	; (80073c4 <MX_I2S3_Init+0x58>)
 8007374:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007376:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <MX_I2S3_Init+0x54>)
 8007378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800737c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800737e:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <MX_I2S3_Init+0x54>)
 8007380:	2200      	movs	r2, #0
 8007382:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <MX_I2S3_Init+0x54>)
 8007386:	2200      	movs	r2, #0
 8007388:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800738a:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <MX_I2S3_Init+0x54>)
 800738c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007390:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <MX_I2S3_Init+0x54>)
 8007394:	4a0c      	ldr	r2, [pc, #48]	; (80073c8 <MX_I2S3_Init+0x5c>)
 8007396:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007398:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <MX_I2S3_Init+0x54>)
 800739a:	2200      	movs	r2, #0
 800739c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800739e:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <MX_I2S3_Init+0x54>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <MX_I2S3_Init+0x54>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <MX_I2S3_Init+0x54>)
 80073ac:	f7fb fd6e 	bl	8002e8c <HAL_I2S_Init>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80073b6:	f000 f9b3 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	2000024c 	.word	0x2000024c
 80073c4:	40003c00 	.word	0x40003c00
 80073c8:	00017700 	.word	0x00017700

080073cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80073d0:	4b17      	ldr	r3, [pc, #92]	; (8007430 <MX_SPI1_Init+0x64>)
 80073d2:	4a18      	ldr	r2, [pc, #96]	; (8007434 <MX_SPI1_Init+0x68>)
 80073d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <MX_SPI1_Init+0x64>)
 80073d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80073dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80073de:	4b14      	ldr	r3, [pc, #80]	; (8007430 <MX_SPI1_Init+0x64>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80073e4:	4b12      	ldr	r3, [pc, #72]	; (8007430 <MX_SPI1_Init+0x64>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073ea:	4b11      	ldr	r3, [pc, #68]	; (8007430 <MX_SPI1_Init+0x64>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073f0:	4b0f      	ldr	r3, [pc, #60]	; (8007430 <MX_SPI1_Init+0x64>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80073f6:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <MX_SPI1_Init+0x64>)
 80073f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <MX_SPI1_Init+0x64>)
 8007400:	2200      	movs	r2, #0
 8007402:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007404:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <MX_SPI1_Init+0x64>)
 8007406:	2200      	movs	r2, #0
 8007408:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <MX_SPI1_Init+0x64>)
 800740c:	2200      	movs	r2, #0
 800740e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <MX_SPI1_Init+0x64>)
 8007412:	2200      	movs	r2, #0
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <MX_SPI1_Init+0x64>)
 8007418:	220a      	movs	r2, #10
 800741a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800741c:	4804      	ldr	r0, [pc, #16]	; (8007430 <MX_SPI1_Init+0x64>)
 800741e:	f7fc ff43 	bl	80042a8 <HAL_SPI_Init>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007428:	f000 f97a 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800742c:	bf00      	nop
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200001b4 	.word	0x200001b4
 8007434:	40013000 	.word	0x40013000

08007438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800743e:	f107 0308 	add.w	r3, r7, #8
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	605a      	str	r2, [r3, #4]
 8007448:	609a      	str	r2, [r3, #8]
 800744a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800744c:	463b      	mov	r3, r7
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007454:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <MX_TIM3_Init+0x90>)
 8007456:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <MX_TIM3_Init+0x94>)
 8007458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800745a:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <MX_TIM3_Init+0x90>)
 800745c:	2253      	movs	r2, #83	; 0x53
 800745e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <MX_TIM3_Init+0x90>)
 8007462:	2200      	movs	r2, #0
 8007464:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8007466:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <MX_TIM3_Init+0x90>)
 8007468:	2232      	movs	r2, #50	; 0x32
 800746a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <MX_TIM3_Init+0x90>)
 800746e:	2200      	movs	r2, #0
 8007470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <MX_TIM3_Init+0x90>)
 8007474:	2280      	movs	r2, #128	; 0x80
 8007476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007478:	4813      	ldr	r0, [pc, #76]	; (80074c8 <MX_TIM3_Init+0x90>)
 800747a:	f7fc ff79 	bl	8004370 <HAL_TIM_Base_Init>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8007484:	f000 f94c 	bl	8007720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800748c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800748e:	f107 0308 	add.w	r3, r7, #8
 8007492:	4619      	mov	r1, r3
 8007494:	480c      	ldr	r0, [pc, #48]	; (80074c8 <MX_TIM3_Init+0x90>)
 8007496:	f7fd f8c2 	bl	800461e <HAL_TIM_ConfigClockSource>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80074a0:	f000 f93e 	bl	8007720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80074ac:	463b      	mov	r3, r7
 80074ae:	4619      	mov	r1, r3
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <MX_TIM3_Init+0x90>)
 80074b2:	f7fd facd 	bl	8004a50 <HAL_TIMEx_MasterConfigSynchronization>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80074bc:	f000 f930 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80074c0:	bf00      	nop
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	2000012c 	.word	0x2000012c
 80074cc:	40000400 	.word	0x40000400

080074d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80074d4:	4b11      	ldr	r3, [pc, #68]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074d6:	4a12      	ldr	r2, [pc, #72]	; (8007520 <MX_USART2_UART_Init+0x50>)
 80074d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80074e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80074e2:	4b0e      	ldr	r3, [pc, #56]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074f6:	220c      	movs	r2, #12
 80074f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <MX_USART2_UART_Init+0x4c>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <MX_USART2_UART_Init+0x4c>)
 8007502:	2200      	movs	r2, #0
 8007504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007506:	4805      	ldr	r0, [pc, #20]	; (800751c <MX_USART2_UART_Init+0x4c>)
 8007508:	f7fd fafb 	bl	8004b02 <HAL_UART_Init>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007512:	f000 f905 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2000020c 	.word	0x2000020c
 8007520:	40004400 	.word	0x40004400

08007524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08c      	sub	sp, #48	; 0x30
 8007528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752a:	f107 031c 	add.w	r3, r7, #28
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	609a      	str	r2, [r3, #8]
 8007536:	60da      	str	r2, [r3, #12]
 8007538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800753a:	2300      	movs	r3, #0
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	4b71      	ldr	r3, [pc, #452]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	4a70      	ldr	r2, [pc, #448]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007544:	f043 0310 	orr.w	r3, r3, #16
 8007548:	6313      	str	r3, [r2, #48]	; 0x30
 800754a:	4b6e      	ldr	r3, [pc, #440]	; (8007704 <MX_GPIO_Init+0x1e0>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f003 0310 	and.w	r3, r3, #16
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <MX_GPIO_Init+0x1e0>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	4a69      	ldr	r2, [pc, #420]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007560:	f043 0304 	orr.w	r3, r3, #4
 8007564:	6313      	str	r3, [r2, #48]	; 0x30
 8007566:	4b67      	ldr	r3, [pc, #412]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	4b63      	ldr	r3, [pc, #396]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	4a62      	ldr	r2, [pc, #392]	; (8007704 <MX_GPIO_Init+0x1e0>)
 800757c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007580:	6313      	str	r3, [r2, #48]	; 0x30
 8007582:	4b60      	ldr	r3, [pc, #384]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	4b5c      	ldr	r3, [pc, #368]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	4a5b      	ldr	r2, [pc, #364]	; (8007704 <MX_GPIO_Init+0x1e0>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	6313      	str	r3, [r2, #48]	; 0x30
 800759e:	4b59      	ldr	r3, [pc, #356]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075aa:	2300      	movs	r3, #0
 80075ac:	60bb      	str	r3, [r7, #8]
 80075ae:	4b55      	ldr	r3, [pc, #340]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	4a54      	ldr	r2, [pc, #336]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075b4:	f043 0302 	orr.w	r3, r3, #2
 80075b8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ba:	4b52      	ldr	r3, [pc, #328]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	60bb      	str	r3, [r7, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	607b      	str	r3, [r7, #4]
 80075ca:	4b4e      	ldr	r3, [pc, #312]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	4a4d      	ldr	r2, [pc, #308]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075d0:	f043 0308 	orr.w	r3, r3, #8
 80075d4:	6313      	str	r3, [r2, #48]	; 0x30
 80075d6:	4b4b      	ldr	r3, [pc, #300]	; (8007704 <MX_GPIO_Init+0x1e0>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80075e2:	2200      	movs	r2, #0
 80075e4:	2108      	movs	r1, #8
 80075e6:	4848      	ldr	r0, [pc, #288]	; (8007708 <MX_GPIO_Init+0x1e4>)
 80075e8:	f7f9 fec4 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80075ec:	2201      	movs	r2, #1
 80075ee:	2101      	movs	r1, #1
 80075f0:	4846      	ldr	r0, [pc, #280]	; (800770c <MX_GPIO_Init+0x1e8>)
 80075f2:	f7f9 febf 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80075f6:	2200      	movs	r2, #0
 80075f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80075fc:	4844      	ldr	r0, [pc, #272]	; (8007710 <MX_GPIO_Init+0x1ec>)
 80075fe:	f7f9 feb9 	bl	8001374 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007602:	2308      	movs	r3, #8
 8007604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007606:	2301      	movs	r3, #1
 8007608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800760e:	2300      	movs	r3, #0
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007612:	f107 031c 	add.w	r3, r7, #28
 8007616:	4619      	mov	r1, r3
 8007618:	483b      	ldr	r0, [pc, #236]	; (8007708 <MX_GPIO_Init+0x1e4>)
 800761a:	f7f9 fd11 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800761e:	2301      	movs	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007622:	2301      	movs	r3, #1
 8007624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800762a:	2300      	movs	r3, #0
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800762e:	f107 031c 	add.w	r3, r7, #28
 8007632:	4619      	mov	r1, r3
 8007634:	4835      	ldr	r0, [pc, #212]	; (800770c <MX_GPIO_Init+0x1e8>)
 8007636:	f7f9 fd03 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800763a:	2308      	movs	r3, #8
 800763c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763e:	2302      	movs	r3, #2
 8007640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007646:	2300      	movs	r3, #0
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800764a:	2305      	movs	r3, #5
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800764e:	f107 031c 	add.w	r3, r7, #28
 8007652:	4619      	mov	r1, r3
 8007654:	482d      	ldr	r0, [pc, #180]	; (800770c <MX_GPIO_Init+0x1e8>)
 8007656:	f7f9 fcf3 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800765a:	2301      	movs	r3, #1
 800765c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800765e:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <MX_GPIO_Init+0x1f0>)
 8007660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007662:	2300      	movs	r3, #0
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	4619      	mov	r1, r3
 800766c:	482a      	ldr	r0, [pc, #168]	; (8007718 <MX_GPIO_Init+0x1f4>)
 800766e:	f7f9 fce7 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007672:	2304      	movs	r3, #4
 8007674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007676:	2300      	movs	r3, #0
 8007678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800767e:	f107 031c 	add.w	r3, r7, #28
 8007682:	4619      	mov	r1, r3
 8007684:	4825      	ldr	r0, [pc, #148]	; (800771c <MX_GPIO_Init+0x1f8>)
 8007686:	f7f9 fcdb 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800768a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800768e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007690:	2302      	movs	r3, #2
 8007692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007698:	2300      	movs	r3, #0
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800769c:	2305      	movs	r3, #5
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80076a0:	f107 031c 	add.w	r3, r7, #28
 80076a4:	4619      	mov	r1, r3
 80076a6:	481d      	ldr	r0, [pc, #116]	; (800771c <MX_GPIO_Init+0x1f8>)
 80076a8:	f7f9 fcca 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80076ac:	f24f 0310 	movw	r3, #61456	; 0xf010
 80076b0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076b2:	2301      	movs	r3, #1
 80076b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076be:	f107 031c 	add.w	r3, r7, #28
 80076c2:	4619      	mov	r1, r3
 80076c4:	4812      	ldr	r0, [pc, #72]	; (8007710 <MX_GPIO_Init+0x1ec>)
 80076c6:	f7f9 fcbb 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80076ca:	2320      	movs	r3, #32
 80076cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076ce:	2300      	movs	r3, #0
 80076d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80076d6:	f107 031c 	add.w	r3, r7, #28
 80076da:	4619      	mov	r1, r3
 80076dc:	480c      	ldr	r0, [pc, #48]	; (8007710 <MX_GPIO_Init+0x1ec>)
 80076de:	f7f9 fcaf 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80076e2:	2302      	movs	r3, #2
 80076e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <MX_GPIO_Init+0x1f0>)
 80076e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80076ee:	f107 031c 	add.w	r3, r7, #28
 80076f2:	4619      	mov	r1, r3
 80076f4:	4804      	ldr	r0, [pc, #16]	; (8007708 <MX_GPIO_Init+0x1e4>)
 80076f6:	f7f9 fca3 	bl	8001040 <HAL_GPIO_Init>

}
 80076fa:	bf00      	nop
 80076fc:	3730      	adds	r7, #48	; 0x30
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40023800 	.word	0x40023800
 8007708:	40021000 	.word	0x40021000
 800770c:	40020800 	.word	0x40020800
 8007710:	40020c00 	.word	0x40020c00
 8007714:	10120000 	.word	0x10120000
 8007718:	40020000 	.word	0x40020000
 800771c:	40020400 	.word	0x40020400

08007720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	4b10      	ldr	r3, [pc, #64]	; (800777c <HAL_MspInit+0x4c>)
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <HAL_MspInit+0x4c>)
 8007740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007744:	6453      	str	r3, [r2, #68]	; 0x44
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <HAL_MspInit+0x4c>)
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <HAL_MspInit+0x4c>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	4a08      	ldr	r2, [pc, #32]	; (800777c <HAL_MspInit+0x4c>)
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_MspInit+0x4c>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800776e:	2007      	movs	r0, #7
 8007770:	f7f9 fc24 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40023800 	.word	0x40023800

08007780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007788:	f107 0314 	add.w	r3, r7, #20
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	605a      	str	r2, [r3, #4]
 8007792:	609a      	str	r2, [r3, #8]
 8007794:	60da      	str	r2, [r3, #12]
 8007796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a17      	ldr	r2, [pc, #92]	; (80077fc <HAL_ADC_MspInit+0x7c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d127      	bne.n	80077f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	4b16      	ldr	r3, [pc, #88]	; (8007800 <HAL_ADC_MspInit+0x80>)
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	4a15      	ldr	r2, [pc, #84]	; (8007800 <HAL_ADC_MspInit+0x80>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b0:	6453      	str	r3, [r2, #68]	; 0x44
 80077b2:	4b13      	ldr	r3, [pc, #76]	; (8007800 <HAL_ADC_MspInit+0x80>)
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <HAL_ADC_MspInit+0x80>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	4a0e      	ldr	r2, [pc, #56]	; (8007800 <HAL_ADC_MspInit+0x80>)
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	6313      	str	r3, [r2, #48]	; 0x30
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <HAL_ADC_MspInit+0x80>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80077da:	2302      	movs	r3, #2
 80077dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077de:	2303      	movs	r3, #3
 80077e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e6:	f107 0314 	add.w	r3, r7, #20
 80077ea:	4619      	mov	r1, r3
 80077ec:	4805      	ldr	r0, [pc, #20]	; (8007804 <HAL_ADC_MspInit+0x84>)
 80077ee:	f7f9 fc27 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80077f2:	bf00      	nop
 80077f4:	3728      	adds	r7, #40	; 0x28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40012000 	.word	0x40012000
 8007800:	40023800 	.word	0x40023800
 8007804:	40020000 	.word	0x40020000

08007808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	; 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	609a      	str	r2, [r3, #8]
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <HAL_I2C_MspInit+0x84>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d12c      	bne.n	8007884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800782a:	2300      	movs	r3, #0
 800782c:	613b      	str	r3, [r7, #16]
 800782e:	4b18      	ldr	r3, [pc, #96]	; (8007890 <HAL_I2C_MspInit+0x88>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	4a17      	ldr	r2, [pc, #92]	; (8007890 <HAL_I2C_MspInit+0x88>)
 8007834:	f043 0302 	orr.w	r3, r3, #2
 8007838:	6313      	str	r3, [r2, #48]	; 0x30
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <HAL_I2C_MspInit+0x88>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007846:	f44f 7310 	mov.w	r3, #576	; 0x240
 800784a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800784c:	2312      	movs	r3, #18
 800784e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007850:	2301      	movs	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007854:	2300      	movs	r3, #0
 8007856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007858:	2304      	movs	r3, #4
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800785c:	f107 0314 	add.w	r3, r7, #20
 8007860:	4619      	mov	r1, r3
 8007862:	480c      	ldr	r0, [pc, #48]	; (8007894 <HAL_I2C_MspInit+0x8c>)
 8007864:	f7f9 fbec 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	4b08      	ldr	r3, [pc, #32]	; (8007890 <HAL_I2C_MspInit+0x88>)
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	4a07      	ldr	r2, [pc, #28]	; (8007890 <HAL_I2C_MspInit+0x88>)
 8007872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007876:	6413      	str	r3, [r2, #64]	; 0x40
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <HAL_I2C_MspInit+0x88>)
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007884:	bf00      	nop
 8007886:	3728      	adds	r7, #40	; 0x28
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40005400 	.word	0x40005400
 8007890:	40023800 	.word	0x40023800
 8007894:	40020400 	.word	0x40020400

08007898 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a0:	f107 0314 	add.w	r3, r7, #20
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a28      	ldr	r2, [pc, #160]	; (8007958 <HAL_I2S_MspInit+0xc0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d14a      	bne.n	8007950 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	4a26      	ldr	r2, [pc, #152]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c8:	6413      	str	r3, [r2, #64]	; 0x40
 80078ca:	4b24      	ldr	r3, [pc, #144]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	4b20      	ldr	r3, [pc, #128]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	4a1f      	ldr	r2, [pc, #124]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078e0:	f043 0301 	orr.w	r3, r3, #1
 80078e4:	6313      	str	r3, [r2, #48]	; 0x30
 80078e6:	4b1d      	ldr	r3, [pc, #116]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	4b19      	ldr	r3, [pc, #100]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	4a18      	ldr	r2, [pc, #96]	; (800795c <HAL_I2S_MspInit+0xc4>)
 80078fc:	f043 0304 	orr.w	r3, r3, #4
 8007900:	6313      	str	r3, [r2, #48]	; 0x30
 8007902:	4b16      	ldr	r3, [pc, #88]	; (800795c <HAL_I2S_MspInit+0xc4>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800790e:	2310      	movs	r3, #16
 8007910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007912:	2302      	movs	r3, #2
 8007914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800791a:	2300      	movs	r3, #0
 800791c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800791e:	2306      	movs	r3, #6
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007922:	f107 0314 	add.w	r3, r7, #20
 8007926:	4619      	mov	r1, r3
 8007928:	480d      	ldr	r0, [pc, #52]	; (8007960 <HAL_I2S_MspInit+0xc8>)
 800792a:	f7f9 fb89 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800792e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007934:	2302      	movs	r3, #2
 8007936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007940:	2306      	movs	r3, #6
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4619      	mov	r1, r3
 800794a:	4806      	ldr	r0, [pc, #24]	; (8007964 <HAL_I2S_MspInit+0xcc>)
 800794c:	f7f9 fb78 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007950:	bf00      	nop
 8007952:	3728      	adds	r7, #40	; 0x28
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40003c00 	.word	0x40003c00
 800795c:	40023800 	.word	0x40023800
 8007960:	40020000 	.word	0x40020000
 8007964:	40020800 	.word	0x40020800

08007968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007970:	f107 0314 	add.w	r3, r7, #20
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a19      	ldr	r2, [pc, #100]	; (80079ec <HAL_SPI_MspInit+0x84>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d12b      	bne.n	80079e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800798a:	2300      	movs	r3, #0
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <HAL_SPI_MspInit+0x88>)
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <HAL_SPI_MspInit+0x88>)
 8007994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007998:	6453      	str	r3, [r2, #68]	; 0x44
 800799a:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <HAL_SPI_MspInit+0x88>)
 800799c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_SPI_MspInit+0x88>)
 80079ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <HAL_SPI_MspInit+0x88>)
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	6313      	str	r3, [r2, #48]	; 0x30
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_SPI_MspInit+0x88>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80079c2:	23e0      	movs	r3, #224	; 0xe0
 80079c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c6:	2302      	movs	r3, #2
 80079c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80079d2:	2305      	movs	r3, #5
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d6:	f107 0314 	add.w	r3, r7, #20
 80079da:	4619      	mov	r1, r3
 80079dc:	4805      	ldr	r0, [pc, #20]	; (80079f4 <HAL_SPI_MspInit+0x8c>)
 80079de:	f7f9 fb2f 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80079e2:	bf00      	nop
 80079e4:	3728      	adds	r7, #40	; 0x28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40013000 	.word	0x40013000
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40020000 	.word	0x40020000

080079f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a0e      	ldr	r2, [pc, #56]	; (8007a40 <HAL_TIM_Base_MspInit+0x48>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d115      	bne.n	8007a36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <HAL_TIM_Base_MspInit+0x4c>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	4a0c      	ldr	r2, [pc, #48]	; (8007a44 <HAL_TIM_Base_MspInit+0x4c>)
 8007a14:	f043 0302 	orr.w	r3, r3, #2
 8007a18:	6413      	str	r3, [r2, #64]	; 0x40
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <HAL_TIM_Base_MspInit+0x4c>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	201d      	movs	r0, #29
 8007a2c:	f7f9 fad1 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007a30:	201d      	movs	r0, #29
 8007a32:	f7f9 faea 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40023800 	.word	0x40023800

08007a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a50:	f107 0314 	add.w	r3, r7, #20
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	609a      	str	r2, [r3, #8]
 8007a5c:	60da      	str	r2, [r3, #12]
 8007a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a19      	ldr	r2, [pc, #100]	; (8007acc <HAL_UART_MspInit+0x84>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d12b      	bne.n	8007ac2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <HAL_UART_MspInit+0x88>)
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <HAL_UART_MspInit+0x88>)
 8007a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a78:	6413      	str	r3, [r2, #64]	; 0x40
 8007a7a:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <HAL_UART_MspInit+0x88>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <HAL_UART_MspInit+0x88>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	4a10      	ldr	r2, [pc, #64]	; (8007ad0 <HAL_UART_MspInit+0x88>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	6313      	str	r3, [r2, #48]	; 0x30
 8007a96:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <HAL_UART_MspInit+0x88>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007ab2:	2307      	movs	r3, #7
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab6:	f107 0314 	add.w	r3, r7, #20
 8007aba:	4619      	mov	r1, r3
 8007abc:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <HAL_UART_MspInit+0x8c>)
 8007abe:	f7f9 fabf 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007ac2:	bf00      	nop
 8007ac4:	3728      	adds	r7, #40	; 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	40020000 	.word	0x40020000

08007ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007adc:	bf00      	nop
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007aea:	e7fe      	b.n	8007aea <HardFault_Handler+0x4>

08007aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007af0:	e7fe      	b.n	8007af0 <MemManage_Handler+0x4>

08007af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007af2:	b480      	push	{r7}
 8007af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007af6:	e7fe      	b.n	8007af6 <BusFault_Handler+0x4>

08007af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007afc:	e7fe      	b.n	8007afc <UsageFault_Handler+0x4>

08007afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007afe:	b480      	push	{r7}
 8007b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b02:	bf00      	nop
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b10:	bf00      	nop
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b1e:	bf00      	nop
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b2c:	f7f8 fd7a 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007b38:	4802      	ldr	r0, [pc, #8]	; (8007b44 <TIM3_IRQHandler+0x10>)
 8007b3a:	f7fc fc68 	bl	800440e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007b3e:	bf00      	nop
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	2000012c 	.word	0x2000012c

08007b48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007b4c:	4802      	ldr	r0, [pc, #8]	; (8007b58 <OTG_FS_IRQHandler+0x10>)
 8007b4e:	f7f9 feaf 	bl	80018b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007b52:	bf00      	nop
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000660 	.word	0x20000660

08007b5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b64:	4b11      	ldr	r3, [pc, #68]	; (8007bac <_sbrk+0x50>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <_sbrk+0x16>
		heap_end = &end;
 8007b6c:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <_sbrk+0x50>)
 8007b6e:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <_sbrk+0x54>)
 8007b70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007b72:	4b0e      	ldr	r3, [pc, #56]	; (8007bac <_sbrk+0x50>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <_sbrk+0x50>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	466a      	mov	r2, sp
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d907      	bls.n	8007b96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007b86:	f000 fb29 	bl	80081dc <__errno>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	e006      	b.n	8007ba4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <_sbrk+0x50>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4a03      	ldr	r2, [pc, #12]	; (8007bac <_sbrk+0x50>)
 8007ba0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200000c4 	.word	0x200000c4
 8007bb0:	20000928 	.word	0x20000928

08007bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007bb8:	4b16      	ldr	r3, [pc, #88]	; (8007c14 <SystemInit+0x60>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbe:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <SystemInit+0x60>)
 8007bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007bc8:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <SystemInit+0x64>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a12      	ldr	r2, [pc, #72]	; (8007c18 <SystemInit+0x64>)
 8007bce:	f043 0301 	orr.w	r3, r3, #1
 8007bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007bd4:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <SystemInit+0x64>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <SystemInit+0x64>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a0e      	ldr	r2, [pc, #56]	; (8007c18 <SystemInit+0x64>)
 8007be0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <SystemInit+0x64>)
 8007bec:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <SystemInit+0x68>)
 8007bee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <SystemInit+0x64>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <SystemInit+0x64>)
 8007bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007bfc:	4b06      	ldr	r3, [pc, #24]	; (8007c18 <SystemInit+0x64>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c02:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <SystemInit+0x60>)
 8007c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c08:	609a      	str	r2, [r3, #8]
#endif
}
 8007c0a:	bf00      	nop
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	e000ed00 	.word	0xe000ed00
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	24003010 	.word	0x24003010

08007c20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c24:	2201      	movs	r2, #1
 8007c26:	490e      	ldr	r1, [pc, #56]	; (8007c60 <MX_USB_HOST_Init+0x40>)
 8007c28:	480e      	ldr	r0, [pc, #56]	; (8007c64 <MX_USB_HOST_Init+0x44>)
 8007c2a:	f7fe fd3b 	bl	80066a4 <USBH_Init>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c34:	f7ff fd74 	bl	8007720 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c38:	490b      	ldr	r1, [pc, #44]	; (8007c68 <MX_USB_HOST_Init+0x48>)
 8007c3a:	480a      	ldr	r0, [pc, #40]	; (8007c64 <MX_USB_HOST_Init+0x44>)
 8007c3c:	f7fe fda5 	bl	800678a <USBH_RegisterClass>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007c46:	f7ff fd6b 	bl	8007720 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007c4a:	4806      	ldr	r0, [pc, #24]	; (8007c64 <MX_USB_HOST_Init+0x44>)
 8007c4c:	f7fe fe2a 	bl	80068a4 <USBH_Start>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007c56:	f7ff fd63 	bl	8007720 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	08007c6d 	.word	0x08007c6d
 8007c64:	20000294 	.word	0x20000294
 8007c68:	20000008 	.word	0x20000008

08007c6c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d819      	bhi.n	8007cb4 <USBH_UserProcess+0x48>
 8007c80:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USBH_UserProcess+0x1c>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	08007ca5 	.word	0x08007ca5
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007c9d 	.word	0x08007c9d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <USBH_UserProcess+0x58>)
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	701a      	strb	r2, [r3, #0]
  break;
 8007ca2:	e008      	b.n	8007cb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ca4:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <USBH_UserProcess+0x58>)
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
  break;
 8007caa:	e004      	b.n	8007cb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <USBH_UserProcess+0x58>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
  break;
 8007cb2:	e000      	b.n	8007cb6 <USBH_UserProcess+0x4a>

  default:
  break;
 8007cb4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	200000c8 	.word	0x200000c8

08007cc8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	609a      	str	r2, [r3, #8]
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ce8:	d147      	bne.n	8007d7a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	4b25      	ldr	r3, [pc, #148]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	4a24      	ldr	r2, [pc, #144]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cfa:	4b22      	ldr	r3, [pc, #136]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	613b      	str	r3, [r7, #16]
 8007d04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	4619      	mov	r1, r3
 8007d1a:	481b      	ldr	r0, [pc, #108]	; (8007d88 <HAL_HCD_MspInit+0xc0>)
 8007d1c:	f7f9 f990 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d26:	2302      	movs	r3, #2
 8007d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d32:	230a      	movs	r3, #10
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d36:	f107 0314 	add.w	r3, r7, #20
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4812      	ldr	r0, [pc, #72]	; (8007d88 <HAL_HCD_MspInit+0xc0>)
 8007d3e:	f7f9 f97f 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	4a0f      	ldr	r2, [pc, #60]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4c:	6353      	str	r3, [r2, #52]	; 0x34
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <HAL_HCD_MspInit+0xbc>)
 8007d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	2043      	movs	r0, #67	; 0x43
 8007d70:	f7f9 f92f 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d74:	2043      	movs	r0, #67	; 0x43
 8007d76:	f7f9 f948 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3728      	adds	r7, #40	; 0x28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40023800 	.word	0x40023800
 8007d88:	40020000 	.word	0x40020000

08007d8c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fda1 	bl	80068e2 <USBH_LL_IncTimer>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fdd9 	bl	800696e <USBH_LL_Connect>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fdf1 	bl	80069ba <USBH_LL_Disconnect>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
 8007dec:	4613      	mov	r3, r2
 8007dee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fd93 	bl	8006936 <USBH_LL_PortEnabled>
} 
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fd93 	bl	8006952 <USBH_LL_PortDisabled>
} 
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d12a      	bne.n	8007e9c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007e46:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e52:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e5c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e60:	2208      	movs	r2, #8
 8007e62:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007e64:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007e70:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e72:	2202      	movs	r2, #2
 8007e74:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007e7c:	480a      	ldr	r0, [pc, #40]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e7e:	f7f9 fa92 	bl	80013a6 <HAL_HCD_Init>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007e88:	f7ff fc4a 	bl	8007720 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007e8c:	4806      	ldr	r0, [pc, #24]	; (8007ea8 <USBH_LL_Init+0x74>)
 8007e8e:	f7f9 fe7f 	bl	8001b90 <HAL_HCD_GetCurrentFrame>
 8007e92:	4603      	mov	r3, r0
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fe fd14 	bl	80068c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000660 	.word	0x20000660

08007eac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7f9 fdfa 	bl	8001abc <HAL_HCD_Start>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f912 	bl	80080f8 <USBH_Get_USB_Status>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f9 fe02 	bl	8001b02 <HAL_HCD_Stop>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f8f7 	bl	80080f8 <USBH_Get_USB_Status>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f9 fe19 	bl	8001b66 <HAL_HCD_HC_GetXferCount>
 8007f34:	4603      	mov	r3, r0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f3e:	b590      	push	{r4, r7, lr}
 8007f40:	b089      	sub	sp, #36	; 0x24
 8007f42:	af04      	add	r7, sp, #16
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	70fb      	strb	r3, [r7, #3]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70bb      	strb	r3, [r7, #2]
 8007f54:	4613      	mov	r3, r2
 8007f56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007f66:	787c      	ldrb	r4, [r7, #1]
 8007f68:	78ba      	ldrb	r2, [r7, #2]
 8007f6a:	78f9      	ldrb	r1, [r7, #3]
 8007f6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	f7f9 fa74 	bl	800146a <HAL_HCD_HC_Init>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f8b5 	bl	80080f8 <USBH_Get_USB_Status>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd90      	pop	{r4, r7, pc}

08007f9c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7f9 faed 	bl	800159a <HAL_HCD_HC_Halt>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f896 	bl	80080f8 <USBH_Get_USB_Status>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007fda:	b590      	push	{r4, r7, lr}
 8007fdc:	b089      	sub	sp, #36	; 0x24
 8007fde:	af04      	add	r7, sp, #16
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	70fb      	strb	r3, [r7, #3]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70bb      	strb	r3, [r7, #2]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008002:	787c      	ldrb	r4, [r7, #1]
 8008004:	78ba      	ldrb	r2, [r7, #2]
 8008006:	78f9      	ldrb	r1, [r7, #3]
 8008008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008010:	9302      	str	r3, [sp, #8]
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	4623      	mov	r3, r4
 800801e:	f7f9 fadf 	bl	80015e0 <HAL_HCD_HC_SubmitRequest>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	4618      	mov	r0, r3
 800802a:	f000 f865 	bl	80080f8 <USBH_Get_USB_Status>
 800802e:	4603      	mov	r3, r0
 8008030:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008032:	7bbb      	ldrb	r3, [r7, #14]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}

0800803c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7f9 fd72 	bl	8001b3c <HAL_HCD_HC_GetURBState>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008074:	2b01      	cmp	r3, #1
 8008076:	d103      	bne.n	8008080 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 f868 	bl	8008150 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008080:	20c8      	movs	r0, #200	; 0xc8
 8008082:	f7f8 faef 	bl	8000664 <HAL_Delay>
  return USBH_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
 800809c:	4613      	mov	r3, r2
 800809e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	440b      	add	r3, r1
 80080b6:	333b      	adds	r3, #59	; 0x3b
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	440b      	add	r3, r1
 80080cc:	3350      	adds	r3, #80	; 0x50
 80080ce:	78ba      	ldrb	r2, [r7, #2]
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	e009      	b.n	80080e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	68f9      	ldr	r1, [r7, #12]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	440b      	add	r3, r1
 80080e2:	3351      	adds	r3, #81	; 0x51
 80080e4:	78ba      	ldrb	r2, [r7, #2]
 80080e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d817      	bhi.n	800813c <USBH_Get_USB_Status+0x44>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <USBH_Get_USB_Status+0x1c>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008125 	.word	0x08008125
 8008118:	0800812b 	.word	0x0800812b
 800811c:	08008131 	.word	0x08008131
 8008120:	08008137 	.word	0x08008137
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
    break;
 8008128:	e00b      	b.n	8008142 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800812a:	2302      	movs	r3, #2
 800812c:	73fb      	strb	r3, [r7, #15]
    break;
 800812e:	e008      	b.n	8008142 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
    break;
 8008134:	e005      	b.n	8008142 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008136:	2302      	movs	r3, #2
 8008138:	73fb      	strb	r3, [r7, #15]
    break;
 800813a:	e002      	b.n	8008142 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800813c:	2302      	movs	r3, #2
 800813e:	73fb      	strb	r3, [r7, #15]
    break;
 8008140:	bf00      	nop
  }
  return usb_status;
 8008142:	7bfb      	ldrb	r3, [r7, #15]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008164:	2301      	movs	r3, #1
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	e001      	b.n	800816e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	461a      	mov	r2, r3
 8008172:	2101      	movs	r1, #1
 8008174:	4803      	ldr	r0, [pc, #12]	; (8008184 <MX_DriverVbusFS+0x34>)
 8008176:	f7f9 f8fd 	bl	8001374 <HAL_GPIO_WritePin>
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40020800 	.word	0x40020800

08008188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800818c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800818e:	e003      	b.n	8008198 <LoopCopyDataInit>

08008190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008196:	3104      	adds	r1, #4

08008198 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008198:	480b      	ldr	r0, [pc, #44]	; (80081c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800819c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800819e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80081a0:	d3f6      	bcc.n	8008190 <CopyDataInit>
  ldr  r2, =_sbss
 80081a2:	4a0b      	ldr	r2, [pc, #44]	; (80081d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80081a4:	e002      	b.n	80081ac <LoopFillZerobss>

080081a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80081a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80081a8:	f842 3b04 	str.w	r3, [r2], #4

080081ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80081ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80081b0:	d3f9      	bcc.n	80081a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80081b2:	f7ff fcff 	bl	8007bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081b6:	f000 f817 	bl	80081e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081ba:	f7fe ff8b 	bl	80070d4 <main>
  bx  lr    
 80081be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80081c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80081c4:	08008aec 	.word	0x08008aec
  ldr  r0, =_sdata
 80081c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80081cc:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80081d0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80081d4:	20000928 	.word	0x20000928

080081d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80081d8:	e7fe      	b.n	80081d8 <ADC_IRQHandler>
	...

080081dc <__errno>:
 80081dc:	4b01      	ldr	r3, [pc, #4]	; (80081e4 <__errno+0x8>)
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000030 	.word	0x20000030

080081e8 <__libc_init_array>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4e0d      	ldr	r6, [pc, #52]	; (8008220 <__libc_init_array+0x38>)
 80081ec:	4c0d      	ldr	r4, [pc, #52]	; (8008224 <__libc_init_array+0x3c>)
 80081ee:	1ba4      	subs	r4, r4, r6
 80081f0:	10a4      	asrs	r4, r4, #2
 80081f2:	2500      	movs	r5, #0
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d109      	bne.n	800820c <__libc_init_array+0x24>
 80081f8:	4e0b      	ldr	r6, [pc, #44]	; (8008228 <__libc_init_array+0x40>)
 80081fa:	4c0c      	ldr	r4, [pc, #48]	; (800822c <__libc_init_array+0x44>)
 80081fc:	f000 fc36 	bl	8008a6c <_init>
 8008200:	1ba4      	subs	r4, r4, r6
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	2500      	movs	r5, #0
 8008206:	42a5      	cmp	r5, r4
 8008208:	d105      	bne.n	8008216 <__libc_init_array+0x2e>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008210:	4798      	blx	r3
 8008212:	3501      	adds	r5, #1
 8008214:	e7ee      	b.n	80081f4 <__libc_init_array+0xc>
 8008216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800821a:	4798      	blx	r3
 800821c:	3501      	adds	r5, #1
 800821e:	e7f2      	b.n	8008206 <__libc_init_array+0x1e>
 8008220:	08008ae4 	.word	0x08008ae4
 8008224:	08008ae4 	.word	0x08008ae4
 8008228:	08008ae4 	.word	0x08008ae4
 800822c:	08008ae8 	.word	0x08008ae8

08008230 <malloc>:
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <malloc+0xc>)
 8008232:	4601      	mov	r1, r0
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f000 b861 	b.w	80082fc <_malloc_r>
 800823a:	bf00      	nop
 800823c:	20000030 	.word	0x20000030

08008240 <free>:
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <free+0xc>)
 8008242:	4601      	mov	r1, r0
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f000 b80b 	b.w	8008260 <_free_r>
 800824a:	bf00      	nop
 800824c:	20000030 	.word	0x20000030

08008250 <memset>:
 8008250:	4402      	add	r2, r0
 8008252:	4603      	mov	r3, r0
 8008254:	4293      	cmp	r3, r2
 8008256:	d100      	bne.n	800825a <memset+0xa>
 8008258:	4770      	bx	lr
 800825a:	f803 1b01 	strb.w	r1, [r3], #1
 800825e:	e7f9      	b.n	8008254 <memset+0x4>

08008260 <_free_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4605      	mov	r5, r0
 8008264:	2900      	cmp	r1, #0
 8008266:	d045      	beq.n	80082f4 <_free_r+0x94>
 8008268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826c:	1f0c      	subs	r4, r1, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	18e4      	addlt	r4, r4, r3
 8008274:	f000 f8cc 	bl	8008410 <__malloc_lock>
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <_free_r+0x98>)
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	4610      	mov	r0, r2
 800827e:	b933      	cbnz	r3, 800828e <_free_r+0x2e>
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6014      	str	r4, [r2, #0]
 8008284:	4628      	mov	r0, r5
 8008286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828a:	f000 b8c2 	b.w	8008412 <__malloc_unlock>
 800828e:	42a3      	cmp	r3, r4
 8008290:	d90c      	bls.n	80082ac <_free_r+0x4c>
 8008292:	6821      	ldr	r1, [r4, #0]
 8008294:	1862      	adds	r2, r4, r1
 8008296:	4293      	cmp	r3, r2
 8008298:	bf04      	itt	eq
 800829a:	681a      	ldreq	r2, [r3, #0]
 800829c:	685b      	ldreq	r3, [r3, #4]
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	bf04      	itt	eq
 80082a2:	1852      	addeq	r2, r2, r1
 80082a4:	6022      	streq	r2, [r4, #0]
 80082a6:	6004      	str	r4, [r0, #0]
 80082a8:	e7ec      	b.n	8008284 <_free_r+0x24>
 80082aa:	4613      	mov	r3, r2
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	b10a      	cbz	r2, 80082b4 <_free_r+0x54>
 80082b0:	42a2      	cmp	r2, r4
 80082b2:	d9fa      	bls.n	80082aa <_free_r+0x4a>
 80082b4:	6819      	ldr	r1, [r3, #0]
 80082b6:	1858      	adds	r0, r3, r1
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d10b      	bne.n	80082d4 <_free_r+0x74>
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	4401      	add	r1, r0
 80082c0:	1858      	adds	r0, r3, r1
 80082c2:	4282      	cmp	r2, r0
 80082c4:	6019      	str	r1, [r3, #0]
 80082c6:	d1dd      	bne.n	8008284 <_free_r+0x24>
 80082c8:	6810      	ldr	r0, [r2, #0]
 80082ca:	6852      	ldr	r2, [r2, #4]
 80082cc:	605a      	str	r2, [r3, #4]
 80082ce:	4401      	add	r1, r0
 80082d0:	6019      	str	r1, [r3, #0]
 80082d2:	e7d7      	b.n	8008284 <_free_r+0x24>
 80082d4:	d902      	bls.n	80082dc <_free_r+0x7c>
 80082d6:	230c      	movs	r3, #12
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	e7d3      	b.n	8008284 <_free_r+0x24>
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	1821      	adds	r1, r4, r0
 80082e0:	428a      	cmp	r2, r1
 80082e2:	bf04      	itt	eq
 80082e4:	6811      	ldreq	r1, [r2, #0]
 80082e6:	6852      	ldreq	r2, [r2, #4]
 80082e8:	6062      	str	r2, [r4, #4]
 80082ea:	bf04      	itt	eq
 80082ec:	1809      	addeq	r1, r1, r0
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	605c      	str	r4, [r3, #4]
 80082f2:	e7c7      	b.n	8008284 <_free_r+0x24>
 80082f4:	bd38      	pop	{r3, r4, r5, pc}
 80082f6:	bf00      	nop
 80082f8:	200000cc 	.word	0x200000cc

080082fc <_malloc_r>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	1ccd      	adds	r5, r1, #3
 8008300:	f025 0503 	bic.w	r5, r5, #3
 8008304:	3508      	adds	r5, #8
 8008306:	2d0c      	cmp	r5, #12
 8008308:	bf38      	it	cc
 800830a:	250c      	movcc	r5, #12
 800830c:	2d00      	cmp	r5, #0
 800830e:	4606      	mov	r6, r0
 8008310:	db01      	blt.n	8008316 <_malloc_r+0x1a>
 8008312:	42a9      	cmp	r1, r5
 8008314:	d903      	bls.n	800831e <_malloc_r+0x22>
 8008316:	230c      	movs	r3, #12
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	2000      	movs	r0, #0
 800831c:	bd70      	pop	{r4, r5, r6, pc}
 800831e:	f000 f877 	bl	8008410 <__malloc_lock>
 8008322:	4a21      	ldr	r2, [pc, #132]	; (80083a8 <_malloc_r+0xac>)
 8008324:	6814      	ldr	r4, [r2, #0]
 8008326:	4621      	mov	r1, r4
 8008328:	b991      	cbnz	r1, 8008350 <_malloc_r+0x54>
 800832a:	4c20      	ldr	r4, [pc, #128]	; (80083ac <_malloc_r+0xb0>)
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	b91b      	cbnz	r3, 8008338 <_malloc_r+0x3c>
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f83d 	bl	80083b0 <_sbrk_r>
 8008336:	6020      	str	r0, [r4, #0]
 8008338:	4629      	mov	r1, r5
 800833a:	4630      	mov	r0, r6
 800833c:	f000 f838 	bl	80083b0 <_sbrk_r>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d124      	bne.n	800838e <_malloc_r+0x92>
 8008344:	230c      	movs	r3, #12
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f862 	bl	8008412 <__malloc_unlock>
 800834e:	e7e4      	b.n	800831a <_malloc_r+0x1e>
 8008350:	680b      	ldr	r3, [r1, #0]
 8008352:	1b5b      	subs	r3, r3, r5
 8008354:	d418      	bmi.n	8008388 <_malloc_r+0x8c>
 8008356:	2b0b      	cmp	r3, #11
 8008358:	d90f      	bls.n	800837a <_malloc_r+0x7e>
 800835a:	600b      	str	r3, [r1, #0]
 800835c:	50cd      	str	r5, [r1, r3]
 800835e:	18cc      	adds	r4, r1, r3
 8008360:	4630      	mov	r0, r6
 8008362:	f000 f856 	bl	8008412 <__malloc_unlock>
 8008366:	f104 000b 	add.w	r0, r4, #11
 800836a:	1d23      	adds	r3, r4, #4
 800836c:	f020 0007 	bic.w	r0, r0, #7
 8008370:	1ac3      	subs	r3, r0, r3
 8008372:	d0d3      	beq.n	800831c <_malloc_r+0x20>
 8008374:	425a      	negs	r2, r3
 8008376:	50e2      	str	r2, [r4, r3]
 8008378:	e7d0      	b.n	800831c <_malloc_r+0x20>
 800837a:	428c      	cmp	r4, r1
 800837c:	684b      	ldr	r3, [r1, #4]
 800837e:	bf16      	itet	ne
 8008380:	6063      	strne	r3, [r4, #4]
 8008382:	6013      	streq	r3, [r2, #0]
 8008384:	460c      	movne	r4, r1
 8008386:	e7eb      	b.n	8008360 <_malloc_r+0x64>
 8008388:	460c      	mov	r4, r1
 800838a:	6849      	ldr	r1, [r1, #4]
 800838c:	e7cc      	b.n	8008328 <_malloc_r+0x2c>
 800838e:	1cc4      	adds	r4, r0, #3
 8008390:	f024 0403 	bic.w	r4, r4, #3
 8008394:	42a0      	cmp	r0, r4
 8008396:	d005      	beq.n	80083a4 <_malloc_r+0xa8>
 8008398:	1a21      	subs	r1, r4, r0
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f808 	bl	80083b0 <_sbrk_r>
 80083a0:	3001      	adds	r0, #1
 80083a2:	d0cf      	beq.n	8008344 <_malloc_r+0x48>
 80083a4:	6025      	str	r5, [r4, #0]
 80083a6:	e7db      	b.n	8008360 <_malloc_r+0x64>
 80083a8:	200000cc 	.word	0x200000cc
 80083ac:	200000d0 	.word	0x200000d0

080083b0 <_sbrk_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4c06      	ldr	r4, [pc, #24]	; (80083cc <_sbrk_r+0x1c>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	4605      	mov	r5, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	f7ff fbce 	bl	8007b5c <_sbrk>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_sbrk_r+0x1a>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_sbrk_r+0x1a>
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	20000924 	.word	0x20000924

080083d0 <siprintf>:
 80083d0:	b40e      	push	{r1, r2, r3}
 80083d2:	b500      	push	{lr}
 80083d4:	b09c      	sub	sp, #112	; 0x70
 80083d6:	ab1d      	add	r3, sp, #116	; 0x74
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e0:	4809      	ldr	r0, [pc, #36]	; (8008408 <siprintf+0x38>)
 80083e2:	9107      	str	r1, [sp, #28]
 80083e4:	9104      	str	r1, [sp, #16]
 80083e6:	4909      	ldr	r1, [pc, #36]	; (800840c <siprintf+0x3c>)
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	9105      	str	r1, [sp, #20]
 80083ee:	6800      	ldr	r0, [r0, #0]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	a902      	add	r1, sp, #8
 80083f4:	f000 f868 	bl	80084c8 <_svfiprintf_r>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	b01c      	add	sp, #112	; 0x70
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	b003      	add	sp, #12
 8008406:	4770      	bx	lr
 8008408:	20000030 	.word	0x20000030
 800840c:	ffff0208 	.word	0xffff0208

08008410 <__malloc_lock>:
 8008410:	4770      	bx	lr

08008412 <__malloc_unlock>:
 8008412:	4770      	bx	lr

08008414 <__ssputs_r>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	688e      	ldr	r6, [r1, #8]
 800841a:	429e      	cmp	r6, r3
 800841c:	4682      	mov	sl, r0
 800841e:	460c      	mov	r4, r1
 8008420:	4690      	mov	r8, r2
 8008422:	4699      	mov	r9, r3
 8008424:	d837      	bhi.n	8008496 <__ssputs_r+0x82>
 8008426:	898a      	ldrh	r2, [r1, #12]
 8008428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800842c:	d031      	beq.n	8008492 <__ssputs_r+0x7e>
 800842e:	6825      	ldr	r5, [r4, #0]
 8008430:	6909      	ldr	r1, [r1, #16]
 8008432:	1a6f      	subs	r7, r5, r1
 8008434:	6965      	ldr	r5, [r4, #20]
 8008436:	2302      	movs	r3, #2
 8008438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800843c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008440:	f109 0301 	add.w	r3, r9, #1
 8008444:	443b      	add	r3, r7
 8008446:	429d      	cmp	r5, r3
 8008448:	bf38      	it	cc
 800844a:	461d      	movcc	r5, r3
 800844c:	0553      	lsls	r3, r2, #21
 800844e:	d530      	bpl.n	80084b2 <__ssputs_r+0x9e>
 8008450:	4629      	mov	r1, r5
 8008452:	f7ff ff53 	bl	80082fc <_malloc_r>
 8008456:	4606      	mov	r6, r0
 8008458:	b950      	cbnz	r0, 8008470 <__ssputs_r+0x5c>
 800845a:	230c      	movs	r3, #12
 800845c:	f8ca 3000 	str.w	r3, [sl]
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008470:	463a      	mov	r2, r7
 8008472:	6921      	ldr	r1, [r4, #16]
 8008474:	f000 faa8 	bl	80089c8 <memcpy>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	6126      	str	r6, [r4, #16]
 8008486:	6165      	str	r5, [r4, #20]
 8008488:	443e      	add	r6, r7
 800848a:	1bed      	subs	r5, r5, r7
 800848c:	6026      	str	r6, [r4, #0]
 800848e:	60a5      	str	r5, [r4, #8]
 8008490:	464e      	mov	r6, r9
 8008492:	454e      	cmp	r6, r9
 8008494:	d900      	bls.n	8008498 <__ssputs_r+0x84>
 8008496:	464e      	mov	r6, r9
 8008498:	4632      	mov	r2, r6
 800849a:	4641      	mov	r1, r8
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	f000 fa9e 	bl	80089de <memmove>
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	60a3      	str	r3, [r4, #8]
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	441e      	add	r6, r3
 80084ac:	6026      	str	r6, [r4, #0]
 80084ae:	2000      	movs	r0, #0
 80084b0:	e7dc      	b.n	800846c <__ssputs_r+0x58>
 80084b2:	462a      	mov	r2, r5
 80084b4:	f000 faac 	bl	8008a10 <_realloc_r>
 80084b8:	4606      	mov	r6, r0
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d1e2      	bne.n	8008484 <__ssputs_r+0x70>
 80084be:	6921      	ldr	r1, [r4, #16]
 80084c0:	4650      	mov	r0, sl
 80084c2:	f7ff fecd 	bl	8008260 <_free_r>
 80084c6:	e7c8      	b.n	800845a <__ssputs_r+0x46>

080084c8 <_svfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	461d      	mov	r5, r3
 80084ce:	898b      	ldrh	r3, [r1, #12]
 80084d0:	061f      	lsls	r7, r3, #24
 80084d2:	b09d      	sub	sp, #116	; 0x74
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	4616      	mov	r6, r2
 80084da:	d50f      	bpl.n	80084fc <_svfiprintf_r+0x34>
 80084dc:	690b      	ldr	r3, [r1, #16]
 80084de:	b96b      	cbnz	r3, 80084fc <_svfiprintf_r+0x34>
 80084e0:	2140      	movs	r1, #64	; 0x40
 80084e2:	f7ff ff0b 	bl	80082fc <_malloc_r>
 80084e6:	6020      	str	r0, [r4, #0]
 80084e8:	6120      	str	r0, [r4, #16]
 80084ea:	b928      	cbnz	r0, 80084f8 <_svfiprintf_r+0x30>
 80084ec:	230c      	movs	r3, #12
 80084ee:	f8c8 3000 	str.w	r3, [r8]
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	e0c8      	b.n	800868a <_svfiprintf_r+0x1c2>
 80084f8:	2340      	movs	r3, #64	; 0x40
 80084fa:	6163      	str	r3, [r4, #20]
 80084fc:	2300      	movs	r3, #0
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	2320      	movs	r3, #32
 8008502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008506:	2330      	movs	r3, #48	; 0x30
 8008508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800850c:	9503      	str	r5, [sp, #12]
 800850e:	f04f 0b01 	mov.w	fp, #1
 8008512:	4637      	mov	r7, r6
 8008514:	463d      	mov	r5, r7
 8008516:	f815 3b01 	ldrb.w	r3, [r5], #1
 800851a:	b10b      	cbz	r3, 8008520 <_svfiprintf_r+0x58>
 800851c:	2b25      	cmp	r3, #37	; 0x25
 800851e:	d13e      	bne.n	800859e <_svfiprintf_r+0xd6>
 8008520:	ebb7 0a06 	subs.w	sl, r7, r6
 8008524:	d00b      	beq.n	800853e <_svfiprintf_r+0x76>
 8008526:	4653      	mov	r3, sl
 8008528:	4632      	mov	r2, r6
 800852a:	4621      	mov	r1, r4
 800852c:	4640      	mov	r0, r8
 800852e:	f7ff ff71 	bl	8008414 <__ssputs_r>
 8008532:	3001      	adds	r0, #1
 8008534:	f000 80a4 	beq.w	8008680 <_svfiprintf_r+0x1b8>
 8008538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853a:	4453      	add	r3, sl
 800853c:	9309      	str	r3, [sp, #36]	; 0x24
 800853e:	783b      	ldrb	r3, [r7, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 809d 	beq.w	8008680 <_svfiprintf_r+0x1b8>
 8008546:	2300      	movs	r3, #0
 8008548:	f04f 32ff 	mov.w	r2, #4294967295
 800854c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	9307      	str	r3, [sp, #28]
 8008554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008558:	931a      	str	r3, [sp, #104]	; 0x68
 800855a:	462f      	mov	r7, r5
 800855c:	2205      	movs	r2, #5
 800855e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008562:	4850      	ldr	r0, [pc, #320]	; (80086a4 <_svfiprintf_r+0x1dc>)
 8008564:	f7f7 fe3c 	bl	80001e0 <memchr>
 8008568:	9b04      	ldr	r3, [sp, #16]
 800856a:	b9d0      	cbnz	r0, 80085a2 <_svfiprintf_r+0xda>
 800856c:	06d9      	lsls	r1, r3, #27
 800856e:	bf44      	itt	mi
 8008570:	2220      	movmi	r2, #32
 8008572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008576:	071a      	lsls	r2, r3, #28
 8008578:	bf44      	itt	mi
 800857a:	222b      	movmi	r2, #43	; 0x2b
 800857c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008580:	782a      	ldrb	r2, [r5, #0]
 8008582:	2a2a      	cmp	r2, #42	; 0x2a
 8008584:	d015      	beq.n	80085b2 <_svfiprintf_r+0xea>
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	462f      	mov	r7, r5
 800858a:	2000      	movs	r0, #0
 800858c:	250a      	movs	r5, #10
 800858e:	4639      	mov	r1, r7
 8008590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008594:	3b30      	subs	r3, #48	; 0x30
 8008596:	2b09      	cmp	r3, #9
 8008598:	d94d      	bls.n	8008636 <_svfiprintf_r+0x16e>
 800859a:	b1b8      	cbz	r0, 80085cc <_svfiprintf_r+0x104>
 800859c:	e00f      	b.n	80085be <_svfiprintf_r+0xf6>
 800859e:	462f      	mov	r7, r5
 80085a0:	e7b8      	b.n	8008514 <_svfiprintf_r+0x4c>
 80085a2:	4a40      	ldr	r2, [pc, #256]	; (80086a4 <_svfiprintf_r+0x1dc>)
 80085a4:	1a80      	subs	r0, r0, r2
 80085a6:	fa0b f000 	lsl.w	r0, fp, r0
 80085aa:	4318      	orrs	r0, r3
 80085ac:	9004      	str	r0, [sp, #16]
 80085ae:	463d      	mov	r5, r7
 80085b0:	e7d3      	b.n	800855a <_svfiprintf_r+0x92>
 80085b2:	9a03      	ldr	r2, [sp, #12]
 80085b4:	1d11      	adds	r1, r2, #4
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	9103      	str	r1, [sp, #12]
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	db01      	blt.n	80085c2 <_svfiprintf_r+0xfa>
 80085be:	9207      	str	r2, [sp, #28]
 80085c0:	e004      	b.n	80085cc <_svfiprintf_r+0x104>
 80085c2:	4252      	negs	r2, r2
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	9207      	str	r2, [sp, #28]
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	783b      	ldrb	r3, [r7, #0]
 80085ce:	2b2e      	cmp	r3, #46	; 0x2e
 80085d0:	d10c      	bne.n	80085ec <_svfiprintf_r+0x124>
 80085d2:	787b      	ldrb	r3, [r7, #1]
 80085d4:	2b2a      	cmp	r3, #42	; 0x2a
 80085d6:	d133      	bne.n	8008640 <_svfiprintf_r+0x178>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	1d1a      	adds	r2, r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	9203      	str	r2, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfb8      	it	lt
 80085e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80085e8:	3702      	adds	r7, #2
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	4d2e      	ldr	r5, [pc, #184]	; (80086a8 <_svfiprintf_r+0x1e0>)
 80085ee:	7839      	ldrb	r1, [r7, #0]
 80085f0:	2203      	movs	r2, #3
 80085f2:	4628      	mov	r0, r5
 80085f4:	f7f7 fdf4 	bl	80001e0 <memchr>
 80085f8:	b138      	cbz	r0, 800860a <_svfiprintf_r+0x142>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	1b40      	subs	r0, r0, r5
 80085fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	4303      	orrs	r3, r0
 8008606:	3701      	adds	r7, #1
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	7839      	ldrb	r1, [r7, #0]
 800860c:	4827      	ldr	r0, [pc, #156]	; (80086ac <_svfiprintf_r+0x1e4>)
 800860e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008612:	2206      	movs	r2, #6
 8008614:	1c7e      	adds	r6, r7, #1
 8008616:	f7f7 fde3 	bl	80001e0 <memchr>
 800861a:	2800      	cmp	r0, #0
 800861c:	d038      	beq.n	8008690 <_svfiprintf_r+0x1c8>
 800861e:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <_svfiprintf_r+0x1e8>)
 8008620:	bb13      	cbnz	r3, 8008668 <_svfiprintf_r+0x1a0>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	3307      	adds	r3, #7
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	3308      	adds	r3, #8
 800862c:	9303      	str	r3, [sp, #12]
 800862e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008630:	444b      	add	r3, r9
 8008632:	9309      	str	r3, [sp, #36]	; 0x24
 8008634:	e76d      	b.n	8008512 <_svfiprintf_r+0x4a>
 8008636:	fb05 3202 	mla	r2, r5, r2, r3
 800863a:	2001      	movs	r0, #1
 800863c:	460f      	mov	r7, r1
 800863e:	e7a6      	b.n	800858e <_svfiprintf_r+0xc6>
 8008640:	2300      	movs	r3, #0
 8008642:	3701      	adds	r7, #1
 8008644:	9305      	str	r3, [sp, #20]
 8008646:	4619      	mov	r1, r3
 8008648:	250a      	movs	r5, #10
 800864a:	4638      	mov	r0, r7
 800864c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008650:	3a30      	subs	r2, #48	; 0x30
 8008652:	2a09      	cmp	r2, #9
 8008654:	d903      	bls.n	800865e <_svfiprintf_r+0x196>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0c8      	beq.n	80085ec <_svfiprintf_r+0x124>
 800865a:	9105      	str	r1, [sp, #20]
 800865c:	e7c6      	b.n	80085ec <_svfiprintf_r+0x124>
 800865e:	fb05 2101 	mla	r1, r5, r1, r2
 8008662:	2301      	movs	r3, #1
 8008664:	4607      	mov	r7, r0
 8008666:	e7f0      	b.n	800864a <_svfiprintf_r+0x182>
 8008668:	ab03      	add	r3, sp, #12
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	4622      	mov	r2, r4
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <_svfiprintf_r+0x1ec>)
 8008670:	a904      	add	r1, sp, #16
 8008672:	4640      	mov	r0, r8
 8008674:	f3af 8000 	nop.w
 8008678:	f1b0 3fff 	cmp.w	r0, #4294967295
 800867c:	4681      	mov	r9, r0
 800867e:	d1d6      	bne.n	800862e <_svfiprintf_r+0x166>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	065b      	lsls	r3, r3, #25
 8008684:	f53f af35 	bmi.w	80084f2 <_svfiprintf_r+0x2a>
 8008688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800868a:	b01d      	add	sp, #116	; 0x74
 800868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	ab03      	add	r3, sp, #12
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	4622      	mov	r2, r4
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <_svfiprintf_r+0x1ec>)
 8008698:	a904      	add	r1, sp, #16
 800869a:	4640      	mov	r0, r8
 800869c:	f000 f882 	bl	80087a4 <_printf_i>
 80086a0:	e7ea      	b.n	8008678 <_svfiprintf_r+0x1b0>
 80086a2:	bf00      	nop
 80086a4:	08008aa8 	.word	0x08008aa8
 80086a8:	08008aae 	.word	0x08008aae
 80086ac:	08008ab2 	.word	0x08008ab2
 80086b0:	00000000 	.word	0x00000000
 80086b4:	08008415 	.word	0x08008415

080086b8 <_printf_common>:
 80086b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086bc:	4691      	mov	r9, r2
 80086be:	461f      	mov	r7, r3
 80086c0:	688a      	ldr	r2, [r1, #8]
 80086c2:	690b      	ldr	r3, [r1, #16]
 80086c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086c8:	4293      	cmp	r3, r2
 80086ca:	bfb8      	it	lt
 80086cc:	4613      	movlt	r3, r2
 80086ce:	f8c9 3000 	str.w	r3, [r9]
 80086d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086d6:	4606      	mov	r6, r0
 80086d8:	460c      	mov	r4, r1
 80086da:	b112      	cbz	r2, 80086e2 <_printf_common+0x2a>
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c9 3000 	str.w	r3, [r9]
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	0699      	lsls	r1, r3, #26
 80086e6:	bf42      	ittt	mi
 80086e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80086ec:	3302      	addmi	r3, #2
 80086ee:	f8c9 3000 	strmi.w	r3, [r9]
 80086f2:	6825      	ldr	r5, [r4, #0]
 80086f4:	f015 0506 	ands.w	r5, r5, #6
 80086f8:	d107      	bne.n	800870a <_printf_common+0x52>
 80086fa:	f104 0a19 	add.w	sl, r4, #25
 80086fe:	68e3      	ldr	r3, [r4, #12]
 8008700:	f8d9 2000 	ldr.w	r2, [r9]
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	42ab      	cmp	r3, r5
 8008708:	dc28      	bgt.n	800875c <_printf_common+0xa4>
 800870a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800870e:	6822      	ldr	r2, [r4, #0]
 8008710:	3300      	adds	r3, #0
 8008712:	bf18      	it	ne
 8008714:	2301      	movne	r3, #1
 8008716:	0692      	lsls	r2, r2, #26
 8008718:	d42d      	bmi.n	8008776 <_printf_common+0xbe>
 800871a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800871e:	4639      	mov	r1, r7
 8008720:	4630      	mov	r0, r6
 8008722:	47c0      	blx	r8
 8008724:	3001      	adds	r0, #1
 8008726:	d020      	beq.n	800876a <_printf_common+0xb2>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	68e5      	ldr	r5, [r4, #12]
 800872c:	f8d9 2000 	ldr.w	r2, [r9]
 8008730:	f003 0306 	and.w	r3, r3, #6
 8008734:	2b04      	cmp	r3, #4
 8008736:	bf08      	it	eq
 8008738:	1aad      	subeq	r5, r5, r2
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	6922      	ldr	r2, [r4, #16]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	f04f 0900 	mov.w	r9, #0
 8008752:	341a      	adds	r4, #26
 8008754:	454d      	cmp	r5, r9
 8008756:	d11a      	bne.n	800878e <_printf_common+0xd6>
 8008758:	2000      	movs	r0, #0
 800875a:	e008      	b.n	800876e <_printf_common+0xb6>
 800875c:	2301      	movs	r3, #1
 800875e:	4652      	mov	r2, sl
 8008760:	4639      	mov	r1, r7
 8008762:	4630      	mov	r0, r6
 8008764:	47c0      	blx	r8
 8008766:	3001      	adds	r0, #1
 8008768:	d103      	bne.n	8008772 <_printf_common+0xba>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008772:	3501      	adds	r5, #1
 8008774:	e7c3      	b.n	80086fe <_printf_common+0x46>
 8008776:	18e1      	adds	r1, r4, r3
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	2030      	movs	r0, #48	; 0x30
 800877c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008780:	4422      	add	r2, r4
 8008782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800878a:	3302      	adds	r3, #2
 800878c:	e7c5      	b.n	800871a <_printf_common+0x62>
 800878e:	2301      	movs	r3, #1
 8008790:	4622      	mov	r2, r4
 8008792:	4639      	mov	r1, r7
 8008794:	4630      	mov	r0, r6
 8008796:	47c0      	blx	r8
 8008798:	3001      	adds	r0, #1
 800879a:	d0e6      	beq.n	800876a <_printf_common+0xb2>
 800879c:	f109 0901 	add.w	r9, r9, #1
 80087a0:	e7d8      	b.n	8008754 <_printf_common+0x9c>
	...

080087a4 <_printf_i>:
 80087a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80087ac:	460c      	mov	r4, r1
 80087ae:	7e09      	ldrb	r1, [r1, #24]
 80087b0:	b085      	sub	sp, #20
 80087b2:	296e      	cmp	r1, #110	; 0x6e
 80087b4:	4617      	mov	r7, r2
 80087b6:	4606      	mov	r6, r0
 80087b8:	4698      	mov	r8, r3
 80087ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087bc:	f000 80b3 	beq.w	8008926 <_printf_i+0x182>
 80087c0:	d822      	bhi.n	8008808 <_printf_i+0x64>
 80087c2:	2963      	cmp	r1, #99	; 0x63
 80087c4:	d036      	beq.n	8008834 <_printf_i+0x90>
 80087c6:	d80a      	bhi.n	80087de <_printf_i+0x3a>
 80087c8:	2900      	cmp	r1, #0
 80087ca:	f000 80b9 	beq.w	8008940 <_printf_i+0x19c>
 80087ce:	2958      	cmp	r1, #88	; 0x58
 80087d0:	f000 8083 	beq.w	80088da <_printf_i+0x136>
 80087d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80087dc:	e032      	b.n	8008844 <_printf_i+0xa0>
 80087de:	2964      	cmp	r1, #100	; 0x64
 80087e0:	d001      	beq.n	80087e6 <_printf_i+0x42>
 80087e2:	2969      	cmp	r1, #105	; 0x69
 80087e4:	d1f6      	bne.n	80087d4 <_printf_i+0x30>
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	6813      	ldr	r3, [r2, #0]
 80087ea:	0605      	lsls	r5, r0, #24
 80087ec:	f103 0104 	add.w	r1, r3, #4
 80087f0:	d52a      	bpl.n	8008848 <_printf_i+0xa4>
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	da03      	bge.n	8008802 <_printf_i+0x5e>
 80087fa:	222d      	movs	r2, #45	; 0x2d
 80087fc:	425b      	negs	r3, r3
 80087fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008802:	486f      	ldr	r0, [pc, #444]	; (80089c0 <_printf_i+0x21c>)
 8008804:	220a      	movs	r2, #10
 8008806:	e039      	b.n	800887c <_printf_i+0xd8>
 8008808:	2973      	cmp	r1, #115	; 0x73
 800880a:	f000 809d 	beq.w	8008948 <_printf_i+0x1a4>
 800880e:	d808      	bhi.n	8008822 <_printf_i+0x7e>
 8008810:	296f      	cmp	r1, #111	; 0x6f
 8008812:	d020      	beq.n	8008856 <_printf_i+0xb2>
 8008814:	2970      	cmp	r1, #112	; 0x70
 8008816:	d1dd      	bne.n	80087d4 <_printf_i+0x30>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	f043 0320 	orr.w	r3, r3, #32
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	e003      	b.n	800882a <_printf_i+0x86>
 8008822:	2975      	cmp	r1, #117	; 0x75
 8008824:	d017      	beq.n	8008856 <_printf_i+0xb2>
 8008826:	2978      	cmp	r1, #120	; 0x78
 8008828:	d1d4      	bne.n	80087d4 <_printf_i+0x30>
 800882a:	2378      	movs	r3, #120	; 0x78
 800882c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008830:	4864      	ldr	r0, [pc, #400]	; (80089c4 <_printf_i+0x220>)
 8008832:	e055      	b.n	80088e0 <_printf_i+0x13c>
 8008834:	6813      	ldr	r3, [r2, #0]
 8008836:	1d19      	adds	r1, r3, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6011      	str	r1, [r2, #0]
 800883c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008844:	2301      	movs	r3, #1
 8008846:	e08c      	b.n	8008962 <_printf_i+0x1be>
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6011      	str	r1, [r2, #0]
 800884c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008850:	bf18      	it	ne
 8008852:	b21b      	sxthne	r3, r3
 8008854:	e7cf      	b.n	80087f6 <_printf_i+0x52>
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	6825      	ldr	r5, [r4, #0]
 800885a:	1d18      	adds	r0, r3, #4
 800885c:	6010      	str	r0, [r2, #0]
 800885e:	0628      	lsls	r0, r5, #24
 8008860:	d501      	bpl.n	8008866 <_printf_i+0xc2>
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	e002      	b.n	800886c <_printf_i+0xc8>
 8008866:	0668      	lsls	r0, r5, #25
 8008868:	d5fb      	bpl.n	8008862 <_printf_i+0xbe>
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	4854      	ldr	r0, [pc, #336]	; (80089c0 <_printf_i+0x21c>)
 800886e:	296f      	cmp	r1, #111	; 0x6f
 8008870:	bf14      	ite	ne
 8008872:	220a      	movne	r2, #10
 8008874:	2208      	moveq	r2, #8
 8008876:	2100      	movs	r1, #0
 8008878:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800887c:	6865      	ldr	r5, [r4, #4]
 800887e:	60a5      	str	r5, [r4, #8]
 8008880:	2d00      	cmp	r5, #0
 8008882:	f2c0 8095 	blt.w	80089b0 <_printf_i+0x20c>
 8008886:	6821      	ldr	r1, [r4, #0]
 8008888:	f021 0104 	bic.w	r1, r1, #4
 800888c:	6021      	str	r1, [r4, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d13d      	bne.n	800890e <_printf_i+0x16a>
 8008892:	2d00      	cmp	r5, #0
 8008894:	f040 808e 	bne.w	80089b4 <_printf_i+0x210>
 8008898:	4665      	mov	r5, ip
 800889a:	2a08      	cmp	r2, #8
 800889c:	d10b      	bne.n	80088b6 <_printf_i+0x112>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	07db      	lsls	r3, r3, #31
 80088a2:	d508      	bpl.n	80088b6 <_printf_i+0x112>
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	6862      	ldr	r2, [r4, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	bfde      	ittt	le
 80088ac:	2330      	movle	r3, #48	; 0x30
 80088ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088b6:	ebac 0305 	sub.w	r3, ip, r5
 80088ba:	6123      	str	r3, [r4, #16]
 80088bc:	f8cd 8000 	str.w	r8, [sp]
 80088c0:	463b      	mov	r3, r7
 80088c2:	aa03      	add	r2, sp, #12
 80088c4:	4621      	mov	r1, r4
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7ff fef6 	bl	80086b8 <_printf_common>
 80088cc:	3001      	adds	r0, #1
 80088ce:	d14d      	bne.n	800896c <_printf_i+0x1c8>
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	b005      	add	sp, #20
 80088d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088da:	4839      	ldr	r0, [pc, #228]	; (80089c0 <_printf_i+0x21c>)
 80088dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80088e0:	6813      	ldr	r3, [r2, #0]
 80088e2:	6821      	ldr	r1, [r4, #0]
 80088e4:	1d1d      	adds	r5, r3, #4
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6015      	str	r5, [r2, #0]
 80088ea:	060a      	lsls	r2, r1, #24
 80088ec:	d50b      	bpl.n	8008906 <_printf_i+0x162>
 80088ee:	07ca      	lsls	r2, r1, #31
 80088f0:	bf44      	itt	mi
 80088f2:	f041 0120 	orrmi.w	r1, r1, #32
 80088f6:	6021      	strmi	r1, [r4, #0]
 80088f8:	b91b      	cbnz	r3, 8008902 <_printf_i+0x15e>
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	f022 0220 	bic.w	r2, r2, #32
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	2210      	movs	r2, #16
 8008904:	e7b7      	b.n	8008876 <_printf_i+0xd2>
 8008906:	064d      	lsls	r5, r1, #25
 8008908:	bf48      	it	mi
 800890a:	b29b      	uxthmi	r3, r3
 800890c:	e7ef      	b.n	80088ee <_printf_i+0x14a>
 800890e:	4665      	mov	r5, ip
 8008910:	fbb3 f1f2 	udiv	r1, r3, r2
 8008914:	fb02 3311 	mls	r3, r2, r1, r3
 8008918:	5cc3      	ldrb	r3, [r0, r3]
 800891a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800891e:	460b      	mov	r3, r1
 8008920:	2900      	cmp	r1, #0
 8008922:	d1f5      	bne.n	8008910 <_printf_i+0x16c>
 8008924:	e7b9      	b.n	800889a <_printf_i+0xf6>
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	6825      	ldr	r5, [r4, #0]
 800892a:	6961      	ldr	r1, [r4, #20]
 800892c:	1d18      	adds	r0, r3, #4
 800892e:	6010      	str	r0, [r2, #0]
 8008930:	0628      	lsls	r0, r5, #24
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	d501      	bpl.n	800893a <_printf_i+0x196>
 8008936:	6019      	str	r1, [r3, #0]
 8008938:	e002      	b.n	8008940 <_printf_i+0x19c>
 800893a:	066a      	lsls	r2, r5, #25
 800893c:	d5fb      	bpl.n	8008936 <_printf_i+0x192>
 800893e:	8019      	strh	r1, [r3, #0]
 8008940:	2300      	movs	r3, #0
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	4665      	mov	r5, ip
 8008946:	e7b9      	b.n	80088bc <_printf_i+0x118>
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	1d19      	adds	r1, r3, #4
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	681d      	ldr	r5, [r3, #0]
 8008950:	6862      	ldr	r2, [r4, #4]
 8008952:	2100      	movs	r1, #0
 8008954:	4628      	mov	r0, r5
 8008956:	f7f7 fc43 	bl	80001e0 <memchr>
 800895a:	b108      	cbz	r0, 8008960 <_printf_i+0x1bc>
 800895c:	1b40      	subs	r0, r0, r5
 800895e:	6060      	str	r0, [r4, #4]
 8008960:	6863      	ldr	r3, [r4, #4]
 8008962:	6123      	str	r3, [r4, #16]
 8008964:	2300      	movs	r3, #0
 8008966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896a:	e7a7      	b.n	80088bc <_printf_i+0x118>
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	462a      	mov	r2, r5
 8008970:	4639      	mov	r1, r7
 8008972:	4630      	mov	r0, r6
 8008974:	47c0      	blx	r8
 8008976:	3001      	adds	r0, #1
 8008978:	d0aa      	beq.n	80088d0 <_printf_i+0x12c>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	079b      	lsls	r3, r3, #30
 800897e:	d413      	bmi.n	80089a8 <_printf_i+0x204>
 8008980:	68e0      	ldr	r0, [r4, #12]
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	4298      	cmp	r0, r3
 8008986:	bfb8      	it	lt
 8008988:	4618      	movlt	r0, r3
 800898a:	e7a3      	b.n	80088d4 <_printf_i+0x130>
 800898c:	2301      	movs	r3, #1
 800898e:	464a      	mov	r2, r9
 8008990:	4639      	mov	r1, r7
 8008992:	4630      	mov	r0, r6
 8008994:	47c0      	blx	r8
 8008996:	3001      	adds	r0, #1
 8008998:	d09a      	beq.n	80088d0 <_printf_i+0x12c>
 800899a:	3501      	adds	r5, #1
 800899c:	68e3      	ldr	r3, [r4, #12]
 800899e:	9a03      	ldr	r2, [sp, #12]
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	42ab      	cmp	r3, r5
 80089a4:	dcf2      	bgt.n	800898c <_printf_i+0x1e8>
 80089a6:	e7eb      	b.n	8008980 <_printf_i+0x1dc>
 80089a8:	2500      	movs	r5, #0
 80089aa:	f104 0919 	add.w	r9, r4, #25
 80089ae:	e7f5      	b.n	800899c <_printf_i+0x1f8>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1ac      	bne.n	800890e <_printf_i+0x16a>
 80089b4:	7803      	ldrb	r3, [r0, #0]
 80089b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089be:	e76c      	b.n	800889a <_printf_i+0xf6>
 80089c0:	08008ab9 	.word	0x08008ab9
 80089c4:	08008aca 	.word	0x08008aca

080089c8 <memcpy>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	1e43      	subs	r3, r0, #1
 80089cc:	440a      	add	r2, r1
 80089ce:	4291      	cmp	r1, r2
 80089d0:	d100      	bne.n	80089d4 <memcpy+0xc>
 80089d2:	bd10      	pop	{r4, pc}
 80089d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089dc:	e7f7      	b.n	80089ce <memcpy+0x6>

080089de <memmove>:
 80089de:	4288      	cmp	r0, r1
 80089e0:	b510      	push	{r4, lr}
 80089e2:	eb01 0302 	add.w	r3, r1, r2
 80089e6:	d807      	bhi.n	80089f8 <memmove+0x1a>
 80089e8:	1e42      	subs	r2, r0, #1
 80089ea:	4299      	cmp	r1, r3
 80089ec:	d00a      	beq.n	8008a04 <memmove+0x26>
 80089ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089f6:	e7f8      	b.n	80089ea <memmove+0xc>
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d9f5      	bls.n	80089e8 <memmove+0xa>
 80089fc:	1881      	adds	r1, r0, r2
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	42d3      	cmn	r3, r2
 8008a02:	d100      	bne.n	8008a06 <memmove+0x28>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a0e:	e7f7      	b.n	8008a00 <memmove+0x22>

08008a10 <_realloc_r>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	4607      	mov	r7, r0
 8008a14:	4614      	mov	r4, r2
 8008a16:	460e      	mov	r6, r1
 8008a18:	b921      	cbnz	r1, 8008a24 <_realloc_r+0x14>
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a20:	f7ff bc6c 	b.w	80082fc <_malloc_r>
 8008a24:	b922      	cbnz	r2, 8008a30 <_realloc_r+0x20>
 8008a26:	f7ff fc1b 	bl	8008260 <_free_r>
 8008a2a:	4625      	mov	r5, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	f000 f814 	bl	8008a5c <_malloc_usable_size_r>
 8008a34:	42a0      	cmp	r0, r4
 8008a36:	d20f      	bcs.n	8008a58 <_realloc_r+0x48>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7ff fc5e 	bl	80082fc <_malloc_r>
 8008a40:	4605      	mov	r5, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d0f2      	beq.n	8008a2c <_realloc_r+0x1c>
 8008a46:	4631      	mov	r1, r6
 8008a48:	4622      	mov	r2, r4
 8008a4a:	f7ff ffbd 	bl	80089c8 <memcpy>
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff fc05 	bl	8008260 <_free_r>
 8008a56:	e7e9      	b.n	8008a2c <_realloc_r+0x1c>
 8008a58:	4635      	mov	r5, r6
 8008a5a:	e7e7      	b.n	8008a2c <_realloc_r+0x1c>

08008a5c <_malloc_usable_size_r>:
 8008a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a60:	1f18      	subs	r0, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfbc      	itt	lt
 8008a66:	580b      	ldrlt	r3, [r1, r0]
 8008a68:	18c0      	addlt	r0, r0, r3
 8008a6a:	4770      	bx	lr

08008a6c <_init>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr

08008a78 <_fini>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr
